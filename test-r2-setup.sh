#!/bin/bash

echo "üîç AUTOMATICK√Å DIAGN√ìSTIKA R2 STORAGE"
echo "======================================"
echo ""

# Railway API URL
RAILWAY_API="https://blackrent-app-production-4d6f.up.railway.app/api"

echo "üìã 1. Testovanie API dostupnosti..."
if curl -s "$RAILWAY_API/health" > /dev/null; then
    echo "‚úÖ API je dostupn√©"
else
    echo "‚ùå API nie je dostupn√©"
    exit 1
fi

echo ""
echo "üìã 2. Kontrola R2 konfigur√°cie..."
R2_STATUS=$(curl -s "$RAILWAY_API/migration/r2-status")
echo "$R2_STATUS" | jq .

echo ""
echo "üìã 3. Kontrola files API..."
FILES_STATUS=$(curl -s "$RAILWAY_API/files/status")
echo "$FILES_STATUS" | jq .

echo ""
echo "üìã 4. Testovanie upload endpointu..."
echo "Vytv√°ram test s√∫bor..."

# Vytvor test s√∫bor
echo "Test R2 upload - $(date)" > test-upload.txt

# Test upload
UPLOAD_RESULT=$(curl -s -X POST "$RAILWAY_API/files/upload" \
  -F "file=@test-upload.txt" \
  -F "type=document" \
  -F "entityId=test-$(date +%s)")

echo "$UPLOAD_RESULT" | jq .

echo ""
echo "üìã 5. Kontrola existuj√∫cich protokolov..."
PROTOCOLS=$(curl -s "$RAILWAY_API/protocols/rental/all")
HANDOVER_COUNT=$(echo "$PROTOCOLS" | jq '.handoverProtocols | length')
RETURN_COUNT=$(echo "$PROTOCOLS" | jq '.returnProtocols | length')

echo "Handover protokoly: $HANDOVER_COUNT"
echo "Return protokoly: $RETURN_COUNT"

echo ""
echo "üìã 6. Testovanie presigned URL..."
PRESIGNED_RESULT=$(curl -s -X POST "$RAILWAY_API/files/presigned-url" \
  -H "Content-Type: application/json" \
  -d '{
    "type": "document",
    "entityId": "test-123",
    "filename": "test.pdf",
    "contentType": "application/pdf"
  }')

echo "$PRESIGNED_RESULT" | jq .

echo ""
echo "üßπ ƒåistenie test s√∫borov..."
rm -f test-upload.txt

echo ""
echo "üìä S√öHRN DIAGN√ìSTIKY:"
echo "====================="

# Anal√Ωza v√Ωsledkov
if echo "$R2_STATUS" | jq -e '.configured == true' > /dev/null; then
    echo "‚úÖ R2 Storage je nakonfigurovan√©"
else
    echo "‚ùå R2 Storage nie je nakonfigurovan√©"
    echo "   Potrebn√© environment variables:"
    echo "   - R2_ENDPOINT"
    echo "   - R2_ACCESS_KEY_ID"
    echo "   - R2_SECRET_ACCESS_KEY"
    echo "   - R2_BUCKET_NAME"
    echo "   - R2_PUBLIC_URL"
fi

if echo "$UPLOAD_RESULT" | jq -e '.success == true' > /dev/null; then
    echo "‚úÖ Upload do R2 funguje"
    UPLOAD_URL=$(echo "$UPLOAD_RESULT" | jq -r '.url')
    echo "   Upload URL: $UPLOAD_URL"
else
    echo "‚ùå Upload do R2 zlyh√°va"
    ERROR=$(echo "$UPLOAD_RESULT" | jq -r '.error // .message')
    echo "   Chyba: $ERROR"
fi

if echo "$PRESIGNED_RESULT" | jq -e '.success == true' > /dev/null; then
    echo "‚úÖ Presigned URL funguje"
else
    echo "‚ùå Presigned URL zlyh√°va"
fi

if [ "$HANDOVER_COUNT" -gt 0 ] || [ "$RETURN_COUNT" -gt 0 ]; then
    echo "‚úÖ Existuj√∫ protokoly na migr√°ciu"
    echo "   M√¥≈æete spusti≈• migr√°ciu cez:"
    echo "   curl -X POST $RAILWAY_API/migration/migrate-to-r2"
else
    echo "‚ÑπÔ∏è  ≈Ωiadne protokoly na migr√°ciu"
fi

echo ""
echo "üéØ ƒéAL≈†IE KROKY:"
echo "================"

if echo "$R2_STATUS" | jq -e '.configured == true' > /dev/null; then
    if echo "$UPLOAD_RESULT" | jq -e '.success == true' > /dev/null; then
        echo "‚úÖ V≈°etko je nakonfigurovan√© a funguje!"
        echo "   M√¥≈æete pou≈æ√≠va≈• R2 storage."
    else
        echo "‚ö†Ô∏è  R2 je nakonfigurovan√©, ale upload zlyh√°va"
        echo "   Skontrolujte Railway logy pre detaily"
    fi
else
    echo "üîß Potrebujete nastavi≈• R2 Storage:"
    echo "   1. Vytvorte Cloudflare R2 bucket"
    echo "   2. Nastavte environment variables v Railway"
    echo "   3. Spustite tento test znova"
fi

echo ""
echo "üìö Dokument√°cia:"
echo "   - R2-IMPLEMENTATION-SUMMARY.md"
echo "   - setup-r2-storage.sh" 