import { Router, Request, Response } from 'express';
import { authenticateToken } from '../middleware/auth';
import { checkPermission } from '../middleware/permissions';
import ImapEmailService from '../services/imap-email-service';

const router = Router();

interface ApiResponse {
  success: boolean;
  data?: any;
  error?: string;
}

let imapService: ImapEmailService | null = null;

// GET /api/email-imap/test - Test IMAP pripojenia
router.get('/test',
  authenticateToken,
  checkPermission('rentals', 'read'),
  async (req: Request, res: Response<ApiResponse>) => {
    try {
      const isEnabled = process.env.IMAP_ENABLED !== 'false' && !!process.env.IMAP_PASSWORD;
      
      if (!isEnabled) {
        return res.json({
          success: true,
          data: {
            connected: false,
            enabled: false,
            message: 'IMAP slu≈æba je vypnut√°',
            timestamp: new Date().toISOString(),
            config: {
              host: process.env.IMAP_HOST || 'imap.m1.websupport.sk',
              port: process.env.IMAP_PORT || '993',
              user: process.env.IMAP_USER || 'info@blackrent.sk'
            }
          }
        });
      }
      
      console.log('üß™ IMAP: Testujem pripojenie...');
      
      const testService = new ImapEmailService();
      const isConnected = await testService.testConnection();
      
      res.json({
        success: true,
        data: {
          connected: isConnected,
          enabled: true,
          timestamp: new Date().toISOString(),
          config: {
            host: process.env.IMAP_HOST || 'imap.m1.websupport.sk',
            port: process.env.IMAP_PORT || '993',
            user: process.env.IMAP_USER || 'info@blackrent.sk'
          }
        }
      });
    } catch (error) {
      console.error('‚ùå IMAP Test error:', error);
      res.status(500).json({
        success: false,
        error: 'Chyba pri testovan√≠ IMAP pripojenia'
      });
    }
  }
);

// POST /api/email-imap/start - Spusti≈• IMAP monitoring
router.post('/start',
  authenticateToken,
  checkPermission('rentals', 'update'),
  async (req: Request, res: Response<ApiResponse>) => {
    try {
      if (imapService) {
        return res.status(400).json({
          success: false,
          error: 'IMAP monitoring u≈æ be≈æ√≠'
        });
      }

      console.log('üöÄ IMAP: Sp√∫≈°≈•am monitoring...');
      
      imapService = new ImapEmailService();
      
      // Spusti≈• monitoring v background (ka≈æd√Ωch 30 sek√∫nd)
      imapService.startMonitoring(0.5).catch(error => {
        console.error('‚ùå IMAP Monitoring error:', error);
      });
      
      res.json({
        success: true,
        data: {
          status: 'started',
          interval: '30 seconds',
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå IMAP Start error:', error);
      res.status(500).json({
        success: false,
        error: 'Chyba pri spusten√≠ IMAP monitoringu'
      });
    }
  }
);

// POST /api/email-imap/stop - Zastavi≈• IMAP monitoring
router.post('/stop',
  authenticateToken,
  checkPermission('rentals', 'update'),
  async (req: Request, res: Response<ApiResponse>) => {
    try {
      if (!imapService) {
        return res.status(400).json({
          success: false,
          error: 'IMAP monitoring nebe≈æ√≠'
        });
      }

      console.log('üõë IMAP: Zastavujem monitoring...');
      
      await imapService.disconnect();
      imapService = null;
      
      res.json({
        success: true,
        data: {
          status: 'stopped',
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå IMAP Stop error:', error);
      res.status(500).json({
        success: false,
        error: 'Chyba pri zastaven√≠ IMAP monitoringu'
      });
    }
  }
);

// POST /api/email-imap/check-now - Manu√°lna kontrola emailov
router.post('/check-now',
  authenticateToken,
  checkPermission('rentals', 'update'),
  async (req: Request, res: Response<ApiResponse>) => {
    try {
      console.log('üîç IMAP: Manu√°lna kontrola emailov...');
      
      const checkService = new ImapEmailService();
      await checkService.checkForNewEmails();
      
      res.json({
        success: true,
        data: {
          status: 'checked',
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå IMAP Check error:', error);
      res.status(500).json({
        success: false,
        error: 'Chyba pri kontrole emailov'
      });
    }
  }
);

// GET /api/email-imap/status - Status IMAP monitoringu
router.get('/status',
  authenticateToken,
  checkPermission('rentals', 'read'),
  async (req: Request, res: Response<ApiResponse>) => {
    try {
      const isEnabled = process.env.IMAP_ENABLED !== 'false' && !!process.env.IMAP_PASSWORD;
      
      res.json({
        success: true,
        data: {
          running: !!imapService,
          enabled: isEnabled,
          timestamp: new Date().toISOString(),
          config: {
            host: process.env.IMAP_HOST || 'imap.m1.websupport.sk',
            user: process.env.IMAP_USER || 'info@blackrent.sk',
            enabled: isEnabled
          }
        }
      });
    } catch (error) {
      console.error('‚ùå IMAP Status error:', error);
      res.status(500).json({
        success: false,
        error: 'Chyba pri z√≠skavan√≠ statusu'
      });
    }
  }
);

export default router;