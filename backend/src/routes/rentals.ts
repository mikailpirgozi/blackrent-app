import { Router, Request, Response } from 'express';
import { postgresDatabase } from '../models/postgres-database';
import { Rental, ApiResponse } from '../types';
import { authenticateToken } from '../middleware/auth';
import { v4 as uuidv4 } from 'uuid';

const router = Router();

// GET /api/rentals - Z√≠skanie v≈°etk√Ωch pren√°jmov
router.get('/', authenticateToken, async (req: Request, res: Response<ApiResponse<Rental[]>>) => {
  try {
    const rentals = await postgresDatabase.getRentals();
    res.json({
      success: true,
      data: rentals
    });
  } catch (error) {
    console.error('Get rentals error:', error);
    res.status(500).json({
      success: false,
      error: 'Chyba pri z√≠skavan√≠ pren√°jmov'
    });
  }
});

// GET /api/rentals/:id - Z√≠skanie konkr√©tneho pren√°jmu
router.get('/:id', authenticateToken, async (req: Request, res: Response<ApiResponse<Rental>>) => {
  try {
    const { id } = req.params;
    const rental = await postgresDatabase.getRental(id);
    
    if (!rental) {
      return res.status(404).json({
        success: false,
        error: 'Pren√°jom nen√°jden√Ω'
      });
    }

    res.json({
      success: true,
      data: rental
    });
  } catch (error) {
    console.error('Get rental error:', error);
    res.status(500).json({
      success: false,
      error: 'Chyba pri z√≠skavan√≠ pren√°jmu'
    });
  }
});

// POST /api/rentals - Vytvorenie nov√©ho pren√°jmu
router.post('/', authenticateToken, async (req: Request, res: Response<ApiResponse>) => {
  try {
    const {
      vehicleId,
      customerId,
      customerName,
      startDate,
      endDate,
      totalPrice,
      commission,
      paymentMethod,
      discount,
      customCommission,
      extraKmCharge,
      paid,
      status,
      handoverPlace,
      confirmed,
      payments,
      history,
      orderNumber,
      deposit,
      allowedKilometers,
      extraKilometerRate,
      returnConditions,
      fuelLevel,
      odometer,
      returnFuelLevel,
      returnOdometer,
      actualKilometers,
      fuelRefillCost,
      handoverProtocolId,
      returnProtocolId
    } = req.body;

    if (!customerName || !startDate || !endDate) {
      return res.status(400).json({
        success: false,
        error: 'V≈°etky povinn√© polia musia by≈• vyplnen√©'
      });
    }

    const createdRental = await postgresDatabase.createRental({
      vehicleId,
      customerId,
      customerName,
      startDate: new Date(startDate),
      endDate: new Date(endDate),
      totalPrice: totalPrice || 0,
      commission: commission || 0,
      paymentMethod: paymentMethod || 'cash',
      discount,
      customCommission,
      extraKmCharge,
      paid: paid || false,
      status: status || 'pending',
      handoverPlace,
      confirmed: confirmed || false,
      payments,
      history,
      orderNumber,
      deposit,
      allowedKilometers,
      extraKilometerRate,
      returnConditions,
      fuelLevel,
      odometer,
      returnFuelLevel,
      returnOdometer,
      actualKilometers,
      fuelRefillCost,
      handoverProtocolId,
      returnProtocolId
    });

    res.status(201).json({
      success: true,
      message: 'Pren√°jom √∫spe≈°ne vytvoren√Ω',
      data: createdRental
    });

  } catch (error) {
    console.error('Create rental error:', error);
    res.status(500).json({
      success: false,
      error: `Chyba pri vytv√°ran√≠ pren√°jmu: ${error instanceof Error ? error.message : 'Nezn√°ma chyba'}`
    });
  }
});

// PUT /api/rentals/:id - Aktualiz√°cia pren√°jmu
router.put('/:id', authenticateToken, async (req: Request, res: Response<ApiResponse>) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // Skontroluj, ƒçi pren√°jom existuje
    const existingRental = await postgresDatabase.getRental(id);
    if (!existingRental) {
      return res.status(404).json({
        success: false,
        error: 'Pren√°jom nen√°jden√Ω'
      });
    }

    const updatedRental: Rental = {
      ...existingRental,
      ...updateData,
      id,
      startDate: updateData.startDate ? new Date(updateData.startDate) : existingRental.startDate,
      endDate: updateData.endDate ? new Date(updateData.endDate) : existingRental.endDate
    };

    await postgresDatabase.updateRental(updatedRental);

    res.json({
      success: true,
      message: 'Pren√°jom √∫spe≈°ne aktualizovan√Ω',
      data: updatedRental
    });

  } catch (error) {
    console.error('Update rental error:', error);
    res.status(500).json({
      success: false,
      error: 'Chyba pri aktualiz√°cii pren√°jmu'
    });
  }
});

// DELETE /api/rentals/:id - Vymazanie pren√°jmu
router.delete('/:id', authenticateToken, async (req: Request, res: Response<ApiResponse>) => {
  try {
    const { id } = req.params;
    const userId = (req as any).user.id;
    const userRole = (req as any).user.role;

    console.log(`üóëÔ∏è Pokus o vymazanie pren√°jmu ID: ${id}, pou≈æ√≠vateƒæ: ${userId}, rola: ${userRole}`);

    // Skontroluj, ƒçi pren√°jom existuje
    const existingRental = await postgresDatabase.getRental(id);
    if (!existingRental) {
      console.log(`‚ùå Pren√°jom ${id} nen√°jden√Ω v datab√°ze`);
      return res.status(404).json({
        success: false,
        error: 'Pren√°jom nen√°jden√Ω'
      });
    }

    console.log(`‚úÖ Pren√°jom ${id} n√°jden√Ω, vymaz√°vam...`);
    await postgresDatabase.deleteRental(id);
    console.log(`üéâ Pren√°jom ${id} √∫spe≈°ne vymazan√Ω`);

    res.json({
      success: true,
      message: 'Pren√°jom √∫spe≈°ne vymazan√Ω'
    });

  } catch (error) {
    console.error('Delete rental error:', error);
    res.status(500).json({
      success: false,
      error: 'Chyba pri vymaz√°van√≠ pren√°jmu'
    });
  }
});

export default router; 