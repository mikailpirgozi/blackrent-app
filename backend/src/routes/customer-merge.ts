import express from 'express';
import { postgresDatabase } from '../models/postgres-database.js';
import { authenticateToken } from '../middleware/auth.js';
import { logger } from '../utils/logger.js';

const router = express.Router();

// üîç GET /api/customer-merge/duplicates - N√°jdi duplicitn√Ωch z√°kazn√≠kov
router.get('/duplicates', authenticateToken, async (req, res) => {
  try {
    logger.info('üîç Finding duplicate customers...');
    
    const duplicates = await postgresDatabase.findDuplicateCustomers();
    
    // Pridaj ≈°tatistiky pre ka≈æd√©ho z√°kazn√≠ka
    const duplicatesWithStats = await Promise.all(
      duplicates.map(async (duplicate) => {
        const customer1Stats = await postgresDatabase.getCustomerStats(duplicate.group[0].id);
        const customer2Stats = await postgresDatabase.getCustomerStats(duplicate.group[1].id);
        
        return {
          ...duplicate,
          group: [
            { ...duplicate.group[0], stats: customer1Stats },
            { ...duplicate.group[1], stats: customer2Stats }
          ]
        };
      })
    );
    
    logger.info(`‚úÖ Found ${duplicatesWithStats.length} potential duplicate groups`);
    res.json({
      success: true,
      data: duplicatesWithStats
    });
  } catch (error) {
    logger.error(`‚ùå Error finding duplicates: ${error}`);
    res.status(500).json({
      success: false,
      error: 'Chyba pri hƒæadan√≠ duplicitn√Ωch z√°kazn√≠kov'
    });
  }
});

// üîÑ POST /api/customer-merge/merge - Zjedno≈• z√°kazn√≠kov
router.post('/merge', authenticateToken, async (req, res) => {
  try {
    const { targetCustomerId, sourceCustomerId, mergedData } = req.body;
    
    // Valid√°cia vstupn√Ωch √∫dajov
    if (!targetCustomerId || !sourceCustomerId || !mergedData) {
      return res.status(400).json({
        success: false,
        error: 'Ch√Ωbaj√∫ povinn√© √∫daje pre merge'
      });
    }
    
    if (targetCustomerId === sourceCustomerId) {
      return res.status(400).json({
        success: false,
        error: 'Nemo≈æno zjednoti≈• z√°kazn√≠ka so sebou sam√Ωm'
      });
    }
    
    if (!mergedData.name || !mergedData.name.trim()) {
      return res.status(400).json({
        success: false,
        error: 'Meno z√°kazn√≠ka je povinn√©'
      });
    }
    
    logger.info(`üîÑ Merging customer ${sourceCustomerId} into ${targetCustomerId}`);
    
    // Z√≠skaj ≈°tatistiky pred merge
    const sourceStats = await postgresDatabase.getCustomerStats(sourceCustomerId);
    const targetStats = await postgresDatabase.getCustomerStats(targetCustomerId);
    
    // Vykonaj merge
    await postgresDatabase.mergeCustomers(targetCustomerId, sourceCustomerId, {
      name: mergedData.name.trim(),
      email: mergedData.email?.trim() || '',
      phone: mergedData.phone?.trim() || ''
    });
    
    // Z√≠skaj fin√°lne ≈°tatistiky
    const finalStats = await postgresDatabase.getCustomerStats(targetCustomerId);
    
    logger.info(`‚úÖ Customer merge completed: ${sourceStats.rentalCount + targetStats.rentalCount} rentals merged`);
    
    res.json({
      success: true,
      data: {
        mergedCustomerId: targetCustomerId,
        mergedRentals: sourceStats.rentalCount + targetStats.rentalCount,
        finalStats
      }
    });
  } catch (error) {
    logger.error(`‚ùå Error merging customers: ${error}`);
    res.status(500).json({
      success: false,
      error: 'Chyba pri zjednocovan√≠ z√°kazn√≠kov'
    });
  }
});

// üìä GET /api/customer-merge/stats/:customerId - Z√≠skaj ≈°tatistiky z√°kazn√≠ka
router.get('/stats/:customerId', authenticateToken, async (req, res) => {
  try {
    const { customerId } = req.params;
    
    const stats = await postgresDatabase.getCustomerStats(customerId);
    
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    logger.error(`‚ùå Error getting customer stats: ${error}`);
    res.status(500).json({
      success: false,
      error: 'Chyba pri z√≠skavan√≠ ≈°tatist√≠k z√°kazn√≠ka'
    });
  }
});

export default router;
