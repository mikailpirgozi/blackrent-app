import { Request, Response, NextFunction } from 'express';
import { UserRole, Permission, PermissionCheck, PermissionResult, User } from '../types';

// Roz≈°√≠renie Request interface o user a permissions
declare global {
  namespace Express {
    interface Request {
      user?: Omit<User, 'password'>;
      permissionCheck?: PermissionResult;
    }
  }
}

// üîê ROLE PERMISSIONS MATRIX
export const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {
  // üëë ADMIN - √öpln√© pr√°va na v≈°etko
  admin: [
    {
      resource: '*',
      actions: ['read', 'create', 'update', 'delete'],
      conditions: {}
    }
  ],

  // üë• EMPLOYEE - Z√°kladn√© oper√°cie s vozidlami, pren√°jmami, z√°kazn√≠kmi
  employee: [
    {
      resource: 'vehicles',
      actions: ['read', 'create', 'update'],
      conditions: {}
    },
    {
      resource: 'rentals',
      actions: ['read', 'create', 'update'],
      conditions: {}
    },
    {
      resource: 'customers',
      actions: ['read', 'create', 'update'],
      conditions: {}
    },
    {
      resource: 'maintenance',
      actions: ['read', 'create'],
      conditions: {}
    },
    {
      resource: 'protocols',
      actions: ['read', 'create', 'update'],
      conditions: {}
    }
  ],

  // üîß TEMP WORKER - Obmedzen√© pr√°va, hlavne ƒç√≠tanie
  temp_worker: [
    {
      resource: 'vehicles',
      actions: ['read'],
      conditions: {}
    },
    {
      resource: 'rentals',
      actions: ['read', 'create'],
      conditions: {}
    },
    {
      resource: 'customers',
      actions: ['read', 'create'],
      conditions: {}
    },
    {
      resource: 'protocols',
      actions: ['read', 'create'],
      conditions: {}
    }
  ],

  // üî® MECHANIC - ≈†pecializovan√© pr√°va na √∫dr≈æbu
  mechanic: [
    {
      resource: 'vehicles',
      actions: ['read', 'update'],
      conditions: {
        ownOnly: true, // len priraden√© vozidl√°
        readOnlyFields: ['price', 'purchasePrice']
      }
    },
    {
      resource: 'maintenance',
      actions: ['read', 'create', 'update', 'delete'],
      conditions: {
        ownOnly: true
      }
    },
    {
      resource: 'protocols',
      actions: ['read', 'create', 'update'],
      conditions: {
        ownOnly: true
      }
    }
  ],

  // üíº SALES REP - Obchodn√© oper√°cie s limitmi
  sales_rep: [
    {
      resource: 'vehicles',
      actions: ['read'],
      conditions: {}
    },
    {
      resource: 'rentals',
      actions: ['read', 'create', 'update'],
      conditions: {}
    },
    {
      resource: 'customers',
      actions: ['read', 'create', 'update'],
      conditions: {}
    },
    {
      resource: 'pricing',
      actions: ['read', 'update'],
      conditions: {
        maxAmount: 5000, // max cena pren√°jmu
        approvalRequired: true
      }
    }
  ],

  // üè¢ COMPANY OWNER - Len vlastn√© vozidl√° a s√∫visiace d√°ta
  company_owner: [
    {
      resource: 'vehicles',
      actions: ['read'],
      conditions: {
        companyOnly: true // len vlastn√© vozidl√°
      }
    },
    {
      resource: 'rentals',
      actions: ['read'],
      conditions: {
        companyOnly: true
      }
    },
    {
      resource: 'expenses',
      actions: ['read'],
      conditions: {
        companyOnly: true // len n√°klady pre vlastn√© vozidl√°
      }
    },
    {
      resource: 'insurances',
      actions: ['read'],
      conditions: {
        companyOnly: true // len poistky pre vlastn√© vozidl√°
      }
    },
    {
      resource: 'finances',
      actions: ['read'],
      conditions: {
        companyOnly: true,
        readOnlyFields: ['totalRevenue', 'commission']
      }
    },
    {
      resource: 'protocols',
      actions: ['read'],
      conditions: {
        companyOnly: true
      }
    }
  ]
};

// üõ°Ô∏è PERMISSION CHECK FUNCTION
export function hasPermission(
  userRole: UserRole, 
  resource: Permission['resource'], 
  action: Permission['actions'][0],
  context?: {
    userId?: string;
    companyId?: string;
    resourceOwnerId?: string;
    resourceCompanyId?: string;
    amount?: number;
  }
): PermissionResult {
  const rolePermissions = ROLE_PERMISSIONS[userRole];
  
  // Admin m√° v≈ædy pr√°va
  if (userRole === 'admin') {
    return { hasAccess: true, requiresApproval: false };
  }

  // N√°jdi relevantn√© permission pre resource
  const permission = rolePermissions.find(p => 
    p.resource === resource || p.resource === '*'
  );

  if (!permission) {
    return { hasAccess: false, requiresApproval: false, reason: '≈Ωiadne opr√°vnenie pre tento resource' };
  }

  // Skontroluj action
  if (!permission.actions.includes(action)) {
    return { hasAccess: false, requiresApproval: false, reason: `Akcia '${action}' nie je povolen√°` };
  }

  // Skontroluj podmienky
  const conditions = permission.conditions;
  if (conditions && context) {
    // Kontrola "ownOnly"
    if (conditions.ownOnly && context.resourceOwnerId !== context.userId) {
      return { hasAccess: false, requiresApproval: false, reason: 'Pr√≠stup len k vlastn√Ωm z√°znamom' };
    }

    // Kontrola "companyOnly"
    if (conditions.companyOnly && context.resourceCompanyId !== context.companyId) {
      return { hasAccess: false, requiresApproval: false, reason: 'Pr√≠stup len k z√°znamom vlastnej firmy' };
    }

    // Kontrola max amount
    if (conditions.maxAmount && context.amount && context.amount > conditions.maxAmount) {
      if (conditions.approvalRequired) {
        return { 
          hasAccess: true, 
          requiresApproval: true, 
          reason: `Suma ${context.amount}‚Ç¨ presahuje limit ${conditions.maxAmount}‚Ç¨` 
        };
      } else {
        return { hasAccess: false, requiresApproval: false, reason: `Maxim√°lna povolen√° suma je ${conditions.maxAmount}‚Ç¨` };
      }
    }
  }

  return { 
    hasAccess: true, 
    requiresApproval: conditions?.approvalRequired || false 
  };
}

// üöÄ EXPRESS MIDDLEWARE
export function checkPermission(
  resource: Permission['resource'], 
  action: Permission['actions'][0],
  options?: {
    getContext?: (req: Request) => Promise<any>;
    onApprovalRequired?: (req: Request, res: Response) => void;
  }
) {
  return async (req: Request, res: Response, next: NextFunction) => {
    try {
      if (!req.user) {
        return res.status(401).json({
          success: false,
          error: 'Pou≈æ√≠vateƒæ nie je prihl√°sen√Ω'
        });
      }

      // Z√≠skaj kontext ak je definovan√Ω
      let context = {};
      if (options?.getContext) {
        context = await options.getContext(req);
      }

      // Skontroluj opr√°vnenie
      const permissionCheck = hasPermission(
        req.user.role,
        resource,
        action,
        {
          userId: req.user.id,
          companyId: req.user.companyId,
          ...context
        }
      );

      // Ulo≈æ v√Ωsledok do request
      req.permissionCheck = permissionCheck;

      if (!permissionCheck.hasAccess) {
        return res.status(403).json({
          success: false,
          error: permissionCheck.reason || 'Nem√°te opr√°vnenie pre t√∫to akciu'
        });
      }

      if (permissionCheck.requiresApproval) {
        if (options?.onApprovalRequired) {
          return options.onApprovalRequired(req, res);
        } else {
          return res.status(202).json({
            success: true,
            requiresApproval: true,
            message: permissionCheck.reason || 'Akcia vy≈æaduje schv√°lenie'
          });
        }
      }

      next();
    } catch (error) {
      console.error('‚ùå Permission check error:', error);
      res.status(500).json({
        success: false,
        error: 'Chyba pri kontrole opr√°vnen√≠'
      });
    }
  };
}

// üéØ UTILITY FUNCTIONS
export function getUserPermissions(userRole: UserRole): Permission[] {
  return ROLE_PERMISSIONS[userRole] || [];
}

export function canUserAccess(
  userRole: UserRole, 
  resource: Permission['resource'], 
  action: Permission['actions'][0]
): boolean {
  return hasPermission(userRole, resource, action).hasAccess;
} 