generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blacklist {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String    @unique @db.VarChar(255)
  reason     String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String?   @db.Uuid
  is_active  Boolean?  @default(true)
  users      users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  id                          Int                           @id @default(autoincrement())
  name                        String                        @db.VarChar(100)
  address                     String?
  phone                       String?                       @db.VarChar(20)
  email                       String?                       @db.VarChar(100)
  ic                          String?                       @db.VarChar(20)
  dic                         String?                       @db.VarChar(20)
  created_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  business_id                 String?                       @db.VarChar(50)
  tax_id                      String?                       @db.VarChar(50)
  contact_person              String?                       @db.VarChar(255)
  contract_start_date         DateTime?                     @db.Date
  contract_end_date           DateTime?                     @db.Date
  commission_rate             Decimal?                      @default(20.00) @db.Decimal(5, 2)
  is_active                   Boolean?                      @default(true)
  updated_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  platform_id                 String?                       @db.Uuid
  personal_iban               String?                       @db.VarChar(34)
  business_iban               String?                       @db.VarChar(34)
  owner_name                  String?                       @db.VarChar(255)
  contact_email               String?                       @db.VarChar(255)
  contact_phone               String?                       @db.VarChar(50)
  default_commission_rate     Decimal?                      @default(20.00) @db.Decimal(5, 2)
  protocol_display_name       String?                       @db.VarChar(255)
  platforms                   platforms?                    @relation(fields: [platform_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  company_documents           company_documents[]
  company_investor_shares_old company_investor_shares_old[]
  company_investors_old       company_investors_old[]
  vehicles                    vehicles[]

  @@index([platform_id], map: "idx_companies_platform")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model company_documents {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id        Int
  document_type     String    @db.VarChar(20)
  document_month    Int?
  document_year     Int?
  document_name     String    @db.VarChar(255)
  description       String?
  file_path         String
  file_size         BigInt?
  file_type         String?   @db.VarChar(100)
  original_filename String?   @db.VarChar(255)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  created_by        String?   @db.Uuid
  companies         companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([company_id], map: "idx_company_documents_company_id")
  @@index([document_year, document_month], map: "idx_company_documents_date")
  @@index([document_type], map: "idx_company_documents_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model company_investor_shares {
  id                      String            @id(map: "company_investor_shares_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id              Int
  investor_id             String            @db.Uuid
  ownership_percentage    Decimal           @db.Decimal(5, 2)
  investment_amount       Decimal?          @db.Decimal(12, 2)
  investment_date         DateTime?         @default(now()) @db.Timestamp(6)
  is_primary_contact      Boolean?          @default(false)
  profit_share_percentage Decimal?          @db.Decimal(5, 2)
  notes                   String?
  created_at              DateTime?         @default(now()) @db.Timestamp(6)
  updated_at              DateTime?         @default(now()) @db.Timestamp(6)
  company_investors       company_investors @relation(fields: [investor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_investor_shares_investor_id_fkey1")

  @@unique([company_id, investor_id])
  @@index([company_id], map: "idx_investor_shares_company")
  @@index([investor_id], map: "idx_investor_shares_investor")
  @@index([is_primary_contact], map: "idx_investor_shares_primary")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model company_investor_shares_old {
  id                     String                @id(map: "company_investor_shares_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id             Int
  investor_id            String                @db.Uuid
  share_percentage       Decimal               @db.Decimal(5, 2)
  share_amount           Decimal               @db.Decimal(12, 2)
  valid_from             DateTime              @db.Date
  valid_to               DateTime?             @db.Date
  last_settlement_date   DateTime?             @db.Date
  total_settlements_paid Decimal?              @default(0) @db.Decimal(12, 2)
  created_at             DateTime?             @default(now()) @db.Timestamp(6)
  updated_at             DateTime?             @default(now()) @db.Timestamp(6)
  companies              companies             @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_investor_shares_company_id_fkey")
  company_investors_old  company_investors_old @relation(fields: [investor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_investor_shares_investor_id_fkey")

  @@unique([company_id, investor_id, valid_from], map: "company_investor_shares_company_id_investor_id_valid_from_key")
}

model company_investors {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name              String                    @db.VarChar(100)
  last_name               String                    @db.VarChar(100)
  email                   String?                   @db.VarChar(100)
  phone                   String?                   @db.VarChar(50)
  personal_id             String?                   @db.VarChar(50)
  address                 String?
  is_active               Boolean?                  @default(true)
  notes                   String?
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  company_investor_shares company_investor_shares[]

  @@index([is_active], map: "idx_company_investors_active")
  @@index([email], map: "idx_company_investors_email")
  @@index([last_name, first_name], map: "idx_company_investors_name")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_investors_old {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id                  Int
  investor_name               String                        @db.VarChar(255)
  investor_email              String?                       @db.VarChar(255)
  investor_phone              String?                       @db.VarChar(50)
  investor_type               String?                       @default("individual") @db.VarChar(50)
  investment_amount           Decimal                       @db.Decimal(12, 2)
  investment_date             DateTime                      @db.Date
  investment_currency         String?                       @default("EUR") @db.VarChar(10)
  contract_number             String?                       @db.VarChar(100)
  contract_date               DateTime?                     @db.Date
  legal_entity_id             String?                       @db.VarChar(50)
  status                      String?                       @default("active") @db.VarChar(30)
  notes                       String?
  created_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  created_by                  String?                       @db.Uuid
  company_investor_shares_old company_investor_shares_old[]
  companies                   companies                     @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_investors_company_id_fkey")

  @@index([company_id], map: "idx_company_investors_old_company")
  @@index([investment_date], map: "idx_company_investors_old_date")
  @@index([status], map: "idx_company_investors_old_status")
}

model customers {
  id             Int             @id @default(autoincrement())
  first_name     String          @db.VarChar(50)
  last_name      String          @db.VarChar(50)
  email          String?         @db.VarChar(100)
  phone          String?         @db.VarChar(30)
  address        String?
  birth_date     DateTime?       @db.Date
  id_number      String?         @db.VarChar(20)
  driver_license String?         @db.VarChar(50)
  created_at     DateTime?       @default(now()) @db.Timestamp(6)
  name           String?         @default("Unknown") @db.VarChar(100)
  updated_at     DateTime?       @default(now()) @db.Timestamp(6)
  pdf_protocols  pdf_protocols[]
  rentals        rentals[]
}

model departments {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id      String?        @db.Uuid
  name                 String         @db.VarChar(255)
  description          String?
  parent_department_id String?        @db.Uuid
  manager_id           String?        @db.Uuid
  monthly_budget       Decimal?       @db.Decimal(12, 2)
  vehicle_limit        Int?
  settings             Json?          @default("{}")
  created_at           DateTime?      @default(now()) @db.Timestamp(6)
  updated_at           DateTime?      @default(now()) @db.Timestamp(6)
  organizations        organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  departments          departments?   @relation("departmentsTodepartments", fields: [parent_department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_departments    departments[]  @relation("departmentsTodepartments")
  teams                teams[]

  @@unique([organization_id, name])
  @@index([manager_id], map: "idx_departments_manager")
  @@index([organization_id], map: "idx_departments_org")
  @@index([parent_department_id], map: "idx_departments_parent")
}

model email_action_logs {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email_type               String                     @db.VarChar(50)
  recipient_email          String                     @db.VarChar(255)
  sender_email             String?                    @db.VarChar(255)
  subject                  String?                    @db.VarChar(500)
  rental_id                String?                    @db.Uuid
  protocol_id              String?                    @db.Uuid
  user_id                  String?                    @db.Uuid
  company_id               Int?
  action                   String                     @db.VarChar(50)
  status                   String?                    @default("pending") @db.VarChar(30)
  message_id               String?                    @db.VarChar(255)
  error_message            String?
  retry_count              Int?                       @default(0)
  scheduled_at             DateTime?                  @db.Timestamp(6)
  sent_at                  DateTime?                  @db.Timestamp(6)
  delivered_at             DateTime?                  @db.Timestamp(6)
  opened_at                DateTime?                  @db.Timestamp(6)
  clicked_at               DateTime?                  @db.Timestamp(6)
  created_at               DateTime?                  @default(now()) @db.Timestamp(6)
  metadata                 Json?                      @default("{}")
  email_processing_history email_processing_history[]

  @@index([created_at], map: "idx_email_logs_created")
  @@index([recipient_email], map: "idx_email_logs_recipient")
  @@index([rental_id], map: "idx_email_logs_rental")
  @@index([status], map: "idx_email_logs_status")
  @@index([email_type], map: "idx_email_logs_type")
}

model email_blacklist {
  id           Int       @id @default(autoincrement())
  order_number String    @unique @db.VarChar(500)
  reason       String?   @default("rejected") @db.VarChar(500)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  created_by   String?   @db.VarChar(255)
  notes        String?

  @@index([order_number], map: "idx_email_blacklist_order_number")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model email_processing_history {
  id                      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email_log_id            String?            @db.Uuid
  step                    String             @db.VarChar(100)
  status                  String             @db.VarChar(30)
  started_at              DateTime?          @default(now()) @db.Timestamp(6)
  completed_at            DateTime?          @db.Timestamp(6)
  duration_ms             Int?
  input_data              Json?
  output_data             Json?
  error_details           String?
  server_instance         String?            @db.VarChar(100)
  process_id              String?            @db.VarChar(50)
  archived_at             DateTime?          @db.Timestamp(6)
  auto_archive_after_days Int?               @default(30)
  email_id                String?            @unique(map: "email_processing_history_email_id_unique")
  message_id              String?
  subject                 String?
  sender                  String?
  recipient               String?            @default("info@blackrent.sk")
  email_content           String?
  email_html              String?
  received_at             DateTime?          @db.Timestamp(6)
  processed_at            DateTime?          @db.Timestamp(6)
  action_taken            String?
  processed_by            String?            @db.Uuid
  parsed_data             Json?
  confidence_score        Decimal?           @default(0.0) @db.Decimal(3, 2)
  error_message           String?
  notes                   String?
  tags                    String[]
  rental_id               Int?
  is_blacklisted          Boolean?           @default(false)
  created_at              DateTime?          @default(now()) @db.Timestamp(6)
  updated_at              DateTime?          @default(now()) @db.Timestamp(6)
  email_action_logs       email_action_logs? @relation(fields: [email_log_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([archived_at], map: "idx_email_history_archived_at")
  @@index([email_id], map: "idx_email_history_email_id")
  @@index([processed_by], map: "idx_email_history_processed_by")
  @@index([received_at(sort: Desc)], map: "idx_email_history_received_at")
  @@index([rental_id], map: "idx_email_history_rental_id")
  @@index([sender], map: "idx_email_history_sender")
  @@index([status], map: "idx_email_history_status")
  @@index([email_id], map: "idx_email_processing_history_email_id")
  @@index([rental_id], map: "idx_email_processing_history_rental_id")
  @@index([email_log_id], map: "idx_email_processing_log_id")
  @@index([status], map: "idx_email_processing_status")
  @@index([step], map: "idx_email_processing_step")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model expense_audit {
  id         Int       @id @default(autoincrement())
  expense_id Int
  action     String    @db.VarChar(20)
  user_id    Int?
  username   String?   @db.VarChar(255)
  changes    Json?
  ip_address String?   @db.VarChar(45)
  user_agent String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  expenses   expenses  @relation(fields: [expense_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_audit_expense")

  @@index([action], map: "idx_expense_audit_action")
  @@index([changes], map: "idx_expense_audit_changes", type: Gin)
  @@index([created_at(sort: Desc)], map: "idx_expense_audit_created_at")
  @@index([expense_id], map: "idx_expense_audit_expense_id")
  @@index([user_id], map: "idx_expense_audit_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model expense_categories {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String     @unique @db.VarChar(100)
  display_name String     @db.VarChar(255)
  description  String?
  icon         String     @default("receipt") @db.VarChar(50)
  color        String     @default("primary") @db.VarChar(20)
  is_default   Boolean    @default(false)
  is_active    Boolean    @default(true)
  sort_order   Int        @default(0)
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  created_by   String?    @db.Uuid
  expenses     expenses[]

  @@index([is_active], map: "idx_expense_categories_active")
  @@index([name], map: "idx_expense_categories_name")
  @@index([sort_order], map: "idx_expense_categories_sort")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model expenses {
  id                 Int                 @id @default(autoincrement())
  rental_id          Int?
  vehicle_id         Int?
  category           String?             @db.VarChar(50)
  description        String?
  amount             Decimal?            @db.Decimal(10, 2)
  date               DateTime?           @db.Date
  created_at         DateTime?           @default(now()) @db.Timestamp(6)
  company            String?             @db.VarChar(100)
  note               String?
  company_id         String?             @db.Uuid
  category_id        String?             @db.Uuid
  receipt_url        String?
  updated_at         DateTime?           @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?           @db.Timestamp(6)
  deleted_by         String?             @db.VarChar(255)
  expense_audit      expense_audit[]
  rentals            rentals?            @relation(fields: [rental_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  expense_categories expense_categories? @relation(fields: [category], references: [name], onDelete: Restrict, map: "fk_expenses_category")
  vehicles           vehicles?           @relation(fields: [vehicle_id], references: [id], map: "fk_expenses_vehicle")

  @@index([category], map: "idx_expenses_category")
  @@index([company], map: "idx_expenses_company")
  @@index([company, category, date(sort: Desc)], map: "idx_expenses_company_category_date")
  @@index([company, date(sort: Desc)], map: "idx_expenses_company_date")
  @@index([date(sort: Desc)], map: "idx_expenses_date_desc")
  @@index([vehicle_id], map: "idx_expenses_vehicle_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model feature_flags {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_name     String    @unique @db.VarChar(100)
  enabled       Boolean   @default(false)
  percentage    Int?      @default(0)
  allowed_users String[]
  start_date    DateTime? @db.Timestamp(6)
  end_date      DateTime? @db.Timestamp(6)
  description   String?
  metadata      Json?     @default("{}")
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
}

model handover_protocols {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rental_id            Int
  type                 String?   @default("handover") @db.VarChar(20)
  status               String?   @default("completed") @db.VarChar(20)
  location             String?   @db.VarChar(255)
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  completed_at         DateTime? @db.Timestamp(6)
  odometer             Int?      @default(0)
  fuel_level           Int?      @default(100)
  fuel_type            String?   @default("Benzín") @db.VarChar(50)
  exterior_condition   String?   @default("Dobrý") @db.VarChar(100)
  interior_condition   String?   @default("Dobrý") @db.VarChar(100)
  condition_notes      String?
  vehicle_images_urls  Json?     @default("[]")
  vehicle_videos_urls  Json?     @default("[]")
  document_images_urls Json?     @default("[]")
  damage_images_urls   Json?     @default("[]")
  damages              Json?     @default("[]")
  signatures           Json?     @default("[]")
  rental_data          Json?
  pdf_url              String?   @db.VarChar(500)
  email_sent           Boolean?  @default(false)
  notes                String?
  created_by           String?   @db.VarChar(100)
}

model insurance_claims {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vehicle_id           String    @db.Uuid
  insurance_id         String?   @db.Uuid
  incident_date        DateTime  @db.Timestamp(6)
  reported_date        DateTime? @default(now()) @db.Timestamp(6)
  claim_number         String?   @db.VarChar(100)
  description          String
  location             String?   @db.VarChar(255)
  incident_type        String    @default("other") @db.VarChar(50)
  estimated_damage     Decimal?  @db.Decimal(10, 2)
  deductible           Decimal?  @db.Decimal(10, 2)
  payout_amount        Decimal?  @db.Decimal(10, 2)
  status               String    @default("reported") @db.VarChar(50)
  file_paths           String[]
  police_report_number String?   @db.VarChar(100)
  other_party_info     String?
  notes                String?
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @db.Timestamp(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model insurances {
  id                    Int       @id @default(autoincrement())
  rental_id             Int?
  insurer_id            Int?
  policy_number         String?   @db.VarChar(100)
  type                  String?   @db.VarChar(50)
  coverage_amount       Decimal?  @db.Decimal(10, 2)
  premium               Decimal?  @db.Decimal(10, 2)
  start_date            DateTime? @db.Date
  end_date              DateTime? @db.Date
  created_at            DateTime? @default(now()) @db.Timestamp(6)
  payment_frequency     String    @default("yearly") @db.VarChar(20)
  file_path             String?
  file_paths            String[]
  provider              String?   @db.VarChar(255)
  coverage_type         String?   @db.VarChar(100)
  updated_at            DateTime? @default(now()) @db.Timestamp(6)
  km_state              Int?
  vehicle_id            Int?
  deductible_amount     Decimal?  @db.Decimal(10, 2)
  deductible_percentage Decimal?  @db.Decimal(5, 2)
  insurers              insurers? @relation(fields: [insurer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rentals               rentals?  @relation(fields: [rental_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model insurers {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  address    String?
  phone      String?      @db.VarChar(20)
  email      String?      @db.VarChar(100)
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  insurances insurances[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model leasing_documents {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leasing_id  String   @db.Uuid
  type        String   @db.VarChar(50)
  file_name   String   @db.VarChar(500)
  file_url    String
  file_size   BigInt
  mime_type   String   @db.VarChar(100)
  uploaded_at DateTime @default(now()) @db.Timestamp(6)
  leasings    leasings @relation(fields: [leasing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([leasing_id], map: "idx_leasing_documents_leasing_id")
  @@index([leasing_id, type], map: "idx_leasing_documents_leasing_type")
  @@index([type], map: "idx_leasing_documents_type")
  @@index([uploaded_at], map: "idx_leasing_documents_uploaded_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model leasings {
  id                            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vehicle_id                    String              @db.VarChar(50)
  leasing_company               String              @db.VarChar(255)
  loan_category                 String              @db.VarChar(50)
  payment_type                  String              @default("anuita") @db.VarChar(20)
  initial_loan_amount           Decimal             @db.Decimal(10, 2)
  current_balance               Decimal             @db.Decimal(10, 2)
  interest_rate                 Decimal?            @db.Decimal(5, 3)
  rpmn                          Decimal?            @db.Decimal(5, 3)
  monthly_payment               Decimal?            @db.Decimal(10, 2)
  monthly_fee                   Decimal             @default(0) @db.Decimal(10, 2)
  processing_fee                Decimal             @default(0) @db.Decimal(10, 2)
  total_monthly_payment         Decimal?            @db.Decimal(10, 2)
  total_installments            Int
  remaining_installments        Int
  paid_installments             Int                 @default(0)
  first_payment_date            DateTime            @db.Date
  last_payment_date             DateTime?           @db.Date
  last_paid_date                DateTime?           @db.Date
  early_repayment_penalty       Decimal             @default(0) @db.Decimal(5, 2)
  early_repayment_penalty_type  String              @default("percent_principal") @db.VarChar(20)
  acquisition_price_without_vat Decimal?            @db.Decimal(10, 2)
  acquisition_price_with_vat    Decimal?            @db.Decimal(10, 2)
  is_non_deductible             Boolean             @default(false)
  contract_document_url         String?
  payment_schedule_url          String?
  photos_zip_url                String?
  created_at                    DateTime            @default(now()) @db.Timestamp(6)
  updated_at                    DateTime            @default(now()) @db.Timestamp(6)
  platform_id                   String?             @db.Uuid
  leasing_documents             leasing_documents[]
  platforms                     platforms?          @relation(fields: [platform_id], references: [id], onUpdate: NoAction)
  payment_schedule              payment_schedule[]

  @@index([leasing_company], map: "idx_leasings_company")
  @@index([created_at], map: "idx_leasings_created_at")
  @@index([first_payment_date], map: "idx_leasings_first_payment_date")
  @@index([platform_id], map: "idx_leasings_platform")
  @@index([remaining_installments], map: "idx_leasings_status")
  @@index([vehicle_id], map: "idx_leasings_vehicle_id")
}

model migration_history {
  id             Int       @id @default(autoincrement())
  migration_name String    @unique @db.VarChar(255)
  executed_at    DateTime? @default(now()) @db.Timestamp(6)
  success        Boolean?  @default(true)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model organizations {
  id                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String        @db.VarChar(255)
  slug                    String        @unique @db.VarChar(100)
  domain                  String?       @db.VarChar(255)
  business_id             String?       @db.VarChar(50)
  tax_id                  String?       @db.VarChar(50)
  address                 String?
  phone                   String?       @db.VarChar(50)
  email                   String?       @db.VarChar(255)
  website                 String?       @db.VarChar(255)
  logo_url                String?
  subscription_plan       String?       @default("basic") @db.VarChar(50)
  subscription_status     String?       @default("active") @db.VarChar(30)
  subscription_expires_at DateTime?     @db.Timestamp(6)
  max_users               Int?          @default(10)
  max_vehicles            Int?          @default(50)
  settings                Json?         @default("{}")
  branding                Json?         @default("{}")
  created_at              DateTime?     @default(now()) @db.Timestamp(6)
  updated_at              DateTime?     @default(now()) @db.Timestamp(6)
  created_by              String?       @db.Uuid
  departments             departments[]
  roles                   roles[]
  teams                   teams[]

  @@index([slug], map: "idx_organizations_slug")
  @@index([subscription_status], map: "idx_organizations_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payment_schedule {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leasing_id         String    @db.Uuid
  installment_number Int
  due_date           DateTime  @db.Date
  principal          Decimal   @db.Decimal(10, 2)
  interest           Decimal   @db.Decimal(10, 2)
  monthly_fee        Decimal   @default(0) @db.Decimal(10, 2)
  total_payment      Decimal   @db.Decimal(10, 2)
  remaining_balance  Decimal   @db.Decimal(10, 2)
  is_paid            Boolean   @default(false)
  paid_date          DateTime? @db.Date
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  leasings           leasings  @relation(fields: [leasing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([leasing_id, installment_number], map: "unique_leasing_installment")
  @@index([due_date], map: "idx_payment_schedule_due_date")
  @@index([is_paid], map: "idx_payment_schedule_is_paid")
  @@index([is_paid, due_date], map: "idx_payment_schedule_is_paid_due_date")
  @@index([leasing_id], map: "idx_payment_schedule_leasing_id")
  @@index([leasing_id, installment_number], map: "idx_payment_schedule_leasing_installment")
}

model pdf_protocols {
  id          Int        @id @default(autoincrement())
  protocol_id String     @unique @db.VarChar(100)
  rental_id   Int?
  customer_id Int?
  vehicle_id  Int?
  type        String     @db.VarChar(20)
  pdf_data    String
  metadata    Json?
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  customers   customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rentals     rentals?   @relation(fields: [rental_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicles    vehicles?  @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([rental_id], map: "idx_pdf_protocols_rental")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model photo_derivatives {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  photo_id        String    @db.Uuid
  derivative_type String    @db.VarChar(20)
  url             String
  file_size       Int       @default(0)
  width           Int?
  height          Int?
  format          String    @default("jpeg") @db.VarChar(10)
  quality         Int?      @default(80)
  created_at      DateTime? @default(now()) @db.Timestamp(6)

  @@unique([photo_id, derivative_type], map: "idx_photo_derivatives_unique")
  @@index([photo_id], map: "idx_photo_derivatives_photo_id")
}

model photo_metadata_v2 {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  photo_id           String    @unique @db.Uuid
  hash_sha256        String?   @db.VarChar(64)
  original_size      Int       @default(0)
  processing_time    Int?
  savings_percentage Decimal?  @db.Decimal(5, 2)
  device_info        Json?     @default("{}")
  exif_data          Json?     @default("{}")
  processing_config  Json?     @default("{}")
  version            Int?      @default(2)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)
}

model platforms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String      @unique @db.VarChar(100)
  display_name String?     @db.VarChar(255)
  subdomain    String?     @unique @db.VarChar(50)
  logo_url     String?
  settings     Json?       @default("{}")
  is_active    Boolean?    @default(true)
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  updated_at   DateTime?   @default(now()) @db.Timestamp(6)
  companies    companies[]
  leasings     leasings[]
  users        users[]
  vehicles     vehicles[]
}

model protocol_photos {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  protocol_id String?   @db.Uuid
  photo_url   String
  category    String?   @db.VarChar(50)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)

  @@index([protocol_id], map: "idx_protocol_photos_protocol_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model protocol_processing_jobs {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  protocol_id   String    @db.Uuid
  job_type      String    @db.VarChar(50)
  job_id        String?   @db.VarChar(100)
  status        String    @default("pending") @db.VarChar(20)
  progress      Int?      @default(0)
  started_at    DateTime? @db.Timestamp(6)
  completed_at  DateTime? @db.Timestamp(6)
  error_message String?
  metadata      Json?     @default("{}")
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)

  @@index([protocol_id], map: "idx_protocol_jobs_protocol_id")
  @@index([status], map: "idx_protocol_jobs_status")
}

model protocol_signatures {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  protocol_id    String?   @db.Uuid
  signature_type String    @db.VarChar(50)
  signature_data String
  signer_name    String?   @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamp(6)

  @@index([protocol_id], map: "idx_protocol_signatures_protocol_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model protocol_versions {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  protocol_id      String    @unique @db.Uuid
  version          Int       @default(1)
  migrated_at      DateTime? @db.Timestamp(6)
  migration_reason String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model protocols {
  id           Int       @id @default(autoincrement())
  rental_id    Int?
  type         String    @db.VarChar(20)
  status       String    @default("draft") @db.VarChar(20)
  location     String?   @db.VarChar(255)
  odometer     Int?
  fuel_level   Int?
  notes        String?
  media_urls   String[]
  damages      Json?
  created_by   Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  completed_at DateTime? @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  data         Json?

  @@index([created_by], map: "idx_protocols_created_by")
  @@index([rental_id], map: "idx_protocols_rental_id")
  @@index([status], map: "idx_protocols_status")
  @@index([type], map: "idx_protocols_type")
}

model recurring_expense_generations {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recurring_expense_id String             @db.Uuid
  generated_expense_id Int
  generation_date      DateTime           @db.Date
  generated_at         DateTime?          @default(now()) @db.Timestamp(6)
  generated_by         String?            @default("system") @db.VarChar(50)
  recurring_expenses   recurring_expenses @relation(fields: [recurring_expense_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([recurring_expense_id, generation_date])
  @@index([generation_date], map: "idx_recurring_generations_date")
  @@index([recurring_expense_id], map: "idx_recurring_generations_recurring_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model recurring_expenses {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String                          @db.VarChar(255)
  description                   String
  amount                        Decimal                         @db.Decimal(10, 2)
  category                      String                          @db.VarChar(100)
  company                       String                          @db.VarChar(100)
  vehicle_id                    String?                         @db.VarChar(50)
  note                          String?
  frequency                     String?                         @default("monthly") @db.VarChar(20)
  start_date                    DateTime                        @db.Date
  end_date                      DateTime?                       @db.Date
  day_of_month                  Int?                            @default(1)
  is_active                     Boolean?                        @default(true)
  last_generated_date           DateTime?                       @db.Date
  next_generation_date          DateTime?                       @db.Date
  total_generated               Int?                            @default(0)
  created_at                    DateTime?                       @default(now()) @db.Timestamp(6)
  updated_at                    DateTime?                       @default(now()) @db.Timestamp(6)
  created_by                    String?                         @db.Uuid
  deleted_at                    DateTime?                       @db.Timestamp(6)
  deleted_by                    String?                         @db.VarChar(255)
  recurring_expense_generations recurring_expense_generations[]

  @@index([is_active], map: "idx_recurring_expenses_active")
  @@index([category], map: "idx_recurring_expenses_category")
  @@index([company], map: "idx_recurring_expenses_company")
  @@index([is_active], map: "idx_recurring_expenses_is_active")
  @@index([vehicle_id], map: "idx_recurring_expenses_vehicle")
  @@index([vehicle_id], map: "idx_recurring_expenses_vehicle_id")
}

model rental_backups {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  original_rental_id String    @db.Uuid
  backup_data        Json
  backup_timestamp   DateTime? @default(now()) @db.Timestamp(6)
  backup_reason      String?   @default("pre_update") @db.VarChar(100)
}

model rentals {
  id                     Int             @id @default(autoincrement())
  customer_id            Int?
  vehicle_id             Int?
  start_date             DateTime        @db.Timestamp(6)
  end_date               DateTime        @db.Timestamp(6)
  total_price            Decimal?        @db.Decimal(10, 2)
  deposit                Decimal?        @db.Decimal(10, 2)
  currency               String?         @default("EUR") @db.VarChar(10)
  allowed_kilometers     Int?            @default(0)
  extra_kilometer_rate   Decimal?        @default(0) @db.Decimal(10, 2)
  customer_name          String?         @db.VarChar(500)
  order_number           String?         @db.VarChar(500)
  handover_place         String?         @db.VarChar(500)
  payment_method         String?         @db.VarChar(500)
  discount_percent       Decimal?        @db.Decimal(5, 2)
  discount_amount        Decimal?        @db.Decimal(10, 2)
  commission_percent     Decimal?        @db.Decimal(5, 2)
  commission_amount      Decimal?        @db.Decimal(10, 2)
  paid                   Boolean?        @default(false)
  status                 String?         @default("active") @db.VarChar(30)
  notes                  String?
  created_at             DateTime?       @default(now()) @db.Timestamp(6)
  commission             Decimal?        @default(0) @db.Decimal(10, 2)
  discount               String?
  custom_commission      String?
  extra_km_charge        Decimal?        @db.Decimal(10, 2)
  payments               Json?
  history                Json?
  confirmed              Boolean?        @default(false)
  daily_kilometers       Int?
  return_conditions      String?
  fuel_level             Int?
  odometer               Int?
  return_fuel_level      Int?
  return_odometer        Int?
  actual_kilometers      Int?
  fuel_refill_cost       Decimal?        @db.Decimal(10, 2)
  handover_protocol_id   String?         @db.Uuid
  return_protocol_id     String?         @db.Uuid
  company                String?         @db.VarChar(255)
  rental_type            String?         @default("standard") @db.VarChar(20)
  is_flexible            Boolean?        @default(false)
  flexible_end_date      DateTime?       @db.Date
  can_be_overridden      Boolean?        @default(false)
  override_priority      Int?            @default(5)
  notification_threshold Int?            @default(3)
  auto_extend            Boolean?        @default(false)
  override_history       Json?           @default("[]")
  customer_email         String?         @db.VarChar(255)
  customer_phone         String?         @db.VarChar(500)
  vehicle_name           String?         @db.VarChar(500)
  vehicle_code           String?         @db.VarChar(500)
  approval_status        String?         @default("pending") @db.VarChar(30)
  auto_processed_at      DateTime?       @db.Timestamp(6)
  email_content          String?
  updated_at             DateTime?       @default(now()) @db.Timestamp(6)
  expenses               expenses[]
  insurances             insurances[]
  pdf_protocols          pdf_protocols[]
  customers              customers?      @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicles               vehicles?       @relation(fields: [vehicle_id], references: [id], onUpdate: NoAction)

  @@index([approval_status], map: "idx_rentals_approval_status")
  @@index([auto_processed_at(sort: Desc)], map: "idx_rentals_auto_processed_at")
  @@index([created_at(sort: Desc)], map: "idx_rentals_created_at_desc")
  @@index([customer_email], map: "idx_rentals_customer_email")
  @@index([order_number], map: "idx_rentals_order_number")
  @@index([vehicle_id], map: "idx_rentals_vehicle_id")
}

model return_protocols {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rental_id            Int
  handover_protocol_id String?   @db.Uuid
  type                 String?   @default("return") @db.VarChar(20)
  status               String?   @default("draft") @db.VarChar(20)
  location             String?   @db.VarChar(255)
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  completed_at         DateTime? @db.Timestamp(6)
  odometer             Int?      @default(0)
  fuel_level           Int?      @default(100)
  fuel_type            String?   @default("Benzín") @db.VarChar(50)
  exterior_condition   String?   @default("Dobrý") @db.VarChar(100)
  interior_condition   String?   @default("Dobrý") @db.VarChar(100)
  condition_notes      String?
  vehicle_images_urls  Json?     @default("[]")
  vehicle_videos_urls  Json?     @default("[]")
  document_images_urls Json?     @default("[]")
  damage_images_urls   Json?     @default("[]")
  damages              Json?     @default("[]")
  new_damages          Json?     @default("[]")
  signatures           Json?     @default("[]")
  kilometers_used      Int?      @default(0)
  kilometer_overage    Int?      @default(0)
  kilometer_fee        Decimal?  @default(0) @db.Decimal(10, 2)
  fuel_used            Int?      @default(0)
  fuel_fee             Decimal?  @default(0) @db.Decimal(10, 2)
  total_extra_fees     Decimal?  @default(0) @db.Decimal(10, 2)
  deposit_refund       Decimal?  @default(0) @db.Decimal(10, 2)
  additional_charges   Decimal?  @default(0) @db.Decimal(10, 2)
  final_refund         Decimal?  @default(0) @db.Decimal(10, 2)
  rental_data          Json?
  pdf_url              String?   @db.VarChar(500)
  email_sent           Boolean?  @default(false)
  email_sent_at        DateTime? @db.Timestamp(6)
  notes                String?
  created_by           String?   @db.VarChar(100)
}

model roles {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String?        @db.Uuid
  name            String         @db.VarChar(100)
  display_name    String         @db.VarChar(255)
  description     String?
  level           Int?           @default(1)
  parent_role_id  String?        @db.Uuid
  permissions     Json           @default("{}")
  is_system       Boolean?       @default(false)
  is_active       Boolean?       @default(true)
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  created_by      String?        @db.Uuid
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles           roles?         @relation("rolesToroles", fields: [parent_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_roles     roles[]        @relation("rolesToroles")

  @@unique([organization_id, name])
  @@index([is_active], map: "idx_roles_active")
  @@index([organization_id], map: "idx_roles_org")
  @@index([is_system], map: "idx_roles_system")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model settlements {
  id               Int       @id @default(autoincrement())
  period_from      DateTime  @db.Date
  period_to        DateTime  @db.Date
  vehicle_id       Int?
  rental_ids       Int[]     @default([])
  expense_ids      Int[]     @default([])
  total_income     Decimal?  @default(0) @db.Decimal(10, 2)
  total_expenses   Decimal?  @default(0) @db.Decimal(10, 2)
  total_commission Decimal?  @default(0) @db.Decimal(10, 2)
  profit           Decimal?  @default(0) @db.Decimal(10, 2)
  description      String?
  status           String?   @default("draft") @db.VarChar(20)
  created_by       Int?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  rental_id        String?   @db.Uuid
  amount           Decimal?  @db.Decimal(10, 2)
  commission       Decimal?  @db.Decimal(10, 2)
  net_amount       Decimal?  @db.Decimal(10, 2)
  paid_at          DateTime? @db.Timestamp(6)
  notes            String?
  company          String?   @default("Default Company") @db.VarChar(100)
  period           String?   @default("Current Period") @db.VarChar(50)
  from_date        DateTime? @default(now()) @db.Timestamp(6)
  to_date          DateTime? @default(now()) @db.Timestamp(6)
  total_to_owner   Decimal?  @default(0) @db.Decimal(10, 2)

  @@index([rental_id], map: "idx_settlements_rental_id")
}

model team_members {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id    String    @db.Uuid
  user_id    String    @db.Uuid
  team_role  String?   @default("member") @db.VarChar(100)
  joined_at  DateTime? @default(now()) @db.Timestamp(6)
  left_at    DateTime? @db.Timestamp(6)
  is_active  Boolean?  @default(true)
  created_by String?   @db.Uuid
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([team_id, user_id, joined_at])
}

model teams {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String?        @db.Uuid
  department_id   String?        @db.Uuid
  name            String         @db.VarChar(255)
  description     String?
  team_lead_id    String?        @db.Uuid
  max_members     Int?           @default(20)
  team_type       String?        @default("operational") @db.VarChar(50)
  is_active       Boolean?       @default(true)
  settings        Json?          @default("{}")
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  created_by      String?        @db.Uuid
  team_members    team_members[]
  departments     departments?   @relation(fields: [department_id], references: [id], onUpdate: NoAction)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organization_id, name])
  @@index([is_active], map: "idx_teams_active")
  @@index([department_id], map: "idx_teams_department")
  @@index([organization_id], map: "idx_teams_org")
}

model user_notification_preferences {
  id                          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                     String    @unique @db.Uuid
  email_protocol_handover     Boolean?  @default(true)
  email_protocol_return       Boolean?  @default(true)
  email_rental_reminders      Boolean?  @default(true)
  email_payment_notifications Boolean?  @default(true)
  email_system_alerts         Boolean?  @default(true)
  email_marketing             Boolean?  @default(false)
  sms_urgent_alerts           Boolean?  @default(false)
  sms_rental_reminders        Boolean?  @default(false)
  push_enabled                Boolean?  @default(false)
  push_rental_updates         Boolean?  @default(false)
  push_system_alerts          Boolean?  @default(false)
  digest_frequency            String?   @default("daily") @db.VarChar(20)
  quiet_hours_start           DateTime? @default(dbgenerated("'22:00:00'::time without time zone")) @db.Time(6)
  quiet_hours_end             DateTime? @default(dbgenerated("'08:00:00'::time without time zone")) @db.Time(6)
  timezone                    String?   @default("Europe/Bratislava") @db.VarChar(50)
  created_at                  DateTime? @default(now()) @db.Timestamp(6)
  updated_at                  DateTime? @default(now()) @db.Timestamp(6)
}

model user_permissions {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  company_id  String    @db.Uuid
  permissions Json      @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@unique([user_id, company_id])
  @@index([company_id], map: "idx_user_permissions_company_id")
  @@index([user_id], map: "idx_user_permissions_user_id")
}

model user_permissions_cache {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String    @unique @db.Uuid
  permissions             Json      @default("{}")
  role_hierarchy          Json?     @default("{}")
  cached_at               DateTime? @default(now()) @db.Timestamp(6)
  expires_at              DateTime  @db.Timestamp(6)
  cache_version           Int?      @default(1)
  source_role_id          String?   @db.Uuid
  source_permissions_hash String?   @db.VarChar(64)
}

model user_sessions {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  session_token    String    @unique @db.VarChar(255)
  refresh_token    String?   @unique @db.VarChar(255)
  device_type      String?   @db.VarChar(50)
  browser          String?   @db.VarChar(100)
  os               String?   @db.VarChar(100)
  ip_address       String?   @db.Inet
  user_agent       String?
  country          String?   @db.VarChar(100)
  city             String?   @db.VarChar(100)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  last_activity_at DateTime? @default(now()) @db.Timestamp(6)
  expires_at       DateTime  @db.Timestamp(6)
  logged_out_at    DateTime? @db.Timestamp(6)
  is_active        Boolean?  @default(true)
  logout_reason    String?   @db.VarChar(50)

  @@index([is_active, expires_at], map: "idx_user_sessions_active")
  @@index([session_token], map: "idx_user_sessions_token")
  @@index([user_id], map: "idx_user_sessions_user_id")
}

model users {
  username           String              @unique @db.VarChar(50)
  email              String              @unique @db.VarChar(100)
  password_hash      String              @db.VarChar(255)
  role               String?             @default("user") @db.VarChar(30)
  created_at         DateTime?           @default(now()) @db.Timestamp(6)
  updated_at         DateTime?           @default(now()) @db.Timestamp(6)
  company_id         String?             @db.Uuid
  employee_number    String?             @db.VarChar(20)
  hire_date          DateTime?           @db.Date
  is_active          Boolean?            @default(true)
  last_login         DateTime?           @db.Timestamp(6)
  first_name         String?             @db.VarChar(100)
  last_name          String?             @db.VarChar(100)
  signature_template String?
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  linked_investor_id String?             @db.Uuid
  permissions        Json?               @default("[]")
  platform_id        String?             @db.Uuid
  blacklist          blacklist[]
  company_documents  company_documents[]
  platforms          platforms?          @relation(fields: [platform_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([company_id], map: "idx_users_company_id")
  @@index([platform_id], map: "idx_users_platform")
  @@index([platform_id, role], map: "idx_users_platform_role")
}

model vehicle_documents {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_type   String    @db.VarChar(20)
  valid_from      DateTime? @db.Date
  valid_to        DateTime  @db.Date
  document_number String?   @db.VarChar(100)
  price           Decimal?  @db.Decimal(10, 2)
  notes           String?
  file_path       String?
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  vehicle_id      Int?
  country         String?   @db.VarChar(2)
  is_required     Boolean?  @default(false)

  @@index([country], map: "idx_vehicle_documents_country")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model vehicle_unavailability {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vehicle_id       Int
  start_date       DateTime  @db.Date
  end_date         DateTime  @db.Date
  reason           String
  type             String    @default("maintenance") @db.VarChar(50)
  notes            String?
  priority         Int?      @default(2)
  recurring        Boolean?  @default(false)
  recurring_config Json?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  created_by       String?   @default("system") @db.VarChar(100)

  @@unique([vehicle_id, start_date, end_date, type], map: "unique_vehicle_period")
  @@index([start_date, end_date], map: "idx_vehicle_unavailability_dates")
  @@index([type], map: "idx_vehicle_unavailability_type")
  @@index([vehicle_id], map: "idx_vehicle_unavailability_vehicle_id")
}

model vehicles {
  id               Int             @id @default(autoincrement())
  company_id       Int?
  brand            String          @db.VarChar(50)
  model            String          @db.VarChar(50)
  year             Int?
  license_plate    String          @unique @db.VarChar(50)
  vin              String?         @db.VarChar(50)
  color            String?         @db.VarChar(30)
  fuel_type        String?         @db.VarChar(20)
  transmission     String?         @db.VarChar(20)
  category         String?         @db.VarChar(30)
  daily_rate       Decimal?        @db.Decimal(10, 2)
  status           String?         @default("available") @db.VarChar(30)
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  company          String          @default("Default Company") @db.VarChar(100)
  pricing          Json?           @default("[]")
  commission       Json?           @default("{\"type\": \"percentage\", \"value\": 20}")
  stk              DateTime?       @db.Date
  owner_company_id String?         @db.Uuid
  stk_expiry       DateTime?       @db.Date
  updated_at       DateTime?       @default(now()) @db.Timestamp(6)
  platform_id      String?         @db.Uuid
  expenses         expenses[]
  pdf_protocols    pdf_protocols[]
  rentals          rentals[]
  companies        companies?      @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  platforms        platforms?      @relation(fields: [platform_id], references: [id], onUpdate: NoAction)

  @@index([company_id], map: "idx_vehicles_company_id")
  @@index([created_at(sort: Desc)], map: "idx_vehicles_created_at_desc")
  @@index([owner_company_id], map: "idx_vehicles_owner_company_id")
  @@index([platform_id], map: "idx_vehicles_platform")
}
