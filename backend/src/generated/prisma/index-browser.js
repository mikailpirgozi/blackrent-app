
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BlacklistScalarFieldEnum = {
  id: 'id',
  email: 'email',
  reason: 'reason',
  created_at: 'created_at',
  created_by: 'created_by',
  is_active: 'is_active'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  ic: 'ic',
  dic: 'dic',
  created_at: 'created_at',
  business_id: 'business_id',
  tax_id: 'tax_id',
  contact_person: 'contact_person',
  contract_start_date: 'contract_start_date',
  contract_end_date: 'contract_end_date',
  commission_rate: 'commission_rate',
  is_active: 'is_active',
  updated_at: 'updated_at',
  platform_id: 'platform_id',
  personal_iban: 'personal_iban',
  business_iban: 'business_iban',
  owner_name: 'owner_name',
  contact_email: 'contact_email',
  contact_phone: 'contact_phone',
  default_commission_rate: 'default_commission_rate',
  protocol_display_name: 'protocol_display_name'
};

exports.Prisma.Company_documentsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  document_type: 'document_type',
  document_month: 'document_month',
  document_year: 'document_year',
  document_name: 'document_name',
  description: 'description',
  file_path: 'file_path',
  file_size: 'file_size',
  file_type: 'file_type',
  original_filename: 'original_filename',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.Company_investor_sharesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  investor_id: 'investor_id',
  ownership_percentage: 'ownership_percentage',
  investment_amount: 'investment_amount',
  investment_date: 'investment_date',
  is_primary_contact: 'is_primary_contact',
  profit_share_percentage: 'profit_share_percentage',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Company_investor_shares_oldScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  investor_id: 'investor_id',
  share_percentage: 'share_percentage',
  share_amount: 'share_amount',
  valid_from: 'valid_from',
  valid_to: 'valid_to',
  last_settlement_date: 'last_settlement_date',
  total_settlements_paid: 'total_settlements_paid',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Company_investorsScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone: 'phone',
  personal_id: 'personal_id',
  address: 'address',
  is_active: 'is_active',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Company_investors_oldScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  investor_name: 'investor_name',
  investor_email: 'investor_email',
  investor_phone: 'investor_phone',
  investor_type: 'investor_type',
  investment_amount: 'investment_amount',
  investment_date: 'investment_date',
  investment_currency: 'investment_currency',
  contract_number: 'contract_number',
  contract_date: 'contract_date',
  legal_entity_id: 'legal_entity_id',
  status: 'status',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.CustomersScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  birth_date: 'birth_date',
  id_number: 'id_number',
  driver_license: 'driver_license',
  created_at: 'created_at',
  name: 'name',
  updated_at: 'updated_at'
};

exports.Prisma.DepartmentsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  description: 'description',
  parent_department_id: 'parent_department_id',
  manager_id: 'manager_id',
  monthly_budget: 'monthly_budget',
  vehicle_limit: 'vehicle_limit',
  settings: 'settings',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Email_action_logsScalarFieldEnum = {
  id: 'id',
  email_type: 'email_type',
  recipient_email: 'recipient_email',
  sender_email: 'sender_email',
  subject: 'subject',
  rental_id: 'rental_id',
  protocol_id: 'protocol_id',
  user_id: 'user_id',
  company_id: 'company_id',
  action: 'action',
  status: 'status',
  message_id: 'message_id',
  error_message: 'error_message',
  retry_count: 'retry_count',
  scheduled_at: 'scheduled_at',
  sent_at: 'sent_at',
  delivered_at: 'delivered_at',
  opened_at: 'opened_at',
  clicked_at: 'clicked_at',
  created_at: 'created_at',
  metadata: 'metadata'
};

exports.Prisma.Email_blacklistScalarFieldEnum = {
  id: 'id',
  order_number: 'order_number',
  reason: 'reason',
  created_at: 'created_at',
  created_by: 'created_by',
  notes: 'notes'
};

exports.Prisma.Email_processing_historyScalarFieldEnum = {
  id: 'id',
  email_log_id: 'email_log_id',
  step: 'step',
  status: 'status',
  started_at: 'started_at',
  completed_at: 'completed_at',
  duration_ms: 'duration_ms',
  input_data: 'input_data',
  output_data: 'output_data',
  error_details: 'error_details',
  server_instance: 'server_instance',
  process_id: 'process_id',
  archived_at: 'archived_at',
  auto_archive_after_days: 'auto_archive_after_days',
  email_id: 'email_id',
  message_id: 'message_id',
  subject: 'subject',
  sender: 'sender',
  recipient: 'recipient',
  email_content: 'email_content',
  email_html: 'email_html',
  received_at: 'received_at',
  processed_at: 'processed_at',
  action_taken: 'action_taken',
  processed_by: 'processed_by',
  parsed_data: 'parsed_data',
  confidence_score: 'confidence_score',
  error_message: 'error_message',
  notes: 'notes',
  tags: 'tags',
  rental_id: 'rental_id',
  is_blacklisted: 'is_blacklisted',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Expense_auditScalarFieldEnum = {
  id: 'id',
  expense_id: 'expense_id',
  action: 'action',
  user_id: 'user_id',
  username: 'username',
  changes: 'changes',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at'
};

exports.Prisma.Expense_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  display_name: 'display_name',
  description: 'description',
  icon: 'icon',
  color: 'color',
  is_default: 'is_default',
  is_active: 'is_active',
  sort_order: 'sort_order',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.ExpensesScalarFieldEnum = {
  id: 'id',
  rental_id: 'rental_id',
  vehicle_id: 'vehicle_id',
  category: 'category',
  description: 'description',
  amount: 'amount',
  date: 'date',
  created_at: 'created_at',
  company: 'company',
  note: 'note',
  company_id: 'company_id',
  category_id: 'category_id',
  receipt_url: 'receipt_url',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Feature_flagsScalarFieldEnum = {
  id: 'id',
  flag_name: 'flag_name',
  enabled: 'enabled',
  percentage: 'percentage',
  allowed_users: 'allowed_users',
  start_date: 'start_date',
  end_date: 'end_date',
  description: 'description',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Handover_protocolsScalarFieldEnum = {
  id: 'id',
  rental_id: 'rental_id',
  type: 'type',
  status: 'status',
  location: 'location',
  created_at: 'created_at',
  completed_at: 'completed_at',
  odometer: 'odometer',
  fuel_level: 'fuel_level',
  fuel_type: 'fuel_type',
  exterior_condition: 'exterior_condition',
  interior_condition: 'interior_condition',
  condition_notes: 'condition_notes',
  vehicle_images_urls: 'vehicle_images_urls',
  vehicle_videos_urls: 'vehicle_videos_urls',
  document_images_urls: 'document_images_urls',
  damage_images_urls: 'damage_images_urls',
  damages: 'damages',
  signatures: 'signatures',
  rental_data: 'rental_data',
  pdf_url: 'pdf_url',
  email_sent: 'email_sent',
  notes: 'notes',
  created_by: 'created_by'
};

exports.Prisma.Insurance_claimsScalarFieldEnum = {
  id: 'id',
  vehicle_id: 'vehicle_id',
  insurance_id: 'insurance_id',
  incident_date: 'incident_date',
  reported_date: 'reported_date',
  claim_number: 'claim_number',
  description: 'description',
  location: 'location',
  incident_type: 'incident_type',
  estimated_damage: 'estimated_damage',
  deductible: 'deductible',
  payout_amount: 'payout_amount',
  status: 'status',
  file_paths: 'file_paths',
  police_report_number: 'police_report_number',
  other_party_info: 'other_party_info',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.InsurancesScalarFieldEnum = {
  id: 'id',
  rental_id: 'rental_id',
  insurer_id: 'insurer_id',
  policy_number: 'policy_number',
  type: 'type',
  coverage_amount: 'coverage_amount',
  premium: 'premium',
  start_date: 'start_date',
  end_date: 'end_date',
  created_at: 'created_at',
  payment_frequency: 'payment_frequency',
  file_path: 'file_path',
  file_paths: 'file_paths',
  provider: 'provider',
  coverage_type: 'coverage_type',
  updated_at: 'updated_at',
  km_state: 'km_state',
  vehicle_id: 'vehicle_id',
  deductible_amount: 'deductible_amount',
  deductible_percentage: 'deductible_percentage'
};

exports.Prisma.InsurersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  created_at: 'created_at'
};

exports.Prisma.Leasing_documentsScalarFieldEnum = {
  id: 'id',
  leasing_id: 'leasing_id',
  type: 'type',
  file_name: 'file_name',
  file_url: 'file_url',
  file_size: 'file_size',
  mime_type: 'mime_type',
  uploaded_at: 'uploaded_at'
};

exports.Prisma.LeasingsScalarFieldEnum = {
  id: 'id',
  vehicle_id: 'vehicle_id',
  leasing_company: 'leasing_company',
  loan_category: 'loan_category',
  payment_type: 'payment_type',
  initial_loan_amount: 'initial_loan_amount',
  current_balance: 'current_balance',
  interest_rate: 'interest_rate',
  rpmn: 'rpmn',
  monthly_payment: 'monthly_payment',
  monthly_fee: 'monthly_fee',
  processing_fee: 'processing_fee',
  total_monthly_payment: 'total_monthly_payment',
  total_installments: 'total_installments',
  remaining_installments: 'remaining_installments',
  paid_installments: 'paid_installments',
  first_payment_date: 'first_payment_date',
  last_payment_date: 'last_payment_date',
  last_paid_date: 'last_paid_date',
  early_repayment_penalty: 'early_repayment_penalty',
  early_repayment_penalty_type: 'early_repayment_penalty_type',
  acquisition_price_without_vat: 'acquisition_price_without_vat',
  acquisition_price_with_vat: 'acquisition_price_with_vat',
  is_non_deductible: 'is_non_deductible',
  contract_document_url: 'contract_document_url',
  payment_schedule_url: 'payment_schedule_url',
  photos_zip_url: 'photos_zip_url',
  created_at: 'created_at',
  updated_at: 'updated_at',
  platform_id: 'platform_id'
};

exports.Prisma.Migration_historyScalarFieldEnum = {
  id: 'id',
  migration_name: 'migration_name',
  executed_at: 'executed_at',
  success: 'success'
};

exports.Prisma.OrganizationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  domain: 'domain',
  business_id: 'business_id',
  tax_id: 'tax_id',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  logo_url: 'logo_url',
  subscription_plan: 'subscription_plan',
  subscription_status: 'subscription_status',
  subscription_expires_at: 'subscription_expires_at',
  max_users: 'max_users',
  max_vehicles: 'max_vehicles',
  settings: 'settings',
  branding: 'branding',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.Payment_scheduleScalarFieldEnum = {
  id: 'id',
  leasing_id: 'leasing_id',
  installment_number: 'installment_number',
  due_date: 'due_date',
  principal: 'principal',
  interest: 'interest',
  monthly_fee: 'monthly_fee',
  total_payment: 'total_payment',
  remaining_balance: 'remaining_balance',
  is_paid: 'is_paid',
  paid_date: 'paid_date',
  created_at: 'created_at'
};

exports.Prisma.Pdf_protocolsScalarFieldEnum = {
  id: 'id',
  protocol_id: 'protocol_id',
  rental_id: 'rental_id',
  customer_id: 'customer_id',
  vehicle_id: 'vehicle_id',
  type: 'type',
  pdf_data: 'pdf_data',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Photo_derivativesScalarFieldEnum = {
  id: 'id',
  photo_id: 'photo_id',
  derivative_type: 'derivative_type',
  url: 'url',
  file_size: 'file_size',
  width: 'width',
  height: 'height',
  format: 'format',
  quality: 'quality',
  created_at: 'created_at'
};

exports.Prisma.Photo_metadata_v2ScalarFieldEnum = {
  id: 'id',
  photo_id: 'photo_id',
  hash_sha256: 'hash_sha256',
  original_size: 'original_size',
  processing_time: 'processing_time',
  savings_percentage: 'savings_percentage',
  device_info: 'device_info',
  exif_data: 'exif_data',
  processing_config: 'processing_config',
  version: 'version',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PlatformsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  display_name: 'display_name',
  subdomain: 'subdomain',
  logo_url: 'logo_url',
  settings: 'settings',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Protocol_photosScalarFieldEnum = {
  id: 'id',
  protocol_id: 'protocol_id',
  photo_url: 'photo_url',
  category: 'category',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.Protocol_processing_jobsScalarFieldEnum = {
  id: 'id',
  protocol_id: 'protocol_id',
  job_type: 'job_type',
  job_id: 'job_id',
  status: 'status',
  progress: 'progress',
  started_at: 'started_at',
  completed_at: 'completed_at',
  error_message: 'error_message',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Protocol_signaturesScalarFieldEnum = {
  id: 'id',
  protocol_id: 'protocol_id',
  signature_type: 'signature_type',
  signature_data: 'signature_data',
  signer_name: 'signer_name',
  created_at: 'created_at'
};

exports.Prisma.Protocol_versionsScalarFieldEnum = {
  id: 'id',
  protocol_id: 'protocol_id',
  version: 'version',
  migrated_at: 'migrated_at',
  migration_reason: 'migration_reason',
  created_at: 'created_at'
};

exports.Prisma.ProtocolsScalarFieldEnum = {
  id: 'id',
  rental_id: 'rental_id',
  type: 'type',
  status: 'status',
  location: 'location',
  odometer: 'odometer',
  fuel_level: 'fuel_level',
  notes: 'notes',
  media_urls: 'media_urls',
  damages: 'damages',
  created_by: 'created_by',
  created_at: 'created_at',
  completed_at: 'completed_at',
  updated_at: 'updated_at',
  data: 'data'
};

exports.Prisma.Recurring_expense_generationsScalarFieldEnum = {
  id: 'id',
  recurring_expense_id: 'recurring_expense_id',
  generated_expense_id: 'generated_expense_id',
  generation_date: 'generation_date',
  generated_at: 'generated_at',
  generated_by: 'generated_by'
};

exports.Prisma.Recurring_expensesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  amount: 'amount',
  category: 'category',
  company: 'company',
  vehicle_id: 'vehicle_id',
  note: 'note',
  frequency: 'frequency',
  start_date: 'start_date',
  end_date: 'end_date',
  day_of_month: 'day_of_month',
  is_active: 'is_active',
  last_generated_date: 'last_generated_date',
  next_generation_date: 'next_generation_date',
  total_generated: 'total_generated',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Rental_backupsScalarFieldEnum = {
  id: 'id',
  original_rental_id: 'original_rental_id',
  backup_data: 'backup_data',
  backup_timestamp: 'backup_timestamp',
  backup_reason: 'backup_reason'
};

exports.Prisma.RentalsScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  vehicle_id: 'vehicle_id',
  start_date: 'start_date',
  end_date: 'end_date',
  total_price: 'total_price',
  deposit: 'deposit',
  currency: 'currency',
  allowed_kilometers: 'allowed_kilometers',
  extra_kilometer_rate: 'extra_kilometer_rate',
  customer_name: 'customer_name',
  order_number: 'order_number',
  handover_place: 'handover_place',
  payment_method: 'payment_method',
  discount_percent: 'discount_percent',
  discount_amount: 'discount_amount',
  commission_percent: 'commission_percent',
  commission_amount: 'commission_amount',
  paid: 'paid',
  status: 'status',
  notes: 'notes',
  created_at: 'created_at',
  commission: 'commission',
  discount: 'discount',
  custom_commission: 'custom_commission',
  extra_km_charge: 'extra_km_charge',
  payments: 'payments',
  history: 'history',
  confirmed: 'confirmed',
  daily_kilometers: 'daily_kilometers',
  return_conditions: 'return_conditions',
  fuel_level: 'fuel_level',
  odometer: 'odometer',
  return_fuel_level: 'return_fuel_level',
  return_odometer: 'return_odometer',
  actual_kilometers: 'actual_kilometers',
  fuel_refill_cost: 'fuel_refill_cost',
  handover_protocol_id: 'handover_protocol_id',
  return_protocol_id: 'return_protocol_id',
  company: 'company',
  rental_type: 'rental_type',
  is_flexible: 'is_flexible',
  flexible_end_date: 'flexible_end_date',
  can_be_overridden: 'can_be_overridden',
  override_priority: 'override_priority',
  notification_threshold: 'notification_threshold',
  auto_extend: 'auto_extend',
  override_history: 'override_history',
  customer_email: 'customer_email',
  customer_phone: 'customer_phone',
  vehicle_name: 'vehicle_name',
  vehicle_code: 'vehicle_code',
  approval_status: 'approval_status',
  auto_processed_at: 'auto_processed_at',
  email_content: 'email_content',
  updated_at: 'updated_at'
};

exports.Prisma.Return_protocolsScalarFieldEnum = {
  id: 'id',
  rental_id: 'rental_id',
  handover_protocol_id: 'handover_protocol_id',
  type: 'type',
  status: 'status',
  location: 'location',
  created_at: 'created_at',
  completed_at: 'completed_at',
  odometer: 'odometer',
  fuel_level: 'fuel_level',
  fuel_type: 'fuel_type',
  exterior_condition: 'exterior_condition',
  interior_condition: 'interior_condition',
  condition_notes: 'condition_notes',
  vehicle_images_urls: 'vehicle_images_urls',
  vehicle_videos_urls: 'vehicle_videos_urls',
  document_images_urls: 'document_images_urls',
  damage_images_urls: 'damage_images_urls',
  damages: 'damages',
  new_damages: 'new_damages',
  signatures: 'signatures',
  kilometers_used: 'kilometers_used',
  kilometer_overage: 'kilometer_overage',
  kilometer_fee: 'kilometer_fee',
  fuel_used: 'fuel_used',
  fuel_fee: 'fuel_fee',
  total_extra_fees: 'total_extra_fees',
  deposit_refund: 'deposit_refund',
  additional_charges: 'additional_charges',
  final_refund: 'final_refund',
  rental_data: 'rental_data',
  pdf_url: 'pdf_url',
  email_sent: 'email_sent',
  email_sent_at: 'email_sent_at',
  notes: 'notes',
  created_by: 'created_by'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  display_name: 'display_name',
  description: 'description',
  level: 'level',
  parent_role_id: 'parent_role_id',
  permissions: 'permissions',
  is_system: 'is_system',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.SettlementsScalarFieldEnum = {
  id: 'id',
  period_from: 'period_from',
  period_to: 'period_to',
  vehicle_id: 'vehicle_id',
  rental_ids: 'rental_ids',
  expense_ids: 'expense_ids',
  total_income: 'total_income',
  total_expenses: 'total_expenses',
  total_commission: 'total_commission',
  profit: 'profit',
  description: 'description',
  status: 'status',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  rental_id: 'rental_id',
  amount: 'amount',
  commission: 'commission',
  net_amount: 'net_amount',
  paid_at: 'paid_at',
  notes: 'notes',
  company: 'company',
  period: 'period',
  from_date: 'from_date',
  to_date: 'to_date',
  total_to_owner: 'total_to_owner'
};

exports.Prisma.Team_membersScalarFieldEnum = {
  id: 'id',
  team_id: 'team_id',
  user_id: 'user_id',
  team_role: 'team_role',
  joined_at: 'joined_at',
  left_at: 'left_at',
  is_active: 'is_active',
  created_by: 'created_by'
};

exports.Prisma.TeamsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  department_id: 'department_id',
  name: 'name',
  description: 'description',
  team_lead_id: 'team_lead_id',
  max_members: 'max_members',
  team_type: 'team_type',
  is_active: 'is_active',
  settings: 'settings',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.User_notification_preferencesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  email_protocol_handover: 'email_protocol_handover',
  email_protocol_return: 'email_protocol_return',
  email_rental_reminders: 'email_rental_reminders',
  email_payment_notifications: 'email_payment_notifications',
  email_system_alerts: 'email_system_alerts',
  email_marketing: 'email_marketing',
  sms_urgent_alerts: 'sms_urgent_alerts',
  sms_rental_reminders: 'sms_rental_reminders',
  push_enabled: 'push_enabled',
  push_rental_updates: 'push_rental_updates',
  push_system_alerts: 'push_system_alerts',
  digest_frequency: 'digest_frequency',
  quiet_hours_start: 'quiet_hours_start',
  quiet_hours_end: 'quiet_hours_end',
  timezone: 'timezone',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_permissionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  company_id: 'company_id',
  permissions: 'permissions',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_permissions_cacheScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  permissions: 'permissions',
  role_hierarchy: 'role_hierarchy',
  cached_at: 'cached_at',
  expires_at: 'expires_at',
  cache_version: 'cache_version',
  source_role_id: 'source_role_id',
  source_permissions_hash: 'source_permissions_hash'
};

exports.Prisma.User_sessionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  session_token: 'session_token',
  refresh_token: 'refresh_token',
  device_type: 'device_type',
  browser: 'browser',
  os: 'os',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  country: 'country',
  city: 'city',
  created_at: 'created_at',
  last_activity_at: 'last_activity_at',
  expires_at: 'expires_at',
  logged_out_at: 'logged_out_at',
  is_active: 'is_active',
  logout_reason: 'logout_reason'
};

exports.Prisma.UsersScalarFieldEnum = {
  username: 'username',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  created_at: 'created_at',
  updated_at: 'updated_at',
  company_id: 'company_id',
  employee_number: 'employee_number',
  hire_date: 'hire_date',
  is_active: 'is_active',
  last_login: 'last_login',
  first_name: 'first_name',
  last_name: 'last_name',
  signature_template: 'signature_template',
  id: 'id',
  linked_investor_id: 'linked_investor_id',
  permissions: 'permissions',
  platform_id: 'platform_id'
};

exports.Prisma.Vehicle_documentsScalarFieldEnum = {
  id: 'id',
  document_type: 'document_type',
  valid_from: 'valid_from',
  valid_to: 'valid_to',
  document_number: 'document_number',
  price: 'price',
  notes: 'notes',
  file_path: 'file_path',
  created_at: 'created_at',
  updated_at: 'updated_at',
  vehicle_id: 'vehicle_id',
  country: 'country',
  is_required: 'is_required'
};

exports.Prisma.Vehicle_unavailabilityScalarFieldEnum = {
  id: 'id',
  vehicle_id: 'vehicle_id',
  start_date: 'start_date',
  end_date: 'end_date',
  reason: 'reason',
  type: 'type',
  notes: 'notes',
  priority: 'priority',
  recurring: 'recurring',
  recurring_config: 'recurring_config',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.VehiclesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  brand: 'brand',
  model: 'model',
  year: 'year',
  license_plate: 'license_plate',
  vin: 'vin',
  color: 'color',
  fuel_type: 'fuel_type',
  transmission: 'transmission',
  category: 'category',
  daily_rate: 'daily_rate',
  status: 'status',
  created_at: 'created_at',
  company: 'company',
  pricing: 'pricing',
  commission: 'commission',
  stk: 'stk',
  owner_company_id: 'owner_company_id',
  stk_expiry: 'stk_expiry',
  updated_at: 'updated_at',
  platform_id: 'platform_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  blacklist: 'blacklist',
  companies: 'companies',
  company_documents: 'company_documents',
  company_investor_shares: 'company_investor_shares',
  company_investor_shares_old: 'company_investor_shares_old',
  company_investors: 'company_investors',
  company_investors_old: 'company_investors_old',
  customers: 'customers',
  departments: 'departments',
  email_action_logs: 'email_action_logs',
  email_blacklist: 'email_blacklist',
  email_processing_history: 'email_processing_history',
  expense_audit: 'expense_audit',
  expense_categories: 'expense_categories',
  expenses: 'expenses',
  feature_flags: 'feature_flags',
  handover_protocols: 'handover_protocols',
  insurance_claims: 'insurance_claims',
  insurances: 'insurances',
  insurers: 'insurers',
  leasing_documents: 'leasing_documents',
  leasings: 'leasings',
  migration_history: 'migration_history',
  organizations: 'organizations',
  payment_schedule: 'payment_schedule',
  pdf_protocols: 'pdf_protocols',
  photo_derivatives: 'photo_derivatives',
  photo_metadata_v2: 'photo_metadata_v2',
  platforms: 'platforms',
  protocol_photos: 'protocol_photos',
  protocol_processing_jobs: 'protocol_processing_jobs',
  protocol_signatures: 'protocol_signatures',
  protocol_versions: 'protocol_versions',
  protocols: 'protocols',
  recurring_expense_generations: 'recurring_expense_generations',
  recurring_expenses: 'recurring_expenses',
  rental_backups: 'rental_backups',
  rentals: 'rentals',
  return_protocols: 'return_protocols',
  roles: 'roles',
  settlements: 'settlements',
  team_members: 'team_members',
  teams: 'teams',
  user_notification_preferences: 'user_notification_preferences',
  user_permissions: 'user_permissions',
  user_permissions_cache: 'user_permissions_cache',
  user_sessions: 'user_sessions',
  users: 'users',
  vehicle_documents: 'vehicle_documents',
  vehicle_unavailability: 'vehicle_unavailability',
  vehicles: 'vehicles'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
