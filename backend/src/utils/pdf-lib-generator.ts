import { PDFDocument, rgb, StandardFonts, PageSizes } from 'pdf-lib';
import { HandoverProtocol, ReturnProtocol } from '../types';

/**
 * PDF-lib Generator - Vysok√° kvalita PDF bez system dependencies
 * Produkuje profesion√°lne PDF dokumenty s lep≈°ou typografiou
 */
export class PDFLibGenerator {
  private doc!: PDFDocument; // Definite assignment assertion - inicializuje sa v generate met√≥dach
  private currentY: number = 750; // PDF s√∫radnice zaƒç√≠naj√∫ zdola
  private pageWidth: number = 595; // A4 width
  private pageHeight: number = 842; // A4 height
  private margin: number = 50;
  private primaryColor = rgb(0.1, 0.46, 0.82); // Blue
  private secondaryColor = rgb(0.26, 0.26, 0.26); // Dark gray
  private lightGray = rgb(0.94, 0.94, 0.94);
  private currentPage: any;
  private font: any;
  private boldFont: any;

  constructor() {
    // Inicializ√°cia sa vykon√° v generate met√≥dach
  }

  /**
   * Generovanie handover protokolu s pdf-lib
   */
  async generateHandoverProtocol(protocol: HandoverProtocol): Promise<Buffer> {
    console.log('üé® PDF-LIB GENER√ÅTOR SPUSTEN√ù - Handover protokol');
    console.log('üìã Protokol ID:', protocol.id);
    
    // Vytvorenie nov√©ho PDF dokumentu
    this.doc = await PDFDocument.create();
    this.currentPage = this.doc.addPage(PageSizes.A4);
    
    // Nahranie fontov
    this.font = await this.doc.embedFont(StandardFonts.Helvetica);
    this.boldFont = await this.doc.embedFont(StandardFonts.HelveticaBold);
    
    // Reset poz√≠cie (PDF s√∫radnice zaƒç√≠naj√∫ zdola)
    this.currentY = this.pageHeight - 50;
    
    // 1. Z√°hlavie s modern√Ωm dizajnom
    this.addModernHeader('PROTOKOL PREVZATIA VOZIDLA');
    
    // 2. Z√°kladn√© inform√°cie
    this.addInfoSection('Z√°kladn√© inform√°cie', [
      ['ƒå√≠slo protokolu:', protocol.id.slice(-8).toUpperCase()],
      ['D√°tum vytvorenia:', new Date(protocol.createdAt).toLocaleDateString('sk-SK')],
      ['Miesto prevzatia:', protocol.location],
      ['Stav protokolu:', this.getStatusText(protocol.status)]
    ]);
    
    // 3. Inform√°cie o pren√°jme
    if (protocol.rentalData) {
      this.addInfoSection('Inform√°cie o pren√°jme', [
        ['ƒå√≠slo objedn√°vky:', protocol.rentalData.orderNumber || 'N/A'],
        ['Z√°kazn√≠k:', protocol.rentalData.customer?.name || 'N/A'],
        ['D√°tum od:', new Date(protocol.rentalData.startDate).toLocaleDateString('sk-SK')],
        ['D√°tum do:', new Date(protocol.rentalData.endDate).toLocaleDateString('sk-SK')],
        ['Celkov√° cena:', `${protocol.rentalData.totalPrice} ${protocol.rentalData.currency}`],
        ['Z√°loha:', `${protocol.rentalData.deposit} ${protocol.rentalData.currency}`]
      ]);
    }
    
    // 4. Inform√°cie o vozidle
    if (protocol.rentalData?.vehicle) {
      this.addInfoSection('Inform√°cie o vozidle', [
        ['Znaƒçka:', protocol.rentalData.vehicle.brand || 'N/A'],
        ['Model:', protocol.rentalData.vehicle.model || 'N/A'],
        ['≈†PZ:', protocol.rentalData.vehicle.licensePlate || 'N/A'],
        ['Spoloƒçnos≈•:', protocol.rentalData.vehicle.company || 'N/A']
      ]);
    }
    
    // 5. Stav vozidla
    this.addInfoSection('Stav vozidla pri prevzat√≠', [
      ['Stav tachometra:', `${protocol.vehicleCondition.odometer} km`],
      ['√örove≈à paliva:', `${protocol.vehicleCondition.fuelLevel}%`],
      ['Typ paliva:', protocol.vehicleCondition.fuelType],
      ['Exteri√©r:', protocol.vehicleCondition.exteriorCondition],
      ['Interi√©r:', protocol.vehicleCondition.interiorCondition]
    ]);
    
    // 6. Pozn√°mky k stavu vozidla
    if (protocol.vehicleCondition.notes) {
      this.addNotesSection('Pozn√°mky k stavu vozidla', protocol.vehicleCondition.notes);
    }
    
    // 7. Po≈°kodenia
    if (protocol.damages && protocol.damages.length > 0) {
      this.addDamagesSection(protocol.damages);
    }
    
    // 8. S√∫hrn m√©di√≠
    this.addMediaSummary(protocol);
    
    // 9. Podpisy
    if (protocol.signatures && protocol.signatures.length > 0) {
      this.addSignaturesSection(protocol.signatures);
    }
    
    // 10. Dodatoƒçn√© pozn√°mky
    if (protocol.notes) {
      this.addNotesSection('Dodatoƒçn√© pozn√°mky', protocol.notes);
    }
    
    // 11. Modern√° p√§tka
    this.addModernFooter();
    
    // Serialize PDF do Buffera
    const pdfBytes = await this.doc.save();
    return Buffer.from(pdfBytes);
  }

  /**
   * Generovanie return protokolu
   */
  async generateReturnProtocol(protocol: ReturnProtocol): Promise<Buffer> {
    console.log('üé® PDF-LIB GENER√ÅTOR - Return protokol');
    
    this.doc = await PDFDocument.create();
    this.currentPage = this.doc.addPage(PageSizes.A4);
    
    this.font = await this.doc.embedFont(StandardFonts.Helvetica);
    this.boldFont = await this.doc.embedFont(StandardFonts.HelveticaBold);
    
    this.currentY = this.pageHeight - 50;
    
    this.addModernHeader('PROTOKOL VR√ÅTENIA VOZIDLA');
    
    // Z√°kladn√© inform√°cie
    this.addInfoSection('Z√°kladn√© inform√°cie', [
      ['ƒå√≠slo protokolu:', protocol.id.slice(-8).toUpperCase()],
      ['D√°tum vr√°tenia:', new Date(protocol.completedAt || protocol.createdAt).toLocaleDateString('sk-SK')],
      ['Miesto vr√°tenia:', protocol.location],
      ['Stav protokolu:', this.getStatusText(protocol.status)]
    ]);
    
    // Return-specific inform√°cie
    if (protocol.kilometersUsed !== undefined) {
      this.addInfoSection('Inform√°cie o pou≈æit√≠', [
        ['Pou≈æit√© kilometre:', `${protocol.kilometersUsed} km`],
        ['Prekroƒçenie limitu:', protocol.kilometerOverage ? `${protocol.kilometerOverage} km` : 'Nie'],
        ['Poplatok za km:', protocol.kilometerFee ? `${protocol.kilometerFee} EUR` : '0 EUR'],
        ['Dodatoƒçn√© poplatky:', `${protocol.totalExtraFees || 0} EUR`]
      ]);
    }
    
    this.addModernFooter();
    
    const pdfBytes = await this.doc.save();
    return Buffer.from(pdfBytes);
  }

  /**
   * Modern√© z√°hlavie s profesion√°lnym dizajnom
   */
  private addModernHeader(title: string): void {
    // Hlavn√Ω header box s gradientom (simulovan√Ωm cez farbu)
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - 40,
      width: this.pageWidth - 2 * this.margin,
      height: 40,
      color: this.primaryColor,
    });
    
    // Hlavn√Ω nadpis - biely text na modrom pozad√≠
    this.currentPage.drawText(this.toAsciiText(title), {
      x: this.pageWidth / 2 - 120, // Pribli≈æne na stred
      y: this.currentY - 25,
      size: 18,
      font: this.boldFont,
      color: rgb(1, 1, 1),
    });
    
    // BlackRent branding v pravom rohu
    this.currentPage.drawText('BlackRent', {
      x: this.pageWidth - this.margin - 60,
      y: this.currentY - 25,
      size: 12,
      font: this.boldFont,
      color: rgb(1, 1, 1),
    });
    
    this.currentY -= 60;
  }

  /**
   * Informaƒçn√° sekcia s modern√Ωm boxom
   */
  private addInfoSection(title: string, data: [string, string][]): void {
    this.checkPageBreak(80);
    
    // Nadpis sekcie s ≈°ed√Ωm pozad√≠m
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - 20,
      width: this.pageWidth - 2 * this.margin,
      height: 20,
      color: this.lightGray,
    });
    
    this.currentPage.drawText(this.toAsciiText(title), {
      x: this.margin + 10,
      y: this.currentY - 15,
      size: 12,
      font: this.boldFont,
      color: this.secondaryColor,
    });
    
    this.currentY -= 30;
    
    // Obsah sekcie s r√°mƒçekom
    const boxHeight = data.length * 20 + 20;
    
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - boxHeight,
      width: this.pageWidth - 2 * this.margin,
      height: boxHeight,
      borderColor: rgb(0.8, 0.8, 0.8),
      borderWidth: 1,
    });
    
    // D√°ta v tabuƒækovom form√°te
    data.forEach(([label, value], index) => {
      const yPos = this.currentY - 15 - (index * 20);
      
      // Label (tuƒçn√©)
      this.currentPage.drawText(this.toAsciiText(String(label || '')), {
        x: this.margin + 15,
        y: yPos,
        size: 10,
        font: this.boldFont,
        color: rgb(0, 0, 0),
      });
      
      // Value (norm√°lne)
      this.currentPage.drawText(this.toAsciiText(String(value || '')), {
        x: this.margin + 150,
        y: yPos,
        size: 10,
        font: this.font,
        color: rgb(0, 0, 0),
      });
    });
    
    this.currentY -= boxHeight + 15;
  }

  /**
   * Sekcia pre po≈°kodenia
   */
  private addDamagesSection(damages: any[]): void {
    this.addInfoSection('Zaznamenan√© po≈°kodenia', 
      damages.map((damage, index) => [
        `Po≈°kodenie ${index + 1}:`,
        `${damage.description} (${damage.severity})`
      ])
    );
  }

  /**
   * S√∫hrn m√©di√≠
   */
  private addMediaSummary(protocol: HandoverProtocol): void {
    const totalImages = (protocol.vehicleImages?.length || 0) + 
                       (protocol.documentImages?.length || 0) + 
                       (protocol.damageImages?.length || 0);
    const totalVideos = protocol.vehicleVideos?.length || 0;
    
    this.addInfoSection('Prilo≈æen√© s√∫bory', [
      ['Poƒçet fotiek:', totalImages.toString()],
      ['Fotky vozidla:', (protocol.vehicleImages?.length || 0).toString()],
      ['Fotky dokladov:', (protocol.documentImages?.length || 0).toString()],
      ['Fotky po≈°koden√≠:', (protocol.damageImages?.length || 0).toString()],
      ['Poƒçet vide√≠:', totalVideos.toString()]
    ]);
  }

  /**
   * Sekcia pre podpisy
   */
  private addSignaturesSection(signatures: any[]): void {
    const signatureData: [string, string][] = [];
    
    signatures.forEach((signature, index) => {
      signatureData.push(
        [`Podpis ${index + 1}:`, `${signature.signerName} (${signature.signerRole})`],
        [`ƒåas podpisu:`, new Date(signature.timestamp).toLocaleString('sk-SK')],
        [`Miesto:`, signature.location || 'N/A']
      );
    });
    
    this.addInfoSection('Podpisy', signatureData);
  }

  /**
   * Sekcia pre pozn√°mky s lep≈°√≠m text wrappingom
   */
  private addNotesSection(title: string, notes: string): void {
    this.checkPageBreak(60);
    
    // Nadpis
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - 20,
      width: this.pageWidth - 2 * this.margin,
      height: 20,
      color: this.lightGray,
    });
    
    this.currentPage.drawText(this.toAsciiText(title), {
      x: this.margin + 10,
      y: this.currentY - 15,
      size: 12,
      font: this.boldFont,
      color: this.secondaryColor,
    });
    
    this.currentY -= 30;
    
    // Pozn√°mky box
    const maxWidth = this.pageWidth - 2 * this.margin - 20;
    const lines = this.wrapText(notes, maxWidth, 10);
    const boxHeight = lines.length * 15 + 20;
    
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - boxHeight,
      width: this.pageWidth - 2 * this.margin,
      height: boxHeight,
      borderColor: rgb(0.8, 0.8, 0.8),
      borderWidth: 1,
    });
    
    lines.forEach((line, index) => {
      this.currentPage.drawText(line, {
        x: this.margin + 10,
        y: this.currentY - 15 - (index * 15),
        size: 10,
        font: this.font,
        color: rgb(0, 0, 0),
      });
    });
    
    this.currentY -= boxHeight + 15;
  }

  /**
   * Modern√° p√§tka s dizajnom
   */
  private addModernFooter(): void {
    const footerY = 40;
    
    // Farebn√° ƒçiara
    this.currentPage.drawLine({
      start: { x: this.margin, y: footerY + 20 },
      end: { x: this.pageWidth - this.margin, y: footerY + 20 },
      thickness: 2,
      color: this.primaryColor,
    });
    
    // Footer text
    const footerText = `Vygenerovane ${new Date().toLocaleString('sk-SK')} | BlackRent System`;
    this.currentPage.drawText(this.toAsciiText(footerText), {
      x: this.pageWidth / 2 - 80,
      y: footerY,
      size: 8,
      font: this.font,
      color: this.secondaryColor,
    });
    
    // Strana ƒç√≠slo
    this.currentPage.drawText(this.toAsciiText('Strana 1'), {
      x: this.pageWidth - this.margin - 40,
      y: footerY,
      size: 8,
      font: this.font,
      color: this.secondaryColor,
    });
  }

  /**
   * Kontrola prelomenia str√°nky
   */
  private checkPageBreak(requiredSpace: number): void {
    if (this.currentY - requiredSpace < 80) {
      this.currentPage = this.doc.addPage(PageSizes.A4);
      this.currentY = this.pageHeight - 50;
    }
  }

  /**
   * Wrappovanie textu pre lep≈°√≠ layout
   */
  private wrapText(text: string, maxWidth: number, fontSize: number): string[] {
    // Konvertujeme text na ASCII pred wrappingom
    const asciiText = this.toAsciiText(text);
    const words = asciiText.split(' ');
    const lines: string[] = [];
    let currentLine = '';
    
    for (const word of words) {
      const testLine = currentLine + (currentLine ? ' ' : '') + word;
      const testWidth = testLine.length * (fontSize * 0.6); // Aproxim√°cia
      
      if (testWidth <= maxWidth) {
        currentLine = testLine;
      } else {
        if (currentLine) {
          lines.push(currentLine);
        }
        currentLine = word;
      }
    }
    
    if (currentLine) {
      lines.push(currentLine);
    }
    
    return lines;
  }

  /**
   * Z√≠skanie textu stavu
   */
  private getStatusText(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': 'Caka na spracovanie',
      'in_progress': 'Prebieha',
      'completed': 'Dokonceny',
      'cancelled': 'Zruseny'
    };
    return statusMap[status] || status;
  }

  /**
   * Konvertuje slovensk√Ω text na ASCII (fallback pre PDF-lib font compatibility)
   */
  private toAsciiText(text: string): string {
    const diacriticsMap: { [key: string]: string } = {
      '√°': 'a', '√†': 'a', '√¢': 'a', '√§': 'a', '√£': 'a', '√•': 'a', 'ƒÅ': 'a',
      '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e', 'ƒì': 'e', 'ƒó': 'e', 'ƒô': 'e',
      '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i', 'ƒ´': 'i', 'ƒØ': 'i',
      '√≥': 'o', '√≤': 'o', '√¥': 'o', '√∂': 'o', '√µ': 'o', '√∏': 'o', '≈ç': 'o',
      '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u', '≈´': 'u', '≈≥': 'u',
      '√Ω': 'y', '√ø': 'y',
      'ƒç': 'c', 'ƒá': 'c', '√ß': 'c',
      'ƒè': 'd', 'ƒë': 'd',
      'ƒæ': 'l', 'ƒ∫': 'l', '≈Ç': 'l',
      '≈à': 'n', '≈Ñ': 'n', '√±': 'n',
      '≈ô': 'r', '≈ï': 'r',
      '≈°': 's', '≈õ': 's', '≈ü': 's',
      '≈•': 't', '≈£': 't',
      '≈æ': 'z', '≈∫': 'z', '≈º': 'z',
      // Veƒæk√© p√≠smen√°
      '√Å': 'A', '√Ä': 'A', '√Ç': 'A', '√Ñ': 'A', '√É': 'A', '√Ö': 'A', 'ƒÄ': 'A',
      '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E', 'ƒí': 'E', 'ƒñ': 'E', 'ƒò': 'E',
      '√ç': 'I', '√å': 'I', '√é': 'I', '√è': 'I', 'ƒ™': 'I', 'ƒÆ': 'I',
      '√ì': 'O', '√í': 'O', '√î': 'O', '√ñ': 'O', '√ï': 'O', '√ò': 'O', '≈å': 'O',
      '√ö': 'U', '√ô': 'U', '√õ': 'U', '√ú': 'U', '≈™': 'U', '≈≤': 'U',
      '√ù': 'Y', '≈∏': 'Y',
      'ƒå': 'C', 'ƒÜ': 'C', '√á': 'C',
      'ƒé': 'D', 'ƒê': 'D',
      'ƒΩ': 'L', 'ƒπ': 'L', '≈Å': 'L',
      '≈á': 'N', '≈É': 'N', '√ë': 'N',
      '≈ò': 'R', '≈î': 'R',
      '≈†': 'S', '≈ö': 'S', '≈û': 'S',
      '≈§': 'T', '≈¢': 'T',
      '≈Ω': 'Z', '≈π': 'Z', '≈ª': 'Z'
    };

    return text.replace(/[^\u0000-\u007F]/g, (char) => diacriticsMap[char] || char);
  }
} 