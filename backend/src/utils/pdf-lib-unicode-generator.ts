import { PDFDocument, rgb, PageSizes } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import type { HandoverProtocol, ReturnProtocol } from '../types';
import { getProtocolCompanyDisplay, getRepresentativeSection } from './protocol-helpers';
import fs from 'fs';
import path from 'path';

/**
 * PDF-lib Unicode Generator - Pln√° podpora slovenskej diakritiky
 * Pou≈æ√≠va custom TTF fonty cez fontkit pre perfektn√Ω text rendering
 */
export class PDFLibUnicodeGenerator {
  private doc!: PDFDocument;
  private currentY: number = 750;
  private pageWidth: number = 595;
  private pageHeight: number = 842;
  private margin: number = 50;
  private primaryColor = rgb(0.1, 0.46, 0.82);
  private secondaryColor = rgb(0.26, 0.26, 0.26);
  private lightGray = rgb(0.94, 0.94, 0.94);
  private currentPage: any;
  private font: any;
  private boldFont: any;

  constructor() {
    // Inicializ√°cia sa vykon√° v generate met√≥dach
  }

  /**
   * Generovanie handover protokolu s Unicode podporou
   */
  async generateHandoverProtocol(protocol: HandoverProtocol): Promise<Buffer> {
    console.log('üé® PDF-LIB UNICODE GENER√ÅTOR SPUSTEN√ù - Handover protokol');
    console.log('üìã Protokol ID:', protocol.id);
    
    // Vytvorenie PDF dokumentu s fontkit
    this.doc = await PDFDocument.create();
    this.doc.registerFontkit(fontkit);
    this.currentPage = this.doc.addPage(PageSizes.A4);
    
    // Naƒç√≠tanie Unicode fontov
    await this.loadUnicodeFonts();
    
    this.currentY = this.pageHeight - 50;
    
    // 1. Z√°hlavie s diakritiku
    this.addUnicodeHeader('ODOVZD√ÅVAC√ç PROTOKOL');
    
    // 2. Z√°kladn√© inform√°cie
    this.addInfoSection('Z√°kladn√© inform√°cie', [
      ['ƒå√≠slo protokolu:', protocol.id.slice(-8).toUpperCase()],
      ['D√°tum vytvorenia:', new Date(protocol.createdAt).toLocaleDateString('sk-SK')],
      ['Miesto prevzatia:', protocol.location],
      ['Stav protokolu:', this.getStatusText(protocol.status)]
    ]);
    
    // 3. Inform√°cie o pren√°jme
    if (protocol.rentalData) {
      this.addInfoSection('Inform√°cie o pren√°jme', [
        ['ƒå√≠slo objedn√°vky:', protocol.rentalData.orderNumber || 'N/A'],
        ['Z√°kazn√≠k:', protocol.rentalData.customer?.name || 'N/A'],
        ['D√°tum od:', new Date(protocol.rentalData.startDate).toLocaleDateString('sk-SK')],
        ['D√°tum do:', new Date(protocol.rentalData.endDate).toLocaleDateString('sk-SK')],
        ['Celkov√° cena:', `${protocol.rentalData.totalPrice} ${protocol.rentalData.currency}`],
        ['Z√°loha:', `${protocol.rentalData.deposit} ${protocol.rentalData.currency}`]
      ]);
    }
    
    // 4. Inform√°cie o vozidle
    if (protocol.rentalData?.vehicle) {
              this.addInfoSection('Inform√°cie o vozidle', [
          ['Znaƒçka:', protocol.rentalData.vehicle.brand || 'N/A'],
          ['Model:', protocol.rentalData.vehicle.model || 'N/A'],
          ['≈†PZ:', protocol.rentalData.vehicle.licensePlate || 'N/A'],
          ['Spoloƒçnos≈•:', getProtocolCompanyDisplay(protocol.rentalData.vehicle.company)],
          ...getRepresentativeSection()
        ]);
    }
    
    // 5. Stav vozidla s diakritiku
    this.addInfoSection('Stav vozidla pri prevzat√≠', [
      ['Stav tachometra:', `${protocol.vehicleCondition.odometer} km`],
      ['√örove≈à paliva:', `${protocol.vehicleCondition.fuelLevel}%`],
      ['Typ paliva:', protocol.vehicleCondition.fuelType],
      ['Exteri√©r:', protocol.vehicleCondition.exteriorCondition],
      ['Interi√©r:', protocol.vehicleCondition.interiorCondition]
    ]);
    
    // 6. Pozn√°mky
    if (protocol.vehicleCondition.notes) {
      this.addNotesSection('Pozn√°mky k stavu vozidla', protocol.vehicleCondition.notes);
    }
    
    // 7. Po≈°kodenia
    if (protocol.damages && protocol.damages.length > 0) {
      this.addDamagesSection(protocol.damages);
    }
    
    // 8. S√∫hrn m√©di√≠
    this.addMediaSummary(protocol);
    
    // 9. Podpisy
    if (protocol.signatures && protocol.signatures.length > 0) {
      this.addSignaturesSection(protocol.signatures);
    }
    
    // 10. Pozn√°mky
    if (protocol.notes) {
      this.addNotesSection('Dodatoƒçn√© pozn√°mky', protocol.notes);
    }
    
    // 11. Footer s diakritiku
    this.addUnicodeFooter();
    
    const pdfBytes = await this.doc.save();
    return Buffer.from(pdfBytes);
  }

  /**
   * Generovanie return protokolu s kompletn√Ωm obsahom
   */
  async generateReturnProtocol(protocol: ReturnProtocol): Promise<Buffer> {
    console.log('üé® PDF-LIB UNICODE - Return protokol');
    
    this.doc = await PDFDocument.create();
    this.doc.registerFontkit(fontkit);
    this.currentPage = this.doc.addPage(PageSizes.A4);
    
    await this.loadUnicodeFonts();
    
    this.currentY = this.pageHeight - 50;
    
    // 1. Z√°hlavie
    this.addUnicodeHeader('PREBERAC√ç PROTOKOL');
    
    // 2. Z√°kladn√© inform√°cie
    this.addInfoSection('Z√°kladn√© inform√°cie', [
      ['ƒå√≠slo protokolu:', protocol.id.slice(-8).toUpperCase()],
      ['D√°tum vr√°tenia:', new Date(protocol.completedAt || protocol.createdAt).toLocaleDateString('sk-SK')],
      ['Miesto vr√°tenia:', protocol.location],
      ['Stav protokolu:', this.getStatusText(protocol.status)]
    ]);
    
    // 3. Inform√°cie o pren√°jme
    if (protocol.rentalData) {
      this.addInfoSection('Inform√°cie o pren√°jme', [
        ['ƒå√≠slo objedn√°vky:', protocol.rentalData.orderNumber || 'N/A'],
        ['Z√°kazn√≠k:', protocol.rentalData.customer?.name || 'N/A'],
        ['Email z√°kazn√≠ka:', protocol.rentalData.customer?.email || 'N/A'],
        ['Telef√≥n z√°kazn√≠ka:', protocol.rentalData.customer?.phone || 'N/A'],
        ['D√°tum od:', new Date(protocol.rentalData.startDate).toLocaleDateString('sk-SK')],
        ['D√°tum do:', new Date(protocol.rentalData.endDate).toLocaleDateString('sk-SK')],
        ['Celkov√° cena pren√°jmu:', `${protocol.rentalData.totalPrice} ${protocol.rentalData.currency || 'EUR'}`],
        ['Z√°loha:', `${protocol.rentalData.deposit || 0} ${protocol.rentalData.currency || 'EUR'}`],
        ['Povolen√© km:', `${protocol.rentalData.allowedKilometers || 0} km`],
        ['Cena za extra km:', `${protocol.rentalData.extraKilometerRate || 0} EUR/km`]
      ]);
    }
    
    // 4. Inform√°cie o vozidle
    if (protocol.rentalData?.vehicle) {
      this.addInfoSection('Inform√°cie o vozidle', [
        ['Znaƒçka:', protocol.rentalData.vehicle.brand || 'N/A'],
        ['Model:', protocol.rentalData.vehicle.model || 'N/A'],
        ['≈†PZ:', protocol.rentalData.vehicle.licensePlate || 'N/A'],
        ['Spoloƒçnos≈•:', getProtocolCompanyDisplay(protocol.rentalData.vehicle.company)],
        ...getRepresentativeSection()
      ]);
    }
    
    // 5. Stav vozidla pri vr√°ten√≠
    const currentOdometer = protocol.vehicleCondition?.odometer || 0;
    const kilometersUsed = protocol.kilometersUsed || 0;
    const initialOdometer = Math.max(0, currentOdometer - kilometersUsed);
    
    this.addInfoSection('Stav vozidla pri vr√°ten√≠', [
      ['Poƒçiatoƒçn√Ω stav tachometra:', `${initialOdometer} km`],
      ['Koneƒçn√Ω stav tachometra:', `${currentOdometer} km`],
      ['√örove≈à paliva:', `${protocol.vehicleCondition?.fuelLevel || 'N/A'}%`],
      ['Typ paliva:', protocol.vehicleCondition?.fuelType || 'N/A'],
      ['Exteri√©r:', protocol.vehicleCondition?.exteriorCondition || 'N/A'],
      ['Interi√©r:', protocol.vehicleCondition?.interiorCondition || 'N/A']
    ]);
    
    // 6. Inform√°cie o pou≈æit√≠ vozidla a poplatky
    if (protocol.kilometersUsed !== undefined) {
      this.addInfoSection('Inform√°cie o pou≈æit√≠ vozidla', [
        ['Pou≈æit√© kilometre:', `${protocol.kilometersUsed} km`],
        ['Prekroƒçenie limitu:', protocol.kilometerOverage ? `${protocol.kilometerOverage} km` : 'Nie'],
        ['Poplatok za prekroƒçen√© km:', protocol.kilometerFee ? `${protocol.kilometerFee.toFixed(2)} EUR` : '0.00 EUR'],
        ['Poplatok za palivo:', protocol.fuelFee ? `${protocol.fuelFee.toFixed(2)} EUR` : '0.00 EUR'],
        ['Celkov√© dodatoƒçn√© poplatky:', `${(protocol.totalExtraFees || 0).toFixed(2)} EUR`],
        ['Refund z√°lohy:', `${(protocol.depositRefund || 0).toFixed(2)} EUR`],
        ['Dodatoƒçn√© platby:', `${(protocol.additionalCharges || 0).toFixed(2)} EUR`],
        ['Fin√°lny refund:', `${(protocol.finalRefund || 0).toFixed(2)} EUR`]
      ]);
    }
    
    // 7. Pozn√°mky k stavu vozidla
    if (protocol.notes) {
      this.addNotesSection('Pozn√°mky k stavu vozidla', protocol.notes);
    }
    
    // 8. Po≈°kodenia
    if (protocol.damages && protocol.damages.length > 0) {
      this.addDamagesSection(protocol.damages);
    }
    
    // 9. Nov√© po≈°kodenia
    if (protocol.newDamages && protocol.newDamages.length > 0) {
      this.addDamagesSection(protocol.newDamages);
    }
    
    // 10. Fotky (zatiaƒæ len poƒçet)
    if (protocol.vehicleImages && protocol.vehicleImages.length > 0) {
      this.addInfoSection('Fotky vozidla', [
        ['Poƒçet fotiek:', `${protocol.vehicleImages.length}`]
      ]);
    }
    
    if (protocol.documentImages && protocol.documentImages.length > 0) {
      this.addInfoSection('Fotky dokumentov', [
        ['Poƒçet fotiek:', `${protocol.documentImages.length}`]
      ]);
    }
    
    if (protocol.damageImages && protocol.damageImages.length > 0) {
      this.addInfoSection('Fotky po≈°koden√≠', [
        ['Poƒçet fotiek:', `${protocol.damageImages.length}`]
      ]);
    }
    
    // 13. Podpisy
    if (protocol.signatures && protocol.signatures.length > 0) {
      this.addSignaturesSection(protocol.signatures);
    }
    
    // 14. Footer
    this.addUnicodeFooter();
    
    const pdfBytes = await this.doc.save();
    console.log(`‚úÖ PDF-lib Unicode Return protokol dokonƒçen√Ω! Veƒækos≈•: ${(pdfBytes.length / 1024).toFixed(1)} KB`);
    
    return Buffer.from(pdfBytes);
  }

     /**
    * Naƒç√≠tanie Unicode fontov
    */
   private async loadUnicodeFonts(): Promise<void> {
     try {
       console.log('üìÅ Naƒç√≠tavam Unicode fonty...');
       
       // Pre demo pou≈æijem ≈°tandardn√© PDF fonty (lep≈°ie ako niƒç)
       this.font = await this.useDefaultPDFFont('regular');
       this.boldFont = await this.useDefaultPDFFont('bold');
       
       console.log('‚úÖ Unicode fonty naƒç√≠tan√© √∫spe≈°ne (≈°tandardn√© PDF fonty)');
       
     } catch (error) {
       console.error('‚ùå Chyba pri naƒç√≠tan√≠ fontov:', error);
       throw new Error('Nepodarilo sa naƒç√≠ta≈• Unicode fonty');
     }
   }

     

     /**
    * Pou≈æitie default PDF fontov (lep≈°ia Unicode podpora)
    */
   private async useDefaultPDFFont(fontType: 'regular' | 'bold'): Promise<any> {
     const { StandardFonts } = await import('pdf-lib');
     
     // Pou≈æitie najlep≈°√≠ch ≈°tandardn√Ωch fontov pre Unicode
     if (fontType === 'bold') {
       // Helvetica Bold m√¥≈æe ma≈• lep≈°iu podporu pre niektor√© znaky
       return await this.doc.embedFont(StandardFonts.HelveticaBold);
     } else {
       return await this.doc.embedFont(StandardFonts.Helvetica);
     }
   }

  /**
   * Header s Unicode podporou
   */
  private addUnicodeHeader(title: string): void {
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - 40,
      width: this.pageWidth - 2 * this.margin,
      height: 40,
      color: this.primaryColor,
    });
    
    // Pln√° slovensk√° diakritika
    this.currentPage.drawText(title, {
      x: this.pageWidth / 2 - 120,
      y: this.currentY - 25,
      size: 18,
      font: this.boldFont,
      color: rgb(1, 1, 1),
    });
    
    this.currentPage.drawText('BlackRent', {
      x: this.pageWidth - this.margin - 60,
      y: this.currentY - 25,
      size: 12,
      font: this.boldFont,
      color: rgb(1, 1, 1),
    });
    
    this.currentY -= 60;
  }

  /**
   * Informaƒçn√° sekcia s Unicode
   */
  private addInfoSection(title: string, data: [string, string][]): void {
    this.checkPageBreak(80);
    
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - 20,
      width: this.pageWidth - 2 * this.margin,
      height: 20,
      color: this.lightGray,
    });
    
    // Zachov√°me diakritiku v nadpisoch
    this.currentPage.drawText(title, {
      x: this.margin + 10,
      y: this.currentY - 15,
      size: 12,
      font: this.boldFont,
      color: this.secondaryColor,
    });
    
    this.currentY -= 30;
    
    const boxHeight = data.length * 20 + 20;
    
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - boxHeight,
      width: this.pageWidth - 2 * this.margin,
      height: boxHeight,
      borderColor: rgb(0.8, 0.8, 0.8),
      borderWidth: 1,
    });
    
    data.forEach(([label, value], index) => {
      const yPos = this.currentY - 15 - (index * 20);
      
      // Zachov√°me slovensk√∫ diakritiku
      this.currentPage.drawText(String(label || ''), {
        x: this.margin + 15,
        y: yPos,
        size: 10,
        font: this.boldFont,
        color: rgb(0, 0, 0),
      });
      
      this.currentPage.drawText(String(value || ''), {
        x: this.margin + 150,
        y: yPos,
        size: 10,
        font: this.font,
        color: rgb(0, 0, 0),
      });
    });
    
    this.currentY -= boxHeight + 15;
  }

  /**
   * Sekcia pre po≈°kodenia s diakritiku
   */
  private addDamagesSection(damages: any[]): void {
    this.addInfoSection('Zaznamenan√© po≈°kodenia', 
      damages.map((damage, index) => [
        `Po≈°kodenie ${index + 1}:`,
        `${damage.description} (${damage.severity})`
      ])
    );
  }

  /**
   * S√∫hrn m√©di√≠
   */
  private addMediaSummary(protocol: HandoverProtocol): void {
    const totalImages = (protocol.vehicleImages?.length || 0) + 
                       (protocol.documentImages?.length || 0) + 
                       (protocol.damageImages?.length || 0);
    const totalVideos = protocol.vehicleVideos?.length || 0;
    
    this.addInfoSection('Prilo≈æen√© s√∫bory', [
      ['Poƒçet fotiek:', totalImages.toString()],
      ['Fotky vozidla:', (protocol.vehicleImages?.length || 0).toString()],
      ['Fotky dokladov:', (protocol.documentImages?.length || 0).toString()],
      ['Fotky po≈°koden√≠:', (protocol.damageImages?.length || 0).toString()],
      ['Poƒçet vide√≠:', totalVideos.toString()]
    ]);
  }

  /**
   * Sekcia pre podpisy
   */
  private addSignaturesSection(signatures: any[]): void {
    const signatureData: [string, string][] = [];
    
    signatures.forEach((signature, index) => {
      signatureData.push(
        [`Podpis ${index + 1}:`, `${signature.signerName} (${signature.signerRole})`],
        [`ƒåas podpisu:`, new Date(signature.timestamp).toLocaleString('sk-SK')],
        [`Miesto:`, signature.location || 'N/A']
      );
    });
    
    this.addInfoSection('Podpisy', signatureData);
  }

  /**
   * Pozn√°mky s Unicode wrappingom
   */
  private addNotesSection(title: string, notes: string): void {
    this.checkPageBreak(60);
    
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - 20,
      width: this.pageWidth - 2 * this.margin,
      height: 20,
      color: this.lightGray,
    });
    
    this.currentPage.drawText(title, {
      x: this.margin + 10,
      y: this.currentY - 15,
      size: 12,
      font: this.boldFont,
      color: this.secondaryColor,
    });
    
    this.currentY -= 30;
    
    const maxWidth = this.pageWidth - 2 * this.margin - 20;
    const lines = this.wrapUnicodeText(notes, maxWidth, 10);
    const boxHeight = lines.length * 15 + 20;
    
    this.currentPage.drawRectangle({
      x: this.margin,
      y: this.currentY - boxHeight,
      width: this.pageWidth - 2 * this.margin,
      height: boxHeight,
      borderColor: rgb(0.8, 0.8, 0.8),
      borderWidth: 1,
    });
    
    lines.forEach((line, index) => {
      this.currentPage.drawText(line, {
        x: this.margin + 10,
        y: this.currentY - 15 - (index * 15),
        size: 10,
        font: this.font,
        color: rgb(0, 0, 0),
      });
    });
    
    this.currentY -= boxHeight + 15;
  }

  /**
   * Footer s diakritiku
   */
  private addUnicodeFooter(): void {
    const footerY = 40;
    
    this.currentPage.drawLine({
      start: { x: this.margin, y: footerY + 20 },
      end: { x: this.pageWidth - this.margin, y: footerY + 20 },
      thickness: 2,
      color: this.primaryColor,
    });
    
    const footerText = `Vygenerovan√© ${new Date().toLocaleString('sk-SK')} | BlackRent Syst√©m`;
    this.currentPage.drawText(footerText, {
      x: this.pageWidth / 2 - 80,
      y: footerY,
      size: 8,
      font: this.font,
      color: this.secondaryColor,
    });
    
    this.currentPage.drawText('Strana 1', {
      x: this.pageWidth - this.margin - 40,
      y: footerY,
      size: 8,
      font: this.font,
      color: this.secondaryColor,
    });
  }

  private checkPageBreak(requiredSpace: number): void {
    if (this.currentY - requiredSpace < 80) {
      this.currentPage = this.doc.addPage(PageSizes.A4);
      this.currentY = this.pageHeight - 50;
    }
  }

  /**
   * Unicode text wrapping (zachov√°va diakritiku)
   */
  private wrapUnicodeText(text: string, maxWidth: number, fontSize: number): string[] {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';
    
    for (const word of words) {
      const testLine = currentLine + (currentLine ? ' ' : '') + word;
      const testWidth = this.estimateTextWidth(testLine, fontSize);
      
      if (testWidth <= maxWidth) {
        currentLine = testLine;
      } else {
        if (currentLine) {
          lines.push(currentLine);
        }
        currentLine = word;
      }
    }
    
    if (currentLine) {
      lines.push(currentLine);
    }
    
    return lines;
  }

  /**
   * Odhad ≈°√≠rky Unicode textu
   */
  private estimateTextWidth(text: string, fontSize: number): number {
    // Aproxim√°cia pre Unicode znaky vr√°tane diakritiky
    return text.length * (fontSize * 0.6);
  }

  private getStatusText(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': 'ƒåak√° na spracovanie',
      'in_progress': 'Prebieha',
      'completed': 'Dokonƒçen√Ω',
      'cancelled': 'Zru≈°en√Ω'
    };
    return statusMap[status] || status;
  }
} 