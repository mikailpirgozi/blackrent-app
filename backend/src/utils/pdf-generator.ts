import PDFDocument from 'pdfkit';
import { HandoverProtocol, ReturnProtocol } from '../types';
import { EnhancedPDFGeneratorBackend } from './enhanced-pdf-generator-backend';
import { PuppeteerPDFGeneratorV2 } from './puppeteer-pdf-generator-v2';
import { PDFLibGenerator } from './pdf-lib-generator';
import { PDFLibCustomFontGenerator } from './pdf-lib-custom-font-generator';

// üîÑ PREP√çNAƒå PDF GENER√ÅTORA:
// 'custom-font' = PDF-lib s vlastn√Ωm fontom (najlep≈°ie pre vlastn√Ω font)
// 'pdf-lib' = PDF-lib gener√°tor (nov√Ω, vysok√° kvalita, ≈æiadne system dependencies)
// 'puppeteer' = Puppeteer Chrome PDF gener√°tor (najlep≈°√≠ ale Railway probl√©my)
// 'enhanced' = enhanced jsPDF generator (fallback)

// üéØ Custom font ako najlep≈°ia voƒæba ak je dostupn√Ω
const PDF_GENERATOR_TYPE: 'custom-font' | 'pdf-lib' | 'puppeteer' | 'enhanced' = 
  (process.env.PDF_GENERATOR_TYPE as 'custom-font' | 'pdf-lib' | 'puppeteer' | 'enhanced') || 'custom-font';

console.log(`üéØ PDF Generator inicializovan√Ω: ${PDF_GENERATOR_TYPE.toUpperCase()}`);

// Custom font PDF-lib gener√°tor (najlep≈°√≠ pre vlastn√Ω font)
const getCustomFontGenerator = (fontName: string = 'vas-font') => {
  try {
    console.log(`‚úÖ Custom Font PDF gener√°tor naƒç√≠tan√Ω (${fontName})`);
    return new PDFLibCustomFontGenerator(fontName);
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ Custom Font gener√°tora:', error);
    throw error;
  }
};

// PDF-lib gener√°tor (nov√Ω default)
const getPDFLibGenerator = () => {
  try {
    console.log('‚úÖ PDF-lib PDF gener√°tor naƒç√≠tan√Ω');
    return new PDFLibGenerator();
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ PDF-lib gener√°tora:', error);
    throw error;
  }
};

// Puppeteer PDF gener√°tor
const getPuppeteerGenerator = () => {
  try {
    console.log('‚úÖ Puppeteer PDF gener√°tor naƒç√≠tan√Ω');
    return new PuppeteerPDFGeneratorV2();
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ Puppeteer gener√°tora:', error);
    throw error;
  }
};

// Enhanced PDF gener√°tor (fallback)
const getEnhancedGenerator = () => {
  try {
    console.log('‚úÖ Enhanced PDF gener√°tor naƒç√≠tan√Ω (fallback)');
    return new EnhancedPDFGeneratorBackend();
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ Enhanced gener√°tora:', error);
    throw new Error('PDF gener√°tor nie je dostupn√Ω');
  }
};

/**
 * üéØ HLAVN√Å FUNKCIA - Generovanie handover PDF
 * Automaticky vyberie najlep≈°√≠ dostupn√Ω gener√°tor s fallback strat√©giou
 */
export const generateHandoverPDF = async (protocolData: HandoverProtocol): Promise<Buffer> => {
  console.log(`üé≠ Generujem handover PDF pomocou ${PDF_GENERATOR_TYPE.toUpperCase()} gener√°tora...`);
  console.log('üìã Protocol data preview:', {
    id: protocolData.id,
    location: protocolData.location,
    vehicleImages: protocolData.vehicleImages?.length || 0,
    damages: protocolData.damages?.length || 0
  });

  try {
    if (PDF_GENERATOR_TYPE === 'custom-font') {
      // üé® CUSTOM FONT - najlep≈°ie pre vlastn√Ω font s plnou diakritiku
      try {
        const fontName = process.env.CUSTOM_FONT_NAME || 'aeonik';
        const generator = getCustomFontGenerator(fontName);
        const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
        console.log(`‚úÖ Custom Font PDF vygenerovan√© (${fontName}), veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      } catch (customFontError) {
        console.error('‚ùå Custom Font zlyhal, fallback na PDF-lib:', customFontError);
        // Fallback na PDF-lib
        try {
          const generator = getPDFLibGenerator();
          const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
          console.log(`‚úÖ Fallback PDF-lib PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
          return pdfBuffer;
        } catch (pdfLibError) {
          console.error('‚ùå PDF-lib tie≈æ zlyhal, fallback na Enhanced:', pdfLibError);
          const enhancedGenerator = getEnhancedGenerator();
          const pdfBuffer = await enhancedGenerator.generateHandoverProtocol(protocolData);
          console.log(`‚úÖ Fallback Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
          return pdfBuffer;
        }
      }
    } else if (PDF_GENERATOR_TYPE === 'pdf-lib') {
      // üé® PDF-LIB - vysok√° kvalita bez dependencies
      try {
        const generator = getPDFLibGenerator();
        const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
        console.log(`‚úÖ PDF-lib PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      } catch (pdfLibError) {
        console.error('‚ùå PDF-lib zlyhal, fallback na Enhanced:', pdfLibError);
        // Fallback na Enhanced
        const enhancedGenerator = getEnhancedGenerator();
        const pdfBuffer = await enhancedGenerator.generateHandoverProtocol(protocolData);
        console.log(`‚úÖ Fallback Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      }
    } else if (PDF_GENERATOR_TYPE === 'puppeteer') {
      // üé≠ PUPPETEER - najlep≈°ia kvalita ale Railway probl√©my
      try {
        const generator = getPuppeteerGenerator();
        const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
        console.log(`‚úÖ Puppeteer PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      } catch (puppeteerError) {
        console.error('‚ùå Puppeteer zlyhal, fallback na Enhanced:', puppeteerError);
        // Fallback na Enhanced
        const enhancedGenerator = getEnhancedGenerator();
        const pdfBuffer = await enhancedGenerator.generateHandoverProtocol(protocolData);
        console.log(`‚úÖ Fallback Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      }
    } else {
      // Enhanced gener√°tor
      const generator = getEnhancedGenerator();
      const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
      console.log(`‚úÖ Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
      return pdfBuffer;
    }
  } catch (error) {
    console.error('‚ùå PDF generovanie zlyhalo:', error);
    throw new Error(`PDF generovanie zlyhalo: ${error instanceof Error ? error.message : 'Nezn√°ma chyba'}`);
  }
};

/**
 * üéØ HLAVN√Å FUNKCIA - Generovanie return PDF
 */
export const generateReturnPDF = async (protocolData: ReturnProtocol): Promise<Buffer> => {
  console.log(`üé≠ Generujem return PDF pomocou ${PDF_GENERATOR_TYPE.toUpperCase()} gener√°tora...`);
  console.log('üìã Protocol data preview:', {
    id: protocolData.id,
    location: protocolData.location,
    finalRefund: protocolData.finalRefund
  });

  try {
    if (PDF_GENERATOR_TYPE === 'custom-font') {
      // üé® CUSTOM FONT - najlep≈°ie pre vlastn√Ω font s plnou diakritiku
      try {
        const fontName = process.env.CUSTOM_FONT_NAME || 'aeonik';
        const generator = getCustomFontGenerator(fontName);
        const pdfBuffer = await generator.generateReturnProtocol(protocolData);
        console.log(`‚úÖ Custom Font return PDF vygenerovan√© (${fontName}), veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      } catch (customFontError) {
        console.error('‚ùå Custom Font zlyhal, fallback na PDF-lib:', customFontError);
        // Fallback na PDF-lib
        try {
          const generator = getPDFLibGenerator();
          const pdfBuffer = await generator.generateReturnProtocol(protocolData);
          console.log(`‚úÖ Fallback PDF-lib return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
          return pdfBuffer;
        } catch (pdfLibError) {
          console.error('‚ùå PDF-lib tie≈æ zlyhal, fallback na Enhanced:', pdfLibError);
          const enhancedGenerator = getEnhancedGenerator();
          const pdfBuffer = await enhancedGenerator.generateReturnProtocol(protocolData);  
          console.log(`‚úÖ Fallback Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
          return pdfBuffer;
        }
      }
    } else if (PDF_GENERATOR_TYPE === 'pdf-lib') {
      // üé® PDF-LIB - vysok√° kvalita bez dependencies
      try {
        const generator = getPDFLibGenerator();
        const pdfBuffer = await generator.generateReturnProtocol(protocolData);
        console.log(`‚úÖ PDF-lib return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      } catch (pdfLibError) {
        console.error('‚ùå PDF-lib zlyhal, fallback na Enhanced:', pdfLibError);
        // Fallback na Enhanced
        const enhancedGenerator = getEnhancedGenerator();
        const pdfBuffer = await enhancedGenerator.generateReturnProtocol(protocolData);
        console.log(`‚úÖ Fallback Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      }
    } else if (PDF_GENERATOR_TYPE === 'puppeteer') {
      // üé≠ PUPPETEER - najlep≈°ia kvalita ale Railway probl√©my
      try {
        const generator = getPuppeteerGenerator();
        const pdfBuffer = await generator.generateReturnProtocol(protocolData);
        console.log(`‚úÖ Puppeteer return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      } catch (puppeteerError) {
        console.error('‚ùå Puppeteer zlyhal, fallback na Enhanced:', puppeteerError);
        // Fallback na Enhanced
        const enhancedGenerator = getEnhancedGenerator();
        const pdfBuffer = await enhancedGenerator.generateReturnProtocol(protocolData);
        console.log(`‚úÖ Fallback Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
        return pdfBuffer;
      }
    } else {
      // Enhanced gener√°tor
      const generator = getEnhancedGenerator();
      const pdfBuffer = await generator.generateReturnProtocol(protocolData);
      console.log(`‚úÖ Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
      return pdfBuffer;
    }
  } catch (error) {
    console.error('‚ùå Return PDF generovanie zlyhalo:', error);
    throw new Error(`Return PDF generovanie zlyhalo: ${error instanceof Error ? error.message : 'Nezn√°ma chyba'}`);
  }
}; 