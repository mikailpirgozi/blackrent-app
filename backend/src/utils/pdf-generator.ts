import PDFDocument from 'pdfkit';
import { HandoverProtocol, ReturnProtocol } from '../types';
import { EnhancedPDFGeneratorBackend } from './enhanced-pdf-generator-backend';

// üîÑ PREP√çNAƒå PDF GENER√ÅTORA:
// 'legacy' = star√Ω pdfkit generator
// 'enhanced' = enhanced jsPDF generator (najlep≈°√≠ dostupn√Ω)

// üéØ Enhanced ako default (269KB+ kvalitn√© PDFs)
const PDF_GENERATOR_TYPE: 'enhanced' | 'legacy' = 
  (process.env.PDF_GENERATOR_TYPE as 'enhanced' | 'legacy') || 'enhanced';

console.log(`üéØ PDF Generator inicializovan√Ω: ${PDF_GENERATOR_TYPE.toUpperCase()}`);

// Enhanced PDF gener√°tor
const getEnhancedGenerator = () => {
  try {
    console.log('‚úÖ Enhanced PDF gener√°tor naƒç√≠tan√Ω');
    return new EnhancedPDFGeneratorBackend();
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ Enhanced gener√°tora:', error);
    throw new Error('PDF gener√°tor nie je dostupn√Ω');
  }
};

/**
 * üéØ HLAVN√Å FUNKCIA - Generovanie handover PDF
 * Automaticky vyberie najlep≈°√≠ dostupn√Ω gener√°tor
 */
export const generateHandoverPDF = async (protocolData: HandoverProtocol): Promise<Buffer> => {
  console.log(`üé≠ Generujem handover PDF pomocou ${PDF_GENERATOR_TYPE.toUpperCase()} gener√°tora...`);
  console.log('üìã Protocol data preview:', {
    id: protocolData.id,
    location: protocolData.location,
    vehicleImages: protocolData.vehicleImages?.length || 0,
    damages: protocolData.damages?.length || 0
  });

  try {
    if (PDF_GENERATOR_TYPE === 'enhanced') {
      const generator = getEnhancedGenerator();
      const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
      console.log(`‚úÖ Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
      return pdfBuffer;
    } else {
      // Legacy fallback - pou≈æije Enhanced ako fallback
      const generator = getEnhancedGenerator();
      const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
      console.log(`‚úÖ Fallback Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);  
      return pdfBuffer;
    }
  } catch (error) {
    console.error('‚ùå PDF generovanie zlyhalo:', error);
    throw new Error(`PDF generovanie zlyhalo: ${error instanceof Error ? error.message : 'Nezn√°ma chyba'}`);
  }
};

/**
 * üéØ HLAVN√Å FUNKCIA - Generovanie return PDF
 */
export const generateReturnPDF = async (protocolData: ReturnProtocol): Promise<Buffer> => {
  console.log(`üé≠ Generujem return PDF pomocou ${PDF_GENERATOR_TYPE.toUpperCase()} gener√°tora...`);
  console.log('üìã Protocol data preview:', {
    id: protocolData.id,
    location: protocolData.location,
    finalRefund: protocolData.finalRefund
  });

  try {
    if (PDF_GENERATOR_TYPE === 'enhanced') {
      const generator = getEnhancedGenerator();
      const pdfBuffer = await generator.generateReturnProtocol(protocolData);
      console.log(`‚úÖ Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
      return pdfBuffer;
    } else {
      // Legacy fallback - pou≈æije Enhanced ako fallback
      const generator = getEnhancedGenerator();
      const pdfBuffer = await generator.generateReturnProtocol(protocolData);
      console.log(`‚úÖ Fallback Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
      return pdfBuffer;
    }
  } catch (error) {
    console.error('‚ùå Return PDF generovanie zlyhalo:', error);
    throw new Error(`Return PDF generovanie zlyhalo: ${error instanceof Error ? error.message : 'Nezn√°ma chyba'}`);
  }
}; 