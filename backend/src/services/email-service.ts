import nodemailer from 'nodemailer';
import type { Customer, HandoverProtocol, ReturnProtocol } from '../types';

interface EmailTemplate {
  subject: string;
  html: string;
  text: string;
}

interface ProtocolEmailData {
  customer: Customer;
  protocol: HandoverProtocol | ReturnProtocol;
  vehicleInfo: {
    brand?: string;
    model?: string;
    licensePlate?: string;
  };
  rentalInfo: {
    orderNumber?: string;
    startDate?: Date;
    endDate?: Date;
    location?: string;
    totalPrice?: number;
    deposit?: number;
  };
}

class EmailService {
  private transporter: nodemailer.Transporter | null = null;
  private isEnabled: boolean;

  constructor() {
    // Kontrola ƒçi je email odosielanie povolen√©
    this.isEnabled = process.env.EMAIL_SEND_PROTOCOLS === 'true' && !!process.env.SMTP_PASS;
    
    if (!this.isEnabled) {
      console.log('üìß EMAIL: Slu≈æba je vypnut√° (EMAIL_SEND_PROTOCOLS=false alebo ch√Ωba SMTP_PASS)');
      return;
    }

    // Vytvorenie SMTP transportera pre Websupport
    const smtpPort = parseInt(process.env.SMTP_PORT || '465');
    const isSecure = process.env.SMTP_SECURE === 'true' || smtpPort === 465;
    
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.m1.websupport.sk',
      port: smtpPort,
      secure: isSecure, // true for 465, false for other ports
      auth: {
        user: process.env.SMTP_USER || 'info@blackrent.sk',
        pass: process.env.SMTP_PASS
      },
      tls: {
        rejectUnauthorized: false // Websupport sometimes has certificate issues
      }
    });

    console.log('üìß EMAIL: Service inicializovan√Ω pre', process.env.SMTP_USER || 'info@blackrent.sk');
  }

  /**
   * Test SMTP pripojenia
   */
  async testConnection(): Promise<boolean> {
    if (!this.isEnabled || !this.transporter) {
      console.log('üìß EMAIL: Slu≈æba je vypnut√°, test pripojenia preskoƒçen√Ω');
      return false;
    }

    try {
      await this.transporter.verify();
      console.log('‚úÖ EMAIL: SMTP pripojenie √∫spe≈°n√©');
      return true;
    } catch (error) {
      console.error('‚ùå EMAIL: SMTP pripojenie ne√∫spe≈°n√©:', error);
      return false;
    }
  }

  /**
   * Odoslanie odovzd√°vacieho protokolu emailom
   */
  async sendHandoverProtocolEmail(
    customer: Customer, 
    pdfBuffer: Buffer, 
    protocolData: HandoverProtocol
  ): Promise<boolean> {
    if (!this.isEnabled || !this.transporter) {
      console.log('üìß EMAIL: Slu≈æba je vypnut√°, email sa neodo≈°le');
      return false;
    }

    if (!customer.email || !customer.email.trim()) {
      console.log('‚ö†Ô∏è EMAIL: Z√°kazn√≠k nem√° email adresu, preskakujem odosielanie');
      return false;
    }

    try {
      const emailData: ProtocolEmailData = {
        customer,
        protocol: protocolData,
        vehicleInfo: {
          brand: protocolData.rentalData?.vehicle?.brand,
          model: protocolData.rentalData?.vehicle?.model,
          licensePlate: protocolData.rentalData?.vehicle?.licensePlate
        },
        rentalInfo: {
          orderNumber: protocolData.rentalData?.orderNumber,
          startDate: protocolData.rentalData?.startDate,
          endDate: protocolData.rentalData?.endDate,
          location: protocolData.location,
          totalPrice: protocolData.rentalData?.totalPrice,
          deposit: protocolData.rentalData?.deposit
        }
      };

      const template = this.generateHandoverEmailTemplate(emailData);
      
      // Vytvorenie PDF filename
      const pdfFilename = this.generatePDFFilename('handover', emailData);

      const mailOptions = {
        from: {
          name: process.env.SMTP_FROM_NAME || 'BlackRent System',
          address: process.env.SMTP_USER || 'info@blackrent.sk'
        },
        to: customer.email,
        cc: 'objednavky@blackrent.sk', // ‚úÖ Automatick√° k√≥pia pre BlackRent
        subject: template.subject,
        text: template.text,
        html: template.html,
        attachments: [
          {
            filename: pdfFilename,
            content: pdfBuffer,
            contentType: 'application/pdf'
          }
        ]
      };

      console.log(`üìß EMAIL: Odosielam odovzd√°vac√≠ protokol pre ${customer.name} na ${customer.email}`);
      
      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('‚úÖ EMAIL: Odovzd√°vac√≠ protokol √∫spe≈°ne odoslan√Ω:', result.messageId);
      return true;

    } catch (error) {
      console.error('‚ùå EMAIL: Chyba pri odosielan√≠ odovzd√°vacieho protokolu:', error);
      return false;
    }
  }

  /**
   * Odoslanie preberacieho protokolu emailom
   */
  async sendReturnProtocolEmail(
    customer: Customer, 
    pdfBuffer: Buffer, 
    protocolData: ReturnProtocol
  ): Promise<boolean> {
    if (!this.isEnabled || !this.transporter) {
      console.log('üìß EMAIL: Slu≈æba je vypnut√°, email sa neodo≈°le');
      return false;
    }

    if (!customer.email || !customer.email.trim()) {
      console.log('‚ö†Ô∏è EMAIL: Z√°kazn√≠k nem√° email adresu, preskakujem odosielanie');
      return false;
    }

    try {
      const emailData: ProtocolEmailData = {
        customer,
        protocol: protocolData,
        vehicleInfo: {
          brand: protocolData.rentalData?.vehicle?.brand,
          model: protocolData.rentalData?.vehicle?.model,
          licensePlate: protocolData.rentalData?.vehicle?.licensePlate
        },
        rentalInfo: {
          orderNumber: protocolData.rentalData?.orderNumber,
          startDate: protocolData.rentalData?.startDate,
          endDate: protocolData.rentalData?.endDate,
          location: protocolData.location,
          totalPrice: protocolData.rentalData?.totalPrice,
          deposit: protocolData.rentalData?.deposit
        }
      };

      const template = this.generateReturnEmailTemplate(emailData);
      
      // Vytvorenie PDF filename
      const pdfFilename = this.generatePDFFilename('return', emailData);

      const mailOptions = {
        from: {
          name: process.env.SMTP_FROM_NAME || 'BlackRent System',
          address: process.env.SMTP_USER || 'info@blackrent.sk'
        },
        to: customer.email,
        cc: 'objednavky@blackrent.sk', // ‚úÖ Automatick√° k√≥pia pre BlackRent
        subject: template.subject,
        text: template.text,
        html: template.html,
        attachments: [
          {
            filename: pdfFilename,
            content: pdfBuffer,
            contentType: 'application/pdf'
          }
        ]
      };

      console.log(`üìß EMAIL: Odosielam preberac√≠ protokol pre ${customer.name} na ${customer.email}`);
      
      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('‚úÖ EMAIL: Preberac√≠ protokol √∫spe≈°ne odoslan√Ω:', result.messageId);
      return true;

    } catch (error) {
      console.error('‚ùå EMAIL: Chyba pri odosielan√≠ preberacieho protokolu:', error);
      return false;
    }
  }

  /**
   * Generovanie HTML ≈°abl√≥ny pre odovzd√°vac√≠ protokol
   */
  private generateHandoverEmailTemplate(data: ProtocolEmailData): EmailTemplate {
    const { customer, vehicleInfo, rentalInfo } = data;
    const vehicleName = `${vehicleInfo.brand || 'Vozidlo'} ${vehicleInfo.model || ''}`.trim();
    const formattedDate = rentalInfo.startDate ? new Date(rentalInfo.startDate).toLocaleDateString('sk-SK') : 'neuveden√Ω';
    const formattedPrice = rentalInfo.totalPrice ? `${rentalInfo.totalPrice.toFixed(2)} ‚Ç¨` : 'neuveden√°';
    const formattedDeposit = rentalInfo.deposit ? `${rentalInfo.deposit.toFixed(2)} ‚Ç¨` : 'neuveden√Ω';

    const subject = `üöó Odovzd√°vac√≠ protokol - ${vehicleInfo.licensePlate || vehicleName}`;

    const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Odovzd√°vac√≠ protokol</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #2c5aa0; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
        .content { background-color: #f9f9f9; padding: 20px; border: 1px solid #ddd; }
        .footer { background-color: #333; color: white; padding: 15px; text-align: center; border-radius: 0 0 8px 8px; font-size: 12px; }
        .detail-row { margin: 10px 0; padding: 8px; background-color: white; border-radius: 4px; }
        .label { font-weight: bold; color: #2c5aa0; }
        .highlight { background-color: #e8f4fd; padding: 15px; border-radius: 6px; margin: 15px 0; }
        .icon { font-size: 18px; margin-right: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><span class="icon">üöó</span>Odovzd√°vac√≠ protokol</h1>
            <p>BlackRent - Pren√°jom vozidiel</p>
        </div>
        
        <div class="content">
            <p>V√°≈æen√Ω/√° <strong>${customer.name}</strong>,</p>
            
            <p>v pr√≠lohe n√°jdete odovzd√°vac√≠ protokol pre vozidlo <strong>${vehicleName}</strong>.</p>
            
            <div class="highlight">
                <h3><span class="icon">üìã</span>Detaily pren√°jmu:</h3>
                
                <div class="detail-row">
                    <span class="label">ƒå√≠slo objedn√°vky:</span> ${rentalInfo.orderNumber || 'neuveden√©'}
                </div>
                
                <div class="detail-row">
                    <span class="label">Vozidlo:</span> ${vehicleName} (${vehicleInfo.licensePlate || 'neuveden√° ≈†PZ'})
                </div>
                
                <div class="detail-row">
                    <span class="label">D√°tum prevzatia:</span> ${formattedDate}
                </div>
                
                <div class="detail-row">
                    <span class="label">Miesto prevzatia:</span> ${rentalInfo.location || 'neuveden√©'}
                </div>
                
                <div class="detail-row">
                    <span class="label">Celkov√° cena:</span> ${formattedPrice}
                </div>
                
                <div class="detail-row">
                    <span class="label">Depozit:</span> ${formattedDeposit}
                </div>
            </div>
            
            <p><strong>üìé Pr√≠loha:</strong> Odovzd√°vac√≠ protokol v PDF form√°te</p>
            
            <p>Protokol obsahuje v≈°etky d√¥le≈æit√© inform√°cie o stave vozidla pri prevzat√≠, fotodokument√°ciu a podpisy oboch str√°n.</p>
            
            <p><strong>D√¥le≈æit√© upozornenie:</strong><br>
            Uschovajte si tento protokol a≈æ do vr√°tenia vozidla. Bude potrebn√Ω pri vytv√°ran√≠ preberacieho protokolu.</p>
            
            <p>V pr√≠pade ak√Ωchkoƒævek ot√°zok n√°s nev√°hajte kontaktova≈•.</p>
            
            <p>S pozdravom,<br>
            <strong>BlackRent Team</strong></p>
        </div>
        
        <div class="footer">
            <p>BlackRent - Pren√°jom vozidiel</p>
            <p>üìß info@blackrent.sk | üì± +421 xxx xxx xxx</p>
            <p>Tento email bol odoslan√Ω automaticky syst√©mom BlackRent.</p>
        </div>
    </div>
</body>
</html>`;

    const text = `
Odovzd√°vac√≠ protokol - ${vehicleInfo.licensePlate || vehicleName}

V√°≈æen√Ω/√° ${customer.name},

v pr√≠lohe n√°jdete odovzd√°vac√≠ protokol pre vozidlo ${vehicleName}.

Detaily pren√°jmu:
- ƒå√≠slo objedn√°vky: ${rentalInfo.orderNumber || 'neuveden√©'}
- Vozidlo: ${vehicleName} (${vehicleInfo.licensePlate || 'neuveden√° ≈†PZ'})
- D√°tum prevzatia: ${formattedDate}
- Miesto prevzatia: ${rentalInfo.location || 'neuveden√©'}
- Celkov√° cena: ${formattedPrice}
- Depozit: ${formattedDeposit}

Protokol obsahuje v≈°etky d√¥le≈æit√© inform√°cie o stave vozidla pri prevzat√≠, fotodokument√°ciu a podpisy oboch str√°n.

D√¥le≈æit√©: Uschovajte si tento protokol a≈æ do vr√°tenia vozidla. Bude potrebn√Ω pri vytv√°ran√≠ preberacieho protokolu.

V pr√≠pade ak√Ωchkoƒævek ot√°zok n√°s nev√°hajte kontaktova≈•.

S pozdravom,
BlackRent Team

---
BlackRent - Pren√°jom vozidiel
info@blackrent.sk | +421 xxx xxx xxx
`;

    return { subject, html, text };
  }

  /**
   * Generovanie HTML ≈°abl√≥ny pre preberac√≠ protokol
   */
  private generateReturnEmailTemplate(data: ProtocolEmailData): EmailTemplate {
    const { customer, vehicleInfo, rentalInfo, protocol } = data;
    const vehicleName = `${vehicleInfo.brand || 'Vozidlo'} ${vehicleInfo.model || ''}`.trim();
    const formattedDate = rentalInfo.endDate ? new Date(rentalInfo.endDate).toLocaleDateString('sk-SK') : 'neuveden√Ω';
    const formattedPrice = rentalInfo.totalPrice ? `${rentalInfo.totalPrice.toFixed(2)} ‚Ç¨` : 'neuveden√°';
    
    // Pre return protokol m√¥≈æeme zobrazi≈• aj finanƒçn√© z√∫ƒçtovanie
    const returnProtocol = protocol as ReturnProtocol;
    const hasFinancialInfo = returnProtocol.finalRefund !== undefined;
    const finalRefund = hasFinancialInfo ? `${returnProtocol.finalRefund.toFixed(2)} ‚Ç¨` : 'neuveden√Ω';
    const extraFees = hasFinancialInfo ? `${returnProtocol.totalExtraFees.toFixed(2)} ‚Ç¨` : 'neuveden√©';

    const subject = `‚úÖ Preberac√≠ protokol - ${vehicleInfo.licensePlate || vehicleName}`;

    const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Preberac√≠ protokol</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #28a745; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
        .content { background-color: #f9f9f9; padding: 20px; border: 1px solid #ddd; }
        .footer { background-color: #333; color: white; padding: 15px; text-align: center; border-radius: 0 0 8px 8px; font-size: 12px; }
        .detail-row { margin: 10px 0; padding: 8px; background-color: white; border-radius: 4px; }
        .label { font-weight: bold; color: #28a745; }
        .highlight { background-color: #e8f5e8; padding: 15px; border-radius: 6px; margin: 15px 0; }
        .financial { background-color: #fff3cd; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #ffc107; }
        .icon { font-size: 18px; margin-right: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><span class="icon">‚úÖ</span>Preberac√≠ protokol</h1>
            <p>BlackRent - Pren√°jom vozidiel</p>
        </div>
        
        <div class="content">
            <p>V√°≈æen√Ω/√° <strong>${customer.name}</strong>,</p>
            
            <p>v pr√≠lohe n√°jdete preberac√≠ protokol pre vozidlo <strong>${vehicleName}</strong>.</p>
            
            <div class="highlight">
                <h3><span class="icon">üìã</span>Detaily pren√°jmu:</h3>
                
                <div class="detail-row">
                    <span class="label">ƒå√≠slo objedn√°vky:</span> ${rentalInfo.orderNumber || 'neuveden√©'}
                </div>
                
                <div class="detail-row">
                    <span class="label">Vozidlo:</span> ${vehicleName} (${vehicleInfo.licensePlate || 'neuveden√° ≈†PZ'})
                </div>
                
                <div class="detail-row">
                    <span class="label">D√°tum vr√°tenia:</span> ${formattedDate}
                </div>
                
                <div class="detail-row">
                    <span class="label">Miesto vr√°tenia:</span> ${rentalInfo.location || 'neuveden√©'}
                </div>
            </div>
            
            ${hasFinancialInfo ? `
            <div class="financial">
                <h3><span class="icon">üí∞</span>Finanƒçn√© z√∫ƒçtovanie:</h3>
                
                <div class="detail-row">
                    <span class="label">Dodatoƒçn√© poplatky:</span> ${extraFees}
                </div>
                
                <div class="detail-row">
                    <span class="label">Fin√°lny refund:</span> <strong>${finalRefund}</strong>
                </div>
            </div>
            ` : ''}
            
            <p><strong>üìé Pr√≠loha:</strong> Preberac√≠ protokol v PDF form√°te</p>
            
            <p>Protokol obsahuje v≈°etky d√¥le≈æit√© inform√°cie o stave vozidla pri vr√°ten√≠, fotodokument√°ciu, finanƒçn√© z√∫ƒçtovanie a podpisy oboch str√°n.</p>
            
            <p><strong>ƒéakujeme za vyu≈æitie na≈°ich slu≈æieb!</strong><br>
            Te≈°√≠me sa na Va≈°u ƒèal≈°iu n√°v≈°tevu.</p>
            
            <p>V pr√≠pade ak√Ωchkoƒævek ot√°zok n√°s nev√°hajte kontaktova≈•.</p>
            
            <p>S pozdravom,<br>
            <strong>BlackRent Team</strong></p>
        </div>
        
        <div class="footer">
            <p>BlackRent - Pren√°jom vozidiel</p>
            <p>üìß info@blackrent.sk | üì± +421 xxx xxx xxx</p>
            <p>Tento email bol odoslan√Ω automaticky syst√©mom BlackRent.</p>
        </div>
    </div>
</body>
</html>`;

    const text = `
Preberac√≠ protokol - ${vehicleInfo.licensePlate || vehicleName}

V√°≈æen√Ω/√° ${customer.name},

v pr√≠lohe n√°jdete preberac√≠ protokol pre vozidlo ${vehicleName}.

Detaily pren√°jmu:
- ƒå√≠slo objedn√°vky: ${rentalInfo.orderNumber || 'neuveden√©'}
- Vozidlo: ${vehicleName} (${vehicleInfo.licensePlate || 'neuveden√° ≈†PZ'})
- D√°tum vr√°tenia: ${formattedDate}
- Miesto vr√°tenia: ${rentalInfo.location || 'neuveden√©'}

${hasFinancialInfo ? `
Finanƒçn√© z√∫ƒçtovanie:
- Dodatoƒçn√© poplatky: ${extraFees}
- Fin√°lny refund: ${finalRefund}
` : ''}

Protokol obsahuje v≈°etky d√¥le≈æit√© inform√°cie o stave vozidla pri vr√°ten√≠, fotodokument√°ciu, finanƒçn√© z√∫ƒçtovanie a podpisy oboch str√°n.

ƒéakujeme za vyu≈æitie na≈°ich slu≈æieb! Te≈°√≠me sa na Va≈°u ƒèal≈°iu n√°v≈°tevu.

V pr√≠pade ak√Ωchkoƒævek ot√°zok n√°s nev√°hajte kontaktova≈•.

S pozdravom,
BlackRent Team

---
BlackRent - Pren√°jom vozidiel
info@blackrent.sk | +421 xxx xxx xxx
`;

    return { subject, html, text };
  }

  /**
   * Generovanie n√°zvu PDF s√∫boru
   */
  private generatePDFFilename(protocolType: 'handover' | 'return', data: ProtocolEmailData): string {
    const { vehicleInfo, rentalInfo } = data;
    const typeText = protocolType === 'handover' ? 'Odovzdavaci' : 'Preberaci';
    const licensePlate = vehicleInfo.licensePlate?.replace(/\s+/g, '') || 'Vozidlo';
    const orderNumber = rentalInfo.orderNumber?.replace(/\s+/g, '') || 'Objednavka';
    const date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    
    return `${typeText}_protokol_${licensePlate}_${orderNumber}_${date}.pdf`;
  }

  /**
   * üß™ TEST: Odoslanie testovacieho protokolu bez CC
   */
  async sendTestProtocolEmail(
    customer: Customer, 
    pdfBuffer: Buffer, 
    protocolData: HandoverProtocol
  ): Promise<boolean> {
    if (!this.isEnabled || !this.transporter) {
      console.log('üìß EMAIL: Slu≈æba je vypnut√°, email sa neodo≈°le');
      return false;
    }

    if (!customer.email || !customer.email.trim()) {
      console.log('‚ö†Ô∏è EMAIL: Z√°kazn√≠k nem√° email adresu, preskakujem odosielanie');
      return false;
    }

    try {
      const emailData: ProtocolEmailData = {
        customer,
        protocol: protocolData,
        vehicleInfo: {
          brand: protocolData.rentalData?.vehicle?.brand,
          model: protocolData.rentalData?.vehicle?.model,
          licensePlate: protocolData.rentalData?.vehicle?.licensePlate
        },
        rentalInfo: {
          orderNumber: protocolData.rentalData?.orderNumber,
          startDate: protocolData.rentalData?.startDate,
          endDate: protocolData.rentalData?.endDate,
          location: protocolData.location,
          totalPrice: protocolData.rentalData?.totalPrice,
          deposit: protocolData.rentalData?.deposit
        }
      };

      const template = this.generateHandoverEmailTemplate(emailData);
      
      // Vytvorenie PDF filename
      const pdfFilename = this.generatePDFFilename('handover', emailData);

      const mailOptions = {
        from: {
          name: process.env.SMTP_FROM_NAME || 'BlackRent System',
          address: process.env.SMTP_USER || 'info@blackrent.sk'
        },
        to: customer.email,
        // BEZ CC pre test
        subject: `üß™ TEST - ${template.subject}`,
        text: `üß™ TESTOVAC√ç EMAIL\n\n${template.text}`,
        html: `<div style="background: #fff3cd; padding: 10px; border: 1px solid #ffeaa7; margin-bottom: 20px;">
          <strong>üß™ TESTOVAC√ç EMAIL</strong><br>
          Toto je test email funkcionalite BlackRent syst√©mu.
        </div>${template.html}`,
        attachments: [
          {
            filename: `TEST-${pdfFilename}`,
            content: pdfBuffer,
            contentType: 'application/pdf'
          }
        ]
      };

      console.log(`üìß TEST EMAIL: Odosielam testovac√≠ protokol pre ${customer.name} na ${customer.email}`);
      
      const result = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ TEST EMAIL: √öspe≈°ne odoslan√Ω:', result.messageId);
      return true;
      
    } catch (error) {
      console.error('‚ùå TEST EMAIL: Chyba pri odosielan√≠:', error);
      return false;
    }
  }
}

// Singleton instance
export const emailService = new EmailService();
export default EmailService;

