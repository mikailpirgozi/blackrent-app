import type { FastifyInstance } from 'fastify';
import { authenticateFastify } from '../decorators/auth';
import { checkPermissionFastify } from '../hooks/permissions';
import { postgresDatabase } from '../../models/postgres-database';
import type { ExpenseCategory } from '../../types';

interface CategoryParams {
  id: string;
}

interface CategoryBody {
  name: string;
  displayName: string;
  description?: string;
  icon?: string;
  color?: string;
  sortOrder?: number;
}

export default async function expenseCategoriesRoutes(fastify: FastifyInstance) {
  
  // GET /api/expense-categories - Z√≠skanie v≈°etk√Ωch kateg√≥ri√≠ n√°kladov
  fastify.get('/api/expense-categories', {
    preHandler: [
      authenticateFastify,
      checkPermissionFastify('expenses', 'read')
    ]
  }, async (request, reply) => {
    try {
      const categories = await postgresDatabase.getExpenseCategories();
      
      fastify.log.info({
        msg: 'üìÇ Expense Categories GET',
        user: request.user?.username,
        categoriesCount: categories.length
      });
      
      return reply.send({
        success: true,
        data: categories
      });
    } catch (error) {
      fastify.log.error(error, 'Get expense categories error');
      return reply.status(500).send({
        success: false,
        error: 'Chyba pri z√≠skavan√≠ kateg√≥ri√≠ n√°kladov'
      });
    }
  });

  // POST /api/expense-categories - Vytvorenie novej kateg√≥rie
  fastify.post<{
    Body: CategoryBody;
  }>('/api/expense-categories', {
    preHandler: [
      authenticateFastify,
      checkPermissionFastify('expenses', 'create')
    ]
  }, async (request, reply) => {
    try {
      const { name, displayName, description, icon, color, sortOrder } = request.body;

      // Valid√°cia povinn√Ωch pol√≠
      if (!name || !name.trim()) {
        return reply.status(400).send({
          success: false,
          error: 'N√°zov kateg√≥rie je povinn√Ω'
        });
      }

      if (!displayName || !displayName.trim()) {
        return reply.status(400).send({
          success: false,
          error: 'Zobrazovan√Ω n√°zov kateg√≥rie je povinn√Ω'
        });
      }

      // Valid√°cia farby
      const validColors = ['primary', 'secondary', 'success', 'error', 'warning', 'info'];
      if (color && !validColors.includes(color)) {
        return reply.status(400).send({
          success: false,
          error: 'Neplatn√° farba kateg√≥rie'
        });
      }

      // Vytvorenie kateg√≥rie
      const categoryData = {
        name: name.trim().toLowerCase().replace(/\s+/g, '_'), // automatick√© form√°tovanie n√°zvu
        displayName: displayName.trim(),
        description: description?.trim() || undefined,
        icon: icon?.trim() || 'receipt',
        color: color || 'primary',
        sortOrder: sortOrder || 0,
        createdBy: request.user?.id
      };

      fastify.log.info({
        msg: 'üìÇ Creating expense category',
        categoryData
      });

      const createdCategory = await postgresDatabase.createExpenseCategory(categoryData);

      return reply.status(201).send({
        success: true,
        message: 'Kateg√≥ria n√°kladov √∫spe≈°ne vytvoren√°',
        data: createdCategory
      });

    } catch (error: unknown) {
      fastify.log.error(error, 'Create expense category error');
      
      // ≈†pecifick√© error handling pre unique constraint
      const err = error as { message?: string; code?: string };
      if (err.message?.includes('unique') || err.code === '23505') {
        return reply.status(400).send({
          success: false,
          error: 'Kateg√≥ria s t√Ωmto n√°zvom u≈æ existuje'
        });
      }

      return reply.status(500).send({
        success: false,
        error: 'Chyba pri vytv√°ran√≠ kateg√≥rie n√°kladov'
      });
    }
  });

  // PUT /api/expense-categories/:id - Aktualiz√°cia kateg√≥rie
  fastify.put<{
    Params: CategoryParams;
    Body: Partial<CategoryBody>;
  }>('/api/expense-categories/:id', {
    preHandler: [
      authenticateFastify,
      checkPermissionFastify('expenses', 'update')
    ]
  }, async (request, reply) => {
    try {
      const { id } = request.params;
      const { displayName, description, icon, color, sortOrder } = request.body;

      // Valid√°cia povinn√Ωch pol√≠
      if (!displayName || !displayName.trim()) {
        return reply.status(400).send({
          success: false,
          error: 'Zobrazovan√Ω n√°zov kateg√≥rie je povinn√Ω'
        });
      }

      // Valid√°cia farby
      const validColors = ['primary', 'secondary', 'success', 'error', 'warning', 'info'];
      if (color && !validColors.includes(color)) {
        return reply.status(400).send({
          success: false,
          error: 'Neplatn√° farba kateg√≥rie'
        });
      }

      // Z√≠skaj aktu√°lnu kateg√≥riu
      const categories = await postgresDatabase.getExpenseCategories();
      const existingCategory = categories.find(c => c.id === id);
      
      if (!existingCategory) {
        return reply.status(404).send({
          success: false,
          error: 'Kateg√≥ria nen√°jden√°'
        });
      }

      // Aktualiz√°cia kateg√≥rie
      const updatedCategory: ExpenseCategory = {
        ...existingCategory,
        displayName: displayName.trim(),
        description: description?.trim() || undefined,
        icon: icon?.trim() || existingCategory.icon,
        color: (color as ExpenseCategory['color']) || existingCategory.color,
        sortOrder: sortOrder !== undefined ? sortOrder : existingCategory.sortOrder,
        updatedAt: new Date()
      };

      await postgresDatabase.updateExpenseCategory(updatedCategory);

      fastify.log.info({
        msg: 'üìÇ Updated expense category',
        id,
        displayName
      });

      return reply.send({
        success: true,
        message: 'Kateg√≥ria n√°kladov √∫spe≈°ne aktualizovan√°',
        data: updatedCategory
      });

    } catch (error: unknown) {
      fastify.log.error(error, 'Update expense category error');
      return reply.status(500).send({
        success: false,
        error: 'Chyba pri aktualiz√°cii kateg√≥rie n√°kladov'
      });
    }
  });

  // DELETE /api/expense-categories/:id - Zmazanie kateg√≥rie
  fastify.delete<{
    Params: CategoryParams;
  }>('/api/expense-categories/:id', {
    preHandler: [
      authenticateFastify,
      checkPermissionFastify('expenses', 'delete')
    ]
  }, async (request, reply) => {
    try {
      const { id } = request.params;

      await postgresDatabase.deleteExpenseCategory(id);

      fastify.log.info({
        msg: 'üìÇ Deleted expense category',
        id,
        user: request.user?.username
      });

      return reply.send({
        success: true,
        message: 'Kateg√≥ria n√°kladov √∫spe≈°ne zmazan√°'
      });

    } catch (error: unknown) {
      fastify.log.error(error, 'Delete expense category error');
      
      const err = error as { message?: string };
      // ≈†pecifick√© error handling
      if (err.message?.includes('z√°kladn√∫ kateg√≥riu')) {
        return reply.status(400).send({
          success: false,
          error: 'Nemo≈æno zmaza≈• z√°kladn√∫ kateg√≥riu'
        });
      }
      
      if (err.message?.includes('pou≈æ√≠va v n√°kladoch')) {
        return reply.status(400).send({
          success: false,
          error: 'Nemo≈æno zmaza≈• kateg√≥riu ktor√° sa pou≈æ√≠va v existuj√∫cich n√°kladoch'
        });
      }

      return reply.status(500).send({
        success: false,
        error: 'Chyba pri mazan√≠ kateg√≥rie n√°kladov'
      });
    }
  });

  fastify.log.info('‚úÖ Expense categories routes registered');
}

