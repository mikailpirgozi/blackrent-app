"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReturnPDF = exports.generateHandoverPDF = void 0;
const enhanced_pdf_generator_backend_1 = require("./enhanced-pdf-generator-backend");
const puppeteer_pdf_generator_v2_1 = require("./puppeteer-pdf-generator-v2");
const pdf_lib_generator_1 = require("./pdf-lib-generator");
const pdf_lib_custom_font_generator_1 = require("./pdf-lib-custom-font-generator");
// üîÑ PREP√çNAƒå PDF GENER√ÅTORA:
// 'custom-font' = PDF-lib s vlastn√Ωm fontom (najlep≈°ie pre vlastn√Ω font)
// 'pdf-lib' = PDF-lib gener√°tor (nov√Ω, vysok√° kvalita, ≈æiadne system dependencies)
// 'puppeteer' = Puppeteer Chrome PDF gener√°tor (najlep≈°√≠ ale Railway probl√©my)
// 'enhanced' = enhanced jsPDF generator (fallback)
// üéØ PDF-lib ako najlep≈°ia voƒæba (bez system dependencies)
const PDF_GENERATOR_TYPE = process.env.PDF_GENERATOR_TYPE || 'pdf-lib';
console.log(`üéØ PDF Generator inicializovan√Ω: ${PDF_GENERATOR_TYPE.toUpperCase()}`);
// Custom font PDF-lib gener√°tor (najlep≈°√≠ pre vlastn√Ω font)
const getCustomFontGenerator = (fontName = 'sf-pro') => {
    try {
        console.log(`‚úÖ Custom Font PDF gener√°tor naƒç√≠tan√Ω (${fontName})`);
        return new pdf_lib_custom_font_generator_1.PDFLibCustomFontGenerator(fontName);
    }
    catch (error) {
        console.error('‚ùå Chyba pri naƒç√≠tan√≠ Custom Font gener√°tora:', error);
        throw error;
    }
};
// PDF-lib gener√°tor (nov√Ω default)
const getPDFLibGenerator = () => {
    try {
        console.log('‚úÖ PDF-lib PDF gener√°tor naƒç√≠tan√Ω');
        return new pdf_lib_generator_1.PDFLibGenerator();
    }
    catch (error) {
        console.error('‚ùå Chyba pri naƒç√≠tan√≠ PDF-lib gener√°tora:', error);
        throw error;
    }
};
// Puppeteer PDF gener√°tor
const getPuppeteerGenerator = () => {
    try {
        console.log('‚úÖ Puppeteer PDF gener√°tor naƒç√≠tan√Ω');
        return new puppeteer_pdf_generator_v2_1.PuppeteerPDFGeneratorV2();
    }
    catch (error) {
        console.error('‚ùå Chyba pri naƒç√≠tan√≠ Puppeteer gener√°tora:', error);
        throw error;
    }
};
// Enhanced PDF gener√°tor (fallback)
const getEnhancedGenerator = () => {
    try {
        console.log('‚úÖ Enhanced PDF gener√°tor naƒç√≠tan√Ω (fallback)');
        return new enhanced_pdf_generator_backend_1.EnhancedPDFGeneratorBackend();
    }
    catch (error) {
        console.error('‚ùå Chyba pri naƒç√≠tan√≠ Enhanced gener√°tora:', error);
        throw new Error('PDF gener√°tor nie je dostupn√Ω');
    }
};
/**
 * üéØ HLAVN√Å FUNKCIA - Generovanie handover PDF
 * Automaticky vyberie najlep≈°√≠ dostupn√Ω gener√°tor s fallback strat√©giou
 */
const generateHandoverPDF = async (protocolData) => {
    console.log(`üé≠ Generujem handover PDF pomocou ${PDF_GENERATOR_TYPE.toUpperCase()} gener√°tora...`);
    console.log('üìã Protocol data preview:', {
        id: protocolData.id,
        location: protocolData.location,
        vehicleImages: protocolData.vehicleImages?.length || 0,
        damages: protocolData.damages?.length || 0
    });
    try {
        if (PDF_GENERATOR_TYPE === 'custom-font') {
            // üé® CUSTOM FONT - najlep≈°ie pre vlastn√Ω font s plnou diakritiku
            try {
                const fontName = process.env.CUSTOM_FONT_NAME || 'sf-pro';
                const generator = getCustomFontGenerator(fontName);
                const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
                console.log(`‚úÖ Custom Font PDF vygenerovan√© (${fontName}), veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
            catch (customFontError) {
                console.error('‚ùå Custom Font zlyhal, fallback na PDF-lib:', customFontError);
                // Fallback na PDF-lib
                try {
                    const generator = getPDFLibGenerator();
                    const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
                    console.log(`‚úÖ Fallback PDF-lib PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                    return pdfBuffer;
                }
                catch (pdfLibError) {
                    console.error('‚ùå PDF-lib tie≈æ zlyhal, fallback na Enhanced:', pdfLibError);
                    const enhancedGenerator = getEnhancedGenerator();
                    const pdfBuffer = await enhancedGenerator.generateHandoverProtocol(protocolData);
                    console.log(`‚úÖ Fallback Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                    return pdfBuffer;
                }
            }
        }
        else if (PDF_GENERATOR_TYPE === 'pdf-lib') {
            // üé® PDF-LIB - vysok√° kvalita bez dependencies
            try {
                const generator = getPDFLibGenerator();
                const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
                console.log(`‚úÖ PDF-lib PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
            catch (pdfLibError) {
                console.error('‚ùå PDF-lib zlyhal, fallback na Enhanced:', pdfLibError);
                // Fallback na Enhanced
                const enhancedGenerator = getEnhancedGenerator();
                const pdfBuffer = await enhancedGenerator.generateHandoverProtocol(protocolData);
                console.log(`‚úÖ Fallback Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
        }
        else if (PDF_GENERATOR_TYPE === 'puppeteer') {
            // üé≠ PUPPETEER - najlep≈°ia kvalita ale Railway probl√©my
            try {
                const generator = getPuppeteerGenerator();
                const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
                console.log(`‚úÖ Puppeteer PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
            catch (puppeteerError) {
                console.error('‚ùå Puppeteer zlyhal, fallback na Enhanced:', puppeteerError);
                // Fallback na Enhanced
                const enhancedGenerator = getEnhancedGenerator();
                const pdfBuffer = await enhancedGenerator.generateHandoverProtocol(protocolData);
                console.log(`‚úÖ Fallback Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
        }
        else {
            // Enhanced gener√°tor
            const generator = getEnhancedGenerator();
            const pdfBuffer = await generator.generateHandoverProtocol(protocolData);
            console.log(`‚úÖ Enhanced PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
            return pdfBuffer;
        }
    }
    catch (error) {
        console.error('‚ùå PDF generovanie zlyhalo:', error);
        throw new Error(`PDF generovanie zlyhalo: ${error instanceof Error ? error.message : 'Nezn√°ma chyba'}`);
    }
};
exports.generateHandoverPDF = generateHandoverPDF;
/**
 * üéØ HLAVN√Å FUNKCIA - Generovanie return PDF
 */
const generateReturnPDF = async (protocolData) => {
    console.log(`üé≠ Generujem return PDF pomocou ${PDF_GENERATOR_TYPE.toUpperCase()} gener√°tora...`);
    console.log('üìã Protocol data preview:', {
        id: protocolData.id,
        location: protocolData.location,
        finalRefund: protocolData.finalRefund
    });
    try {
        if (PDF_GENERATOR_TYPE === 'custom-font') {
            // üé® CUSTOM FONT - najlep≈°ie pre vlastn√Ω font s plnou diakritiku
            try {
                const fontName = process.env.CUSTOM_FONT_NAME || 'sf-pro';
                const generator = getCustomFontGenerator(fontName);
                const pdfBuffer = await generator.generateReturnProtocol(protocolData);
                console.log(`‚úÖ Custom Font return PDF vygenerovan√© (${fontName}), veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
            catch (customFontError) {
                console.error('‚ùå Custom Font zlyhal, fallback na PDF-lib:', customFontError);
                // Fallback na PDF-lib
                try {
                    const generator = getPDFLibGenerator();
                    const pdfBuffer = await generator.generateReturnProtocol(protocolData);
                    console.log(`‚úÖ Fallback PDF-lib return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                    return pdfBuffer;
                }
                catch (pdfLibError) {
                    console.error('‚ùå PDF-lib tie≈æ zlyhal, fallback na Enhanced:', pdfLibError);
                    const enhancedGenerator = getEnhancedGenerator();
                    const pdfBuffer = await enhancedGenerator.generateReturnProtocol(protocolData);
                    console.log(`‚úÖ Fallback Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                    return pdfBuffer;
                }
            }
        }
        else if (PDF_GENERATOR_TYPE === 'pdf-lib') {
            // üé® PDF-LIB - vysok√° kvalita bez dependencies
            try {
                const generator = getPDFLibGenerator();
                const pdfBuffer = await generator.generateReturnProtocol(protocolData);
                console.log(`‚úÖ PDF-lib return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
            catch (pdfLibError) {
                console.error('‚ùå PDF-lib zlyhal, fallback na Enhanced:', pdfLibError);
                // Fallback na Enhanced
                const enhancedGenerator = getEnhancedGenerator();
                const pdfBuffer = await enhancedGenerator.generateReturnProtocol(protocolData);
                console.log(`‚úÖ Fallback Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
        }
        else if (PDF_GENERATOR_TYPE === 'puppeteer') {
            // üé≠ PUPPETEER - najlep≈°ia kvalita ale Railway probl√©my
            try {
                const generator = getPuppeteerGenerator();
                const pdfBuffer = await generator.generateReturnProtocol(protocolData);
                console.log(`‚úÖ Puppeteer return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
            catch (puppeteerError) {
                console.error('‚ùå Puppeteer zlyhal, fallback na Enhanced:', puppeteerError);
                // Fallback na Enhanced
                const enhancedGenerator = getEnhancedGenerator();
                const pdfBuffer = await enhancedGenerator.generateReturnProtocol(protocolData);
                console.log(`‚úÖ Fallback Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
                return pdfBuffer;
            }
        }
        else {
            // Enhanced gener√°tor
            const generator = getEnhancedGenerator();
            const pdfBuffer = await generator.generateReturnProtocol(protocolData);
            console.log(`‚úÖ Enhanced return PDF vygenerovan√©, veƒækos≈•: ${(pdfBuffer.length / 1024).toFixed(1)}KB`);
            return pdfBuffer;
        }
    }
    catch (error) {
        console.error('‚ùå Return PDF generovanie zlyhalo:', error);
        throw new Error(`Return PDF generovanie zlyhalo: ${error instanceof Error ? error.message : 'Nezn√°ma chyba'}`);
    }
};
exports.generateReturnPDF = generateReturnPDF;
//# sourceMappingURL=pdf-generator.js.map