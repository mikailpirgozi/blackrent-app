import { Pool, PoolClient } from 'pg';
import { Vehicle, Customer, Rental, Expense, ExpenseCategory, RecurringExpense, Insurance, User, Company, Insurer, Settlement, VehicleDocument, InsuranceClaim, UserPermission, UserCompanyAccess, CompanyPermissions, CompanyInvestor, CompanyInvestorShare, CompanyDocument } from '../types';
export declare class PostgresDatabase {
    private pool;
    get dbPool(): Pool;
    private permissionCache;
    private readonly PERMISSION_CACHE_TTL;
    private vehicleCache;
    private readonly VEHICLE_CACHE_TTL;
    private calendarConnection;
    private calendarConnectionLastUsed;
    private readonly CONNECTION_REUSE_TIMEOUT;
    private calendarCache;
    private readonly CALENDAR_CACHE_TTL;
    private unavailabilityCache;
    private readonly UNAVAILABILITY_CACHE_TTL;
    constructor();
    query(sql: string, params?: any[]): Promise<any>;
    private initTables;
    private runMigrations;
    private validateDataIntegrity;
    private createDefaultAdmin;
    private createSampleDataIfEmpty;
    getUserByUsername(username: string): Promise<User | null>;
    getUserById(id: string): Promise<User | null>;
    createUser(userData: {
        username: string;
        email: string;
        password: string;
        role: string;
        firstName?: string | null;
        lastName?: string | null;
        companyId?: string | null;
        employeeNumber?: string | null;
        hireDate?: Date | null;
        isActive?: boolean;
        signatureTemplate?: string | null;
        linkedInvestorId?: string | null;
    }): Promise<User>;
    updateUser(user: User): Promise<void>;
    deleteUser(id: string): Promise<void>;
    getUsers(): Promise<User[]>;
    getVehicles(includeRemoved?: boolean, includePrivate?: boolean): Promise<Vehicle[]>;
    private invalidateVehicleCache;
    private getReusableConnection;
    private releaseReusableConnection;
    private generateCacheKey;
    private isValidCacheEntry;
    private invalidateCalendarCache;
    private invalidateUnavailabilityCache;
    private cleanupExpiredCache;
    private optimizeCalendarDataStructure;
    private getVehiclesFresh;
    getVehicle(id: string): Promise<Vehicle | null>;
    createVehicle(vehicleData: {
        brand: string;
        model: string;
        licensePlate: string;
        vin?: string;
        company: string;
        pricing: any[];
        commission: any;
        status: string;
        year?: number;
    }): Promise<Vehicle>;
    updateVehicle(vehicle: Vehicle): Promise<void>;
    deleteVehicle(id: string): Promise<void>;
    getRentalsForDateRange(startDate: Date, endDate: Date): Promise<Rental[]>;
    getVehiclesPaginated(params: {
        limit: number;
        offset: number;
        search?: string;
        company?: string;
        brand?: string;
        category?: string;
        status?: string;
        yearMin?: string;
        yearMax?: string;
        priceMin?: string;
        priceMax?: string;
        userId?: string;
        userRole?: string;
    }): Promise<{
        vehicles: Vehicle[];
        total: number;
    }>;
    getCompaniesPaginated(params: {
        limit: number;
        offset: number;
        search?: string;
        city?: string;
        country?: string;
        status?: string;
        userId?: string;
        userRole?: string;
    }): Promise<{
        companies: Company[];
        total: number;
    }>;
    getUsersPaginated(params: {
        limit: number;
        offset: number;
        search?: string;
        role?: string;
        company?: string;
        status?: string;
        userId?: string;
        userRole?: string;
    }): Promise<{
        users: User[];
        total: number;
    }>;
    getCustomersPaginated(params: {
        limit: number;
        offset: number;
        search?: string;
        city?: string;
        country?: string;
        hasRentals?: string;
        userId?: string;
        userRole?: string;
    }): Promise<{
        customers: Customer[];
        total: number;
    }>;
    getRentalsPaginated(params: {
        limit: number;
        offset: number;
        search?: string;
        dateFilter?: string;
        dateFrom?: string;
        dateTo?: string;
        company?: string;
        status?: string;
        protocolStatus?: string;
        paymentMethod?: string;
        paymentStatus?: string;
        vehicleBrand?: string;
        priceMin?: string;
        priceMax?: string;
        userId?: string;
        userRole?: string;
    }): Promise<{
        rentals: Rental[];
        total: number;
    }>;
    private transformRowToRental;
    getRentals(): Promise<Rental[]>;
    private safeJsonParse;
    createRental(rentalData: {
        vehicleId?: string;
        customerId?: string;
        customerName: string;
        startDate: Date;
        endDate: Date;
        totalPrice: number;
        commission: number;
        paymentMethod: string;
        discount?: any;
        customCommission?: any;
        extraKmCharge?: number;
        paid?: boolean;
        status?: string;
        handoverPlace?: string;
        confirmed?: boolean;
        payments?: any;
        history?: any;
        orderNumber?: string;
        deposit?: number;
        allowedKilometers?: number;
        dailyKilometers?: number;
        extraKilometerRate?: number;
        returnConditions?: string;
        fuelLevel?: number;
        odometer?: number;
        returnFuelLevel?: number;
        returnOdometer?: number;
        actualKilometers?: number;
        fuelRefillCost?: number;
        handoverProtocolId?: string;
        returnProtocolId?: string;
        isFlexible?: boolean;
        flexibleEndDate?: Date;
        sourceType?: 'manual' | 'email_auto' | 'api_auto';
        approvalStatus?: 'pending' | 'approved' | 'rejected' | 'spam';
        emailContent?: string;
        autoProcessedAt?: Date;
        approvedBy?: string;
        approvedAt?: Date;
        rejectionReason?: string;
    }): Promise<Rental>;
    getRental(id: string): Promise<Rental | null>;
    updateRental(rental: Rental): Promise<void>;
    deleteRental(id: string): Promise<void>;
    getCustomers(): Promise<Customer[]>;
    createCustomer(customerData: {
        name: string;
        email: string;
        phone: string;
    }): Promise<Customer>;
    updateCustomer(customer: Customer): Promise<void>;
    deleteCustomer(id: string): Promise<void>;
    getExpenses(): Promise<Expense[]>;
    createExpense(expenseData: {
        description: string;
        amount: number;
        date: Date;
        vehicleId?: string;
        company: string;
        category: string;
        note?: string;
    }): Promise<Expense>;
    updateExpense(expense: Expense): Promise<void>;
    deleteExpense(id: string): Promise<void>;
    getExpenseCategories(): Promise<ExpenseCategory[]>;
    createExpenseCategory(categoryData: {
        name: string;
        displayName: string;
        description?: string;
        icon?: string;
        color?: string;
        sortOrder?: number;
        createdBy?: string;
    }): Promise<ExpenseCategory>;
    updateExpenseCategory(category: ExpenseCategory): Promise<void>;
    deleteExpenseCategory(id: string): Promise<void>;
    getRecurringExpenses(): Promise<RecurringExpense[]>;
    createRecurringExpense(recurringData: {
        name: string;
        description: string;
        amount: number;
        category: string;
        company: string;
        vehicleId?: string;
        note?: string;
        frequency: 'monthly' | 'quarterly' | 'yearly';
        startDate: Date;
        endDate?: Date;
        dayOfMonth: number;
        createdBy?: string;
    }): Promise<RecurringExpense>;
    updateRecurringExpense(recurring: RecurringExpense): Promise<void>;
    deleteRecurringExpense(id: string): Promise<void>;
    generateRecurringExpenses(targetDate?: Date): Promise<{
        generated: number;
        skipped: number;
        errors: string[];
    }>;
    triggerRecurringExpenseGeneration(recurringExpenseId: string, targetDate?: Date): Promise<string>;
    getInsurances(): Promise<Insurance[]>;
    createInsurance(insuranceData: {
        vehicleId?: string;
        rentalId?: number;
        insurerId?: number;
        type: string;
        policyNumber: string;
        validFrom: Date;
        validTo: Date;
        price: number;
        company?: string;
        paymentFrequency?: string;
        filePath?: string;
        filePaths?: string[];
        coverageAmount?: number;
        greenCardValidFrom?: Date;
        greenCardValidTo?: Date;
    }): Promise<Insurance>;
    updateInsurance(id: string, insuranceData: {
        vehicleId: string;
        type: string;
        policyNumber: string;
        validFrom: Date;
        validTo: Date;
        price: number;
        company: string;
        insurerId?: string;
        paymentFrequency?: string;
        filePath?: string;
        filePaths?: string[];
        greenCardValidFrom?: Date;
        greenCardValidTo?: Date;
    }): Promise<Insurance>;
    deleteInsurance(id: string): Promise<void>;
    getCompanies(): Promise<Company[]>;
    createCompany(companyData: {
        name: string;
        personalIban?: string;
        businessIban?: string;
        ownerName?: string;
        contactEmail?: string;
        contactPhone?: string;
        defaultCommissionRate?: number;
        isActive?: boolean;
    }): Promise<Company>;
    updateCompany(id: string, companyData: Partial<{
        name: string;
        personalIban: string;
        businessIban: string;
        ownerName: string;
        contactEmail: string;
        contactPhone: string;
        defaultCommissionRate: number;
        isActive: boolean;
        address: string;
        businessId: string;
        taxId: string;
        protocolDisplayName: string;
    }>): Promise<Company>;
    deleteCompany(id: string): Promise<void>;
    getCompanyInvestors(): Promise<CompanyInvestor[]>;
    createCompanyInvestor(investorData: {
        firstName: string;
        lastName: string;
        email?: string;
        phone?: string;
        personalId?: string;
        address?: string;
        notes?: string;
    }): Promise<CompanyInvestor>;
    updateCompanyInvestor(id: string, updateData: Partial<{
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        personalId: string;
        address: string;
        isActive: boolean;
        notes: string;
    }>): Promise<CompanyInvestor>;
    deleteCompanyInvestor(id: string): Promise<void>;
    getCompanyInvestorShares(companyId: string): Promise<CompanyInvestorShare[]>;
    createCompanyInvestorShare(shareData: {
        companyId: string;
        investorId: string;
        ownershipPercentage: number;
        investmentAmount?: number;
        isPrimaryContact: boolean;
        profitSharePercentage?: number;
    }): Promise<CompanyInvestorShare>;
    updateCompanyInvestorShare(id: string, updateData: Partial<{
        ownershipPercentage: number;
        investmentAmount: number;
        isPrimaryContact: boolean;
        profitSharePercentage: number;
    }>): Promise<CompanyInvestorShare>;
    deleteCompanyInvestorShare(id: string): Promise<void>;
    getInsurers(): Promise<Insurer[]>;
    createInsurer(insurerData: {
        name: string;
    }): Promise<Insurer>;
    deleteInsurer(id: string): Promise<void>;
    getSettlements(): Promise<Settlement[]>;
    getSettlement(id: string): Promise<Settlement | null>;
    createSettlement(settlementData: {
        company?: string;
        period?: string;
        fromDate?: Date;
        toDate?: Date;
        totalIncome?: number;
        totalExpenses?: number;
        commission?: number;
        profit?: number;
        summary?: string;
        rentals?: any[];
        expenses?: any[];
    }): Promise<Settlement>;
    updateSettlement(id: string, updateData: any): Promise<Settlement>;
    deleteSettlement(id: string): Promise<void>;
    private extractMediaData;
    private mapMediaObjectsFromDB;
    private getMediaTypeFromUrl;
    uploadProtocolFile(protocolId: string, file: Buffer, filename: string, contentType: string, mediaType?: 'vehicle-images' | 'document-images' | 'damage-images' | 'vehicle-videos'): Promise<string>;
    uploadProtocolPDF(protocolId: string, pdfBuffer: Buffer, protocolType?: 'handover' | 'return'): Promise<string>;
    initProtocolTables(): Promise<void>;
    createHandoverProtocol(protocolData: any): Promise<any>;
    getHandoverProtocolsByRental(rentalId: string): Promise<any[]>;
    getHandoverProtocolById(id: string): Promise<any | null>;
    createReturnProtocol(protocolData: any): Promise<any>;
    getReturnProtocolsByRental(rentalId: string): Promise<any[]>;
    getReturnProtocolById(id: string): Promise<any | null>;
    updateReturnProtocol(id: string, updateData: any): Promise<any>;
    private mapHandoverProtocolFromDB;
    private mapReturnProtocolFromDB;
    deleteHandoverProtocol(id: string): Promise<boolean>;
    deleteReturnProtocol(id: string): Promise<boolean>;
    getClient(): Promise<PoolClient>;
    close(): Promise<void>;
    updateHandoverProtocol(id: string, updateData: any): Promise<any>;
    getVehicleUnavailabilities(vehicleId?: string, startDate?: Date, endDate?: Date): Promise<any[]>;
    getVehicleUnavailability(id: string): Promise<any | null>;
    createVehicleUnavailability(data: {
        vehicleId: string;
        startDate: Date;
        endDate: Date;
        reason: string;
        type?: string;
        notes?: string;
        priority?: number;
        recurring?: boolean;
        recurringConfig?: any;
        createdBy?: string;
    }): Promise<any>;
    updateVehicleUnavailability(id: string, data: Partial<{
        startDate: Date;
        endDate: Date;
        reason: string;
        type: string;
        notes: string;
        priority: number;
        recurring: boolean;
        recurringConfig: any;
    }>): Promise<any>;
    deleteVehicleUnavailability(id: string): Promise<boolean>;
    getCalendarDataUnified(startDate: Date, endDate: Date): Promise<any>;
    getUnavailabilitiesForDateRange(startDate: Date, endDate: Date): Promise<any[]>;
    getVehicleDocuments(vehicleId?: string): Promise<VehicleDocument[]>;
    createVehicleDocument(documentData: {
        vehicleId: string;
        documentType: string;
        validFrom?: Date;
        validTo: Date;
        documentNumber?: string;
        price?: number;
        notes?: string;
        filePath?: string;
    }): Promise<VehicleDocument>;
    updateVehicleDocument(id: string, documentData: {
        vehicleId: string;
        documentType: string;
        validFrom?: Date;
        validTo: Date;
        documentNumber?: string;
        price?: number;
        notes?: string;
        filePath?: string;
    }): Promise<VehicleDocument>;
    deleteVehicleDocument(id: string): Promise<void>;
    getInsuranceClaims(vehicleId?: string): Promise<InsuranceClaim[]>;
    createInsuranceClaim(claimData: {
        vehicleId: string;
        insuranceId?: string;
        incidentDate: Date;
        description: string;
        location?: string;
        incidentType: string;
        estimatedDamage?: number;
        deductible?: number;
        payoutAmount?: number;
        status?: string;
        claimNumber?: string;
        filePaths?: string[];
        policeReportNumber?: string;
        otherPartyInfo?: string;
        notes?: string;
    }): Promise<InsuranceClaim>;
    updateInsuranceClaim(id: string, claimData: {
        vehicleId: string;
        insuranceId?: string;
        incidentDate: Date;
        description: string;
        location?: string;
        incidentType: string;
        estimatedDamage?: number;
        deductible?: number;
        payoutAmount?: number;
        status?: string;
        claimNumber?: string;
        filePaths?: string[];
        policeReportNumber?: string;
        otherPartyInfo?: string;
        notes?: string;
    }): Promise<InsuranceClaim>;
    deleteInsuranceClaim(id: string): Promise<void>;
    assignVehiclesToCompany(vehicleIds: string[], companyId: string): Promise<void>;
    getUserPermissions(userId: string): Promise<UserPermission[]>;
    getUserCompanyAccess(userId: string): Promise<UserCompanyAccess[]>;
    setUserPermission(userId: string, companyId: string, permissions: CompanyPermissions): Promise<void>;
    /**
     * Získanie všetkých investorov s ich podielmi (pre dropdown v Create User)
     */
    getInvestorsWithShares(): Promise<Array<{
        id: string;
        firstName: string;
        lastName: string;
        email: string;
        companies: Array<{
            companyId: string;
            companyName: string;
            ownershipPercentage: number;
        }>;
    }>>;
    removeUserPermission(userId: string, companyId: string): Promise<void>;
    hasPermission(userId: string, companyId: string, resource: string, action: string): Promise<boolean>;
    getUsersWithCompanyAccess(companyId: string): Promise<{
        userId: string;
        username: string;
        permissions: CompanyPermissions;
    }[]>;
    resetDatabase(): Promise<number>;
    getCompanyIdByName(companyName: string): Promise<string | null>;
    getCompanyNameById(companyId: string): Promise<string | null>;
    getAllCompanies(): Promise<{
        id: string;
        name: string;
    }[]>;
    private validateRentalUpdate;
    private createRentalBackup;
    recoverRentalFromBackup(rentalId: string, backupId?: string): Promise<Rental | null>;
    checkRentalIntegrity(): Promise<{
        totalRentals: number;
        missingVehicles: number;
        missingCustomers: number;
        invalidDates: number;
        backupsAvailable: number;
        issues: string[];
    }>;
    getBulkVehicleOwnersAtTime(vehicleTimeChecks: Array<{
        vehicleId: string;
        timestamp: Date;
    }>): Promise<Array<{
        vehicleId: string;
        timestamp: Date;
        owner: {
            ownerCompanyId: string;
            ownerCompanyName: string;
        } | null;
    }>>;
    getBulkCurrentVehicleOwners(vehicleIds: string[]): Promise<Array<{
        vehicleId: string;
        owner: {
            ownerCompanyId: string;
            ownerCompanyName: string;
        } | null;
    }>>;
    private clearPermissionCache;
    private clearAllPermissionCache;
    getBulkProtocolStatus(): Promise<Array<{
        rentalId: string;
        hasHandoverProtocol: boolean;
        hasReturnProtocol: boolean;
        handoverProtocolId?: string;
        returnProtocolId?: string;
        handoverCreatedAt?: Date;
        returnCreatedAt?: Date;
    }>>;
    getAllProtocolsForStats(): Promise<Array<{
        id: string;
        type: 'handover' | 'return';
        rentalId: string;
        createdBy: string;
        createdAt: Date;
        rentalData?: any;
    }>>;
    createCompanyDocument(document: CompanyDocument): Promise<CompanyDocument>;
    getCompanyDocuments(companyId: string | number, documentType?: 'contract' | 'invoice', year?: number, month?: number): Promise<CompanyDocument[]>;
    getCompanyDocumentById(documentId: string): Promise<CompanyDocument | null>;
    deleteCompanyDocument(documentId: string): Promise<void>;
    getCompanyDocumentsByType(companyId: string | number, documentType: 'contract' | 'invoice'): Promise<CompanyDocument[]>;
    getCompanyInvoicesByMonth(companyId: string | number, year: number, month: number): Promise<CompanyDocument[]>;
    private mapCompanyDocument;
}
export declare const postgresDatabase: PostgresDatabase;
//# sourceMappingURL=postgres-database.d.ts.map