import { PoolClient } from 'pg';
import { Vehicle, Customer, Rental, Expense, Insurance, User, Company, Insurer, Settlement } from '../types';
export declare class PostgresDatabase {
    private pool;
    constructor();
    private initTables;
    private runMigrations;
    private createDefaultAdmin;
    private createSampleDataIfEmpty;
    getUserByUsername(username: string): Promise<User | null>;
    getUserById(id: string): Promise<User | null>;
    createUser(userData: {
        username: string;
        email: string;
        password: string;
        role: string;
    }): Promise<User>;
    updateUser(user: User): Promise<void>;
    deleteUser(id: string): Promise<void>;
    getUsers(): Promise<User[]>;
    getVehicles(): Promise<Vehicle[]>;
    getVehicle(id: string): Promise<Vehicle | null>;
    createVehicle(vehicleData: {
        brand: string;
        model: string;
        licensePlate: string;
        company: string;
        pricing: any[];
        commission: any;
        status: string;
    }): Promise<Vehicle>;
    updateVehicle(vehicle: Vehicle): Promise<void>;
    deleteVehicle(id: string): Promise<void>;
    getRentals(): Promise<Rental[]>;
    private safeJsonParse;
    createRental(rentalData: {
        vehicleId?: string;
        customerId?: string;
        customerName: string;
        startDate: Date;
        endDate: Date;
        totalPrice: number;
        commission: number;
        paymentMethod: string;
        discount?: any;
        customCommission?: any;
        extraKmCharge?: number;
        paid?: boolean;
        status?: string;
        handoverPlace?: string;
        confirmed?: boolean;
        payments?: any;
        history?: any;
        orderNumber?: string;
        deposit?: number;
        allowedKilometers?: number;
        extraKilometerRate?: number;
        returnConditions?: string;
        fuelLevel?: number;
        odometer?: number;
        returnFuelLevel?: number;
        returnOdometer?: number;
        actualKilometers?: number;
        fuelRefillCost?: number;
        handoverProtocolId?: string;
        returnProtocolId?: string;
    }): Promise<Rental>;
    getRental(id: string): Promise<Rental | null>;
    updateRental(rental: Rental): Promise<void>;
    deleteRental(id: string): Promise<void>;
    getCustomers(): Promise<Customer[]>;
    createCustomer(customerData: {
        name: string;
        email: string;
        phone: string;
    }): Promise<Customer>;
    updateCustomer(customer: Customer): Promise<void>;
    deleteCustomer(id: string): Promise<void>;
    getExpenses(): Promise<Expense[]>;
    createExpense(expenseData: {
        description: string;
        amount: number;
        date: Date;
        vehicleId?: string;
        company: string;
        category: string;
        note?: string;
    }): Promise<Expense>;
    updateExpense(expense: Expense): Promise<void>;
    deleteExpense(id: string): Promise<void>;
    getInsurances(): Promise<Insurance[]>;
    createInsurance(insuranceData: {
        vehicleId: string;
        type: string;
        policyNumber: string;
        validFrom: Date;
        validTo: Date;
        price: number;
        company: string;
    }): Promise<Insurance>;
    getCompanies(): Promise<Company[]>;
    createCompany(companyData: {
        name: string;
    }): Promise<Company>;
    deleteCompany(id: string): Promise<void>;
    getInsurers(): Promise<Insurer[]>;
    createInsurer(insurerData: {
        name: string;
    }): Promise<Insurer>;
    deleteInsurer(id: string): Promise<void>;
    getSettlements(): Promise<Settlement[]>;
    getSettlement(id: string): Promise<Settlement | null>;
    createSettlement(settlementData: {
        company?: string;
        period?: string;
        fromDate?: Date;
        toDate?: Date;
        totalIncome?: number;
        totalExpenses?: number;
        commission?: number;
        profit?: number;
        summary?: string;
    }): Promise<Settlement>;
    updateSettlement(id: string, updateData: any): Promise<Settlement>;
    deleteSettlement(id: string): Promise<void>;
    private extractMediaData;
    private mapMediaObjectsFromDB;
    private getMediaTypeFromUrl;
    uploadProtocolFile(protocolId: string, file: Buffer, filename: string, contentType: string, mediaType?: 'vehicle-images' | 'document-images' | 'damage-images' | 'vehicle-videos'): Promise<string>;
    uploadProtocolPDF(protocolId: string, pdfBuffer: Buffer, protocolType?: 'handover' | 'return'): Promise<string>;
    initProtocolTables(): Promise<void>;
    createHandoverProtocol(protocolData: any): Promise<any>;
    getHandoverProtocolsByRental(rentalId: string): Promise<any[]>;
    getHandoverProtocolById(id: string): Promise<any | null>;
    createReturnProtocol(protocolData: any): Promise<any>;
    getReturnProtocolsByRental(rentalId: string): Promise<any[]>;
    getReturnProtocolById(id: string): Promise<any | null>;
    updateReturnProtocol(id: string, updateData: any): Promise<any>;
    private mapHandoverProtocolFromDB;
    private mapReturnProtocolFromDB;
    deleteHandoverProtocol(id: string): Promise<boolean>;
    deleteReturnProtocol(id: string): Promise<boolean>;
    getClient(): Promise<PoolClient>;
    close(): Promise<void>;
    updateHandoverProtocol(id: string, updateData: any): Promise<any>;
}
export declare const postgresDatabase: PostgresDatabase;
//# sourceMappingURL=postgres-database.d.ts.map