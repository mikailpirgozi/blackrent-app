"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postgresDatabase = exports.PostgresDatabase = void 0;
const pg_1 = require("pg");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const r2_storage_1 = require("../utils/r2-storage");
class PostgresDatabase {
    // Public getter for cleanup operations
    get dbPool() {
        return this.pool;
    }
    constructor() {
        // ‚ö° PERFORMANCE CACHE: Permission caching pre getUserCompanyAccess
        this.permissionCache = new Map();
        this.PERMISSION_CACHE_TTL = 5 * 60 * 1000; // 5 min√∫t
        // üöÄ F√ÅZA 1.3: VEHICLE CACHING - vozidl√° sa menia zriedka, m√¥≈æeme cachova≈•
        this.vehicleCache = null;
        this.VEHICLE_CACHE_TTL = 10 * 60 * 1000; // 10 min√∫t
        // üöÄ F√ÅZA 2.2: CONNECTION REUSE pre calendar API
        this.calendarConnection = null;
        this.calendarConnectionLastUsed = 0;
        this.CONNECTION_REUSE_TIMEOUT = 60000; // 1 min√∫ta
        // üöÄ F√ÅZA 2.3: SMART CACHING LAYER - hierarchical cache system
        this.calendarCache = new Map();
        this.CALENDAR_CACHE_TTL = 5 * 60 * 1000; // 5 min√∫t
        this.unavailabilityCache = new Map();
        this.UNAVAILABILITY_CACHE_TTL = 3 * 60 * 1000; // 3 min√∫ty
        // üöÄ F√ÅZA 2.2: OPTIMALIZED CONNECTION POOL pre produkƒçn√© ≈°k√°lovanie
        const poolConfig = {
            // Railway optimaliz√°cie
            max: 15, // Zn√≠≈æen√© z 25 - Railway m√° connection limity 
            min: 2, // Minim√°lne 2 connections ready
            idleTimeoutMillis: 30000, // 30s - r√Ωchlej≈°ie cleanup
            connectionTimeoutMillis: 2000, // 2s - r√Ωchly timeout
            acquireTimeoutMillis: 3000, // 3s pre z√≠skanie connection
            allowExitOnIdle: true,
            // Keepalive pre produkciu
            keepAlive: true,
            keepAliveInitialDelayMillis: 0,
            // Performance tuning
            statement_timeout: 30000, // 30s statement timeout
            query_timeout: 15000, // 15s query timeout
        };
        // Railway.app provides DATABASE_URL
        if (process.env.DATABASE_URL) {
            this.pool = new pg_1.Pool({
                connectionString: process.env.DATABASE_URL,
                ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
                ...poolConfig
            });
        }
        else {
            // Local development or manual config
            this.pool = new pg_1.Pool({
                user: process.env.DB_USER || 'postgres',
                host: process.env.DB_HOST || 'localhost',
                database: process.env.DB_NAME || 'blackrent',
                password: process.env.DB_PASSWORD || 'password',
                port: parseInt(process.env.DB_PORT || '5432'),
                ...poolConfig
            });
        }
        this.initTables().catch(console.error); // Spustenie pre aktualiz√°ciu sch√©my
        // üöÄ F√ÅZA 2.2: Connection cleanup job (ka≈æd√Ωch 2 min√∫ty)
        setInterval(() => {
            const now = Date.now();
            if (this.calendarConnection &&
                (now - this.calendarConnectionLastUsed) > this.CONNECTION_REUSE_TIMEOUT) {
                console.log('üßπ CLEANUP: Releasing unused calendar connection');
                this.releaseReusableConnection(true);
            }
        }, 2 * 60 * 1000); // Ka≈æd√© 2 min√∫ty
        // üöÄ F√ÅZA 2.3: Smart cache cleanup job (ka≈æd√Ωch 5 min√∫t)
        setInterval(() => {
            this.cleanupExpiredCache();
        }, 5 * 60 * 1000); // Ka≈æd√Ωch 5 min√∫t
    }
    // üìß HELPER: Public query method pre webhook funcionalitu
    async query(sql, params = []) {
        const client = await this.pool.connect();
        try {
            return await client.query(sql, params);
        }
        finally {
            client.release();
        }
    }
    async initTables() {
        const client = await this.pool.connect();
        try {
            // F√ÅZA 1: ROLE-BASED PERMISSIONS - Vytvorenie companies tabuƒæky
            await client.query(`
        CREATE TABLE IF NOT EXISTS companies (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          name VARCHAR(255) NOT NULL,
          business_id VARCHAR(50),
          tax_id VARCHAR(50),
          address TEXT,
          contact_person VARCHAR(255),
          email VARCHAR(255),
          phone VARCHAR(50),
          contract_start_date DATE,
          contract_end_date DATE,
          commission_rate DECIMAL(5,2) DEFAULT 20.00,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Tabuƒæka pou≈æ√≠vateƒæov s hashovan√Ωmi heslami
            await client.query(`
        CREATE TABLE IF NOT EXISTS users (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          username VARCHAR(50) UNIQUE NOT NULL,
          email VARCHAR(100) UNIQUE NOT NULL,
          password_hash VARCHAR(255) NOT NULL,
          role VARCHAR(30) DEFAULT 'admin',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // F√ÅZA 1: Roz≈°√≠renie users tabuƒæky o nov√© stƒ∫pce (bez company_id foreign key kv√¥li type mismatch)
            try {
                await client.query(`
          ALTER TABLE users 
          ADD COLUMN IF NOT EXISTS company_id INTEGER,
          ADD COLUMN IF NOT EXISTS employee_number VARCHAR(20),
          ADD COLUMN IF NOT EXISTS hire_date DATE,
          ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT true,
          ADD COLUMN IF NOT EXISTS last_login TIMESTAMP,
          ADD COLUMN IF NOT EXISTS first_name VARCHAR(100),
          ADD COLUMN IF NOT EXISTS last_name VARCHAR(100),
          ADD COLUMN IF NOT EXISTS signature_template TEXT
        `);
            }
            catch (error) {
                console.log('‚ÑπÔ∏è Users table columns already exist or error occurred:', error);
            }
            // Tabuƒæka vozidiel
            await client.query(`
        CREATE TABLE IF NOT EXISTS vehicles (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          brand VARCHAR(100) NOT NULL,
          model VARCHAR(100) NOT NULL,
          license_plate VARCHAR(50) UNIQUE NOT NULL,
          company VARCHAR(100) NOT NULL,
          pricing JSONB NOT NULL,
          commission JSONB NOT NULL,
          status VARCHAR(30) DEFAULT 'available',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // F√ÅZA 1: Roz≈°√≠renie vehicles tabuƒæky o company ownership a mechanic assignment
            // Pozn√°mka: Skipped - vehicles u≈æ m√° company_id (integer) foreign key na companies(id)
            console.log('‚ÑπÔ∏è Vehicles table - using existing company_id column (integer type)');
            // Tabuƒæka z√°kazn√≠kov
            await client.query(`
        CREATE TABLE IF NOT EXISTS customers (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          name VARCHAR(100) NOT NULL,
          email VARCHAR(100),
          phone VARCHAR(30),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Tabuƒæka pren√°jmov
            await client.query(`
        CREATE TABLE IF NOT EXISTS rentals (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          vehicle_id UUID,
          customer_id UUID REFERENCES customers(id) ON DELETE SET NULL,
          customer_name VARCHAR(100) NOT NULL,
          start_date TIMESTAMP NOT NULL,
          end_date TIMESTAMP NOT NULL,
          total_price DECIMAL(10,2) NOT NULL,
          commission DECIMAL(10,2) NOT NULL,
          payment_method VARCHAR(50) NOT NULL,
          discount TEXT,
          custom_commission TEXT,
          extra_km_charge DECIMAL(10,2),
          paid BOOLEAN DEFAULT FALSE,
          status VARCHAR(30) DEFAULT 'pending',
          handover_place TEXT,
          confirmed BOOLEAN DEFAULT FALSE,
          payments JSONB,
          history JSONB,
          order_number VARCHAR(50),
          -- Roz≈°√≠ren√© polia pre kompletn√Ω rental syst√©m
          deposit DECIMAL(10,2),
          allowed_kilometers INTEGER,
          daily_kilometers INTEGER, -- NEW: Denn√© km pre automatick√Ω prepoƒçet
          extra_kilometer_rate DECIMAL(10,2),
          return_conditions TEXT,
          fuel_level INTEGER,
          odometer INTEGER,
          return_fuel_level INTEGER,
          return_odometer INTEGER,
          actual_kilometers INTEGER,
          fuel_refill_cost DECIMAL(10,2),
          -- Protokoly
          handover_protocol_id UUID,
          return_protocol_id UUID,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Tabuƒæka n√°kladov
            await client.query(`
        CREATE TABLE IF NOT EXISTS expenses (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          description TEXT NOT NULL,
          amount DECIMAL(10,2) NOT NULL,
          date TIMESTAMP NOT NULL,
          vehicle_id UUID,
          company VARCHAR(100) NOT NULL,
          category VARCHAR(50) NOT NULL,
          note TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Tabuƒæka poistiek
            await client.query(`
        CREATE TABLE IF NOT EXISTS insurances (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          vehicle_id UUID NOT NULL,
          type VARCHAR(50) NOT NULL,
          policy_number VARCHAR(100) NOT NULL DEFAULT '',
          valid_from TIMESTAMP NOT NULL,
          valid_to TIMESTAMP NOT NULL,
          price DECIMAL(10,2) NOT NULL,
          company VARCHAR(100) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Prid√°me stƒ∫pec policy_number ak neexistuje (migr√°cia existuj√∫cich tabuliek)
            try {
                await client.query(`
          ALTER TABLE insurances ADD COLUMN IF NOT EXISTS policy_number VARCHAR(100) NOT NULL DEFAULT ''
        `);
            }
            catch (error) {
                console.log('‚ÑπÔ∏è Policy number column already exists or error occurred:', error);
            }
            // Prid√°me stƒ∫pec payment_frequency ak neexistuje (migr√°cia existuj√∫cich tabuliek)
            try {
                await client.query(`
          ALTER TABLE insurances ADD COLUMN IF NOT EXISTS payment_frequency VARCHAR(20) NOT NULL DEFAULT 'yearly'
        `);
            }
            catch (error) {
                console.log('‚ÑπÔ∏è Payment frequency column already exists or error occurred:', error);
            }
            // Prid√°me stƒ∫pec file_path ak neexistuje (migr√°cia pre file uploads)
            try {
                await client.query(`
          ALTER TABLE insurances ADD COLUMN IF NOT EXISTS file_path TEXT
        `);
            }
            catch (error) {
                console.log('‚ÑπÔ∏è Insurance file_path column already exists or error occurred:', error);
            }
            // Tabuƒæka firiem
            await client.query(`
        CREATE TABLE IF NOT EXISTS companies (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          name VARCHAR(100) NOT NULL UNIQUE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Tabuƒæka pois≈•ovn√≠
            await client.query(`
        CREATE TABLE IF NOT EXISTS insurers (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          name VARCHAR(100) NOT NULL UNIQUE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Tabuƒæka evidencie platnosti vozidiel (STK, EK, dialniƒçn√© zn√°mky)
            await client.query(`
        CREATE TABLE IF NOT EXISTS vehicle_documents (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          vehicle_id UUID NOT NULL,
          document_type VARCHAR(20) NOT NULL,
          valid_from DATE,
          valid_to DATE NOT NULL,
          document_number VARCHAR(100),
          price DECIMAL(10,2),
          notes TEXT,
          file_path TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Tabuƒæka poistn√Ωch udalost√≠
            await client.query(`
        CREATE TABLE IF NOT EXISTS insurance_claims (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          vehicle_id UUID NOT NULL,
          insurance_id UUID,
          
          -- Z√°kladn√© info o udalosti
          incident_date TIMESTAMP NOT NULL,
          reported_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          claim_number VARCHAR(100),
          
          -- Popis udalosti
          description TEXT NOT NULL,
          location VARCHAR(255),
          incident_type VARCHAR(50) NOT NULL DEFAULT 'other',
          
          -- Finanƒçn√© √∫daje
          estimated_damage DECIMAL(10,2),
          deductible DECIMAL(10,2),
          payout_amount DECIMAL(10,2),
          
          -- Stav
          status VARCHAR(50) NOT NULL DEFAULT 'reported',
          
          -- S√∫bory a dokumenty
          file_paths TEXT[],
          
          -- Dodatoƒçn√© info
          police_report_number VARCHAR(100),
          other_party_info TEXT,
          notes TEXT,
          
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
            // Prid√°me stƒ∫pec file_path ak neexistuje (migr√°cia existuj√∫cich tabuliek)
            try {
                await client.query(`
          ALTER TABLE vehicle_documents ADD COLUMN IF NOT EXISTS file_path TEXT
        `);
            }
            catch (error) {
                console.log('‚ÑπÔ∏è Vehicle documents file_path column already exists or error occurred:', error);
            }
            // Tabuƒæka nedostupnost√≠ vozidiel (servis, √∫dr≈æba, blokovanie)
            await client.query(`
        CREATE TABLE IF NOT EXISTS vehicle_unavailability (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          vehicle_id UUID NOT NULL,
          start_date DATE NOT NULL,
          end_date DATE NOT NULL,
          reason TEXT NOT NULL,
          type VARCHAR(50) NOT NULL DEFAULT 'maintenance',
          notes TEXT,
          priority INTEGER DEFAULT 2,
          recurring BOOLEAN DEFAULT FALSE,
          recurring_config JSONB,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          created_by VARCHAR(100) DEFAULT 'system',
          CONSTRAINT unique_vehicle_period UNIQUE (vehicle_id, start_date, end_date, type),
          CONSTRAINT valid_date_range CHECK (end_date >= start_date)
        )
      `);
            // Indexy pre optim√°lny v√Ωkon vehicle_unavailability tabuƒæky
            await client.query(`CREATE INDEX IF NOT EXISTS idx_vehicle_unavailability_vehicle_id ON vehicle_unavailability(vehicle_id)`);
            await client.query(`CREATE INDEX IF NOT EXISTS idx_vehicle_unavailability_dates ON vehicle_unavailability(start_date, end_date)`);
            await client.query(`CREATE INDEX IF NOT EXISTS idx_vehicle_unavailability_type ON vehicle_unavailability(type)`);
            // Tabuƒæka pre pr√°va pou≈æ√≠vateƒæov na firmy
            await client.query(`
        CREATE TABLE IF NOT EXISTS user_permissions (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id UUID NOT NULL,
          company_id INTEGER NOT NULL,
          permissions JSONB NOT NULL DEFAULT '{}',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(user_id, company_id)
        )
      `);
            // Indexy pre user_permissions
            await client.query(`CREATE INDEX IF NOT EXISTS idx_user_permissions_user_id ON user_permissions(user_id)`);
            await client.query(`CREATE INDEX IF NOT EXISTS idx_user_permissions_company_id ON user_permissions(company_id)`);
            // Vytvorenie admin pou≈æ√≠vateƒæa ak neexistuje
            await this.createDefaultAdmin(client);
            // Migr√°cie pre existuj√∫ce datab√°zy - aktualiz√°cia varchar limitov
            await this.runMigrations(client);
            // Vytvorenie testovac√≠ch d√°t ak datab√°za je pr√°zdna
            await this.createSampleDataIfEmpty(client);
            // DATA INTEGRITY VALIDATION - Kompletn√° kontrola d√°t
            await this.validateDataIntegrity(client);
            console.log('‚úÖ PostgreSQL tabuƒæky inicializovan√©');
        }
        catch (error) {
            console.error('‚ùå Chyba pri inicializ√°cii tabuliek:', error);
        }
        finally {
            client.release();
        }
    }
    async runMigrations(client) {
        try {
            console.log('üîÑ Sp√∫≈°≈•am datab√°zov√© migr√°cie...');
            // Migr√°cia 1: Pridanie ch√Ωbaj√∫cich stƒ∫pcov do vehicles (bez NOT NULL)
            try {
                console.log('üìã Migr√°cia 1: Prid√°vanie stƒ∫pcov do vehicles...');
                await client.query(`
          ALTER TABLE vehicles 
          ADD COLUMN IF NOT EXISTS company VARCHAR(100) DEFAULT 'Default Company',
          ADD COLUMN IF NOT EXISTS pricing JSONB DEFAULT '[]',
          ADD COLUMN IF NOT EXISTS commission JSONB DEFAULT '{"type": "percentage", "value": 20}',
          ADD COLUMN IF NOT EXISTS status VARCHAR(30) DEFAULT 'available';
        `);
                console.log('‚úÖ Migr√°cia 1: Stƒ∫pce do vehicles pridan√©');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 1 chyba:', error.message);
            }
            // Migr√°cia 2: Pridanie z√°kladn√Ωch pol√≠ do rentals tabuƒæky
            try {
                console.log('üìã Migr√°cia 2: Prid√°vanie stƒ∫pcov do rentals...');
                await client.query(`
          ALTER TABLE rentals 
          ADD COLUMN IF NOT EXISTS commission DECIMAL(10,2) DEFAULT 0,
          ADD COLUMN IF NOT EXISTS discount TEXT,
          ADD COLUMN IF NOT EXISTS custom_commission TEXT,
          ADD COLUMN IF NOT EXISTS extra_km_charge DECIMAL(10,2),
          ADD COLUMN IF NOT EXISTS payments JSONB,
          ADD COLUMN IF NOT EXISTS history JSONB,
          ADD COLUMN IF NOT EXISTS order_number VARCHAR(50),
          ADD COLUMN IF NOT EXISTS status VARCHAR(30) DEFAULT 'pending',
          ADD COLUMN IF NOT EXISTS confirmed BOOLEAN DEFAULT false,
          ADD COLUMN IF NOT EXISTS paid BOOLEAN DEFAULT false,
          ADD COLUMN IF NOT EXISTS handover_place TEXT;
        `);
                console.log('‚úÖ Migr√°cia 2: Stƒ∫pce do rentals pridan√©');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 2 chyba:', error.message);
            }
            // Migr√°cia 2b: Pridanie ch√Ωbaj√∫cich stƒ∫pcov do customers
            try {
                console.log('üìã Migr√°cia 2b: Prid√°vanie stƒ∫pcov do customers...');
                await client.query(`
          ALTER TABLE customers 
          ADD COLUMN IF NOT EXISTS name VARCHAR(100) DEFAULT 'Unknown',
          ADD COLUMN IF NOT EXISTS email VARCHAR(100),
          ADD COLUMN IF NOT EXISTS phone VARCHAR(30);
        `);
                console.log('‚úÖ Migr√°cia 2b: Stƒ∫pce do customers pridan√©');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 2b chyba:', error.message);
            }
            // Migr√°cia 3: Zv√Ω≈°enie limitov varchar pol√≠
            try {
                console.log('üìã Migr√°cia 3: Zvy≈°ovanie varchar limitov...');
                await client.query(`
          ALTER TABLE vehicles 
          ALTER COLUMN license_plate TYPE VARCHAR(50),
          ALTER COLUMN status TYPE VARCHAR(30);
        `);
                await client.query(`
          ALTER TABLE customers 
          ALTER COLUMN phone TYPE VARCHAR(30);
        `);
                await client.query(`
          ALTER TABLE users 
          ALTER COLUMN role TYPE VARCHAR(30);
        `);
                await client.query(`
          ALTER TABLE rentals 
          ALTER COLUMN status TYPE VARCHAR(30);
        `);
                console.log('‚úÖ Migr√°cia 3: VARCHAR limity aktualizovan√©');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 3 chyba:', error.message);
            }
            // Migr√°cia 4: Nastavenie NOT NULL pre d√¥le≈æit√© polia
            try {
                console.log('üìã Migr√°cia 4: Nastavovanie NOT NULL constraints...');
                await client.query(`
          UPDATE vehicles SET company = 'Default Company' WHERE company IS NULL;
        `);
                await client.query(`
          ALTER TABLE vehicles ALTER COLUMN company SET NOT NULL;
        `);
                console.log('‚úÖ Migr√°cia 4: NOT NULL constraints nastaven√©');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 4 chyba:', error.message);
            }
            // Migr√°cia 5: Pridanie signature_template a user info stƒ∫pcov do users tabuƒæky
            try {
                console.log('üìã Migr√°cia 5: Prid√°vanie signature_template a user info stƒ∫pcov do users...');
                await client.query(`
          ALTER TABLE users 
          ADD COLUMN IF NOT EXISTS signature_template TEXT,
          ADD COLUMN IF NOT EXISTS first_name VARCHAR(100),
          ADD COLUMN IF NOT EXISTS last_name VARCHAR(100);
        `);
                console.log('‚úÖ Migr√°cia 5: signature_template, first_name, last_name stƒ∫pce pridan√© do users');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 5 chyba:', error.message);
            }
            // Migr√°cia 6: Pridanie roz≈°√≠ren√Ωch pol√≠ do rentals tabuƒæky
            try {
                console.log('üìã Migr√°cia 6: Prid√°vanie roz≈°√≠ren√Ωch pol√≠ do rentals...');
                await client.query(`
          ALTER TABLE rentals 
          ADD COLUMN IF NOT EXISTS deposit DECIMAL(10,2),
          ADD COLUMN IF NOT EXISTS allowed_kilometers INTEGER,
          ADD COLUMN IF NOT EXISTS daily_kilometers INTEGER,
          ADD COLUMN IF NOT EXISTS extra_kilometer_rate DECIMAL(10,2),
          ADD COLUMN IF NOT EXISTS return_conditions TEXT,
          ADD COLUMN IF NOT EXISTS fuel_level INTEGER,
          ADD COLUMN IF NOT EXISTS odometer INTEGER,
          ADD COLUMN IF NOT EXISTS return_fuel_level INTEGER,
          ADD COLUMN IF NOT EXISTS return_odometer INTEGER,
          ADD COLUMN IF NOT EXISTS actual_kilometers INTEGER,
          ADD COLUMN IF NOT EXISTS fuel_refill_cost DECIMAL(10,2),
          ADD COLUMN IF NOT EXISTS handover_protocol_id UUID,
          ADD COLUMN IF NOT EXISTS return_protocol_id UUID;
        `);
                console.log('‚úÖ Migr√°cia 5: Roz≈°√≠ren√© polia do rentals pridan√©');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 5 chyba:', error.message);
            }
            // Migr√°cia 6: Aktualiz√°cia pricing tiers pre v≈°etky existuj√∫ce vozidl√°
            try {
                console.log('üìã Migr√°cia 6: Aktualiz√°cia pricing tiers pre vozidl√°...');
                // Kompletn√© pricing tiers pre v≈°etky vozidl√°
                const fullPricingTiers = [
                    { id: '1', minDays: 0, maxDays: 1, pricePerDay: 80 }, // 0-1 dn√≠
                    { id: '2', minDays: 2, maxDays: 3, pricePerDay: 75 }, // 2-3 dni  
                    { id: '3', minDays: 4, maxDays: 7, pricePerDay: 70 }, // 4-7 dn√≠
                    { id: '4', minDays: 8, maxDays: 14, pricePerDay: 60 }, // 8-14 dn√≠
                    { id: '5', minDays: 15, maxDays: 22, pricePerDay: 55 }, // 15-22 dn√≠
                    { id: '6', minDays: 23, maxDays: 30, pricePerDay: 50 }, // 23-30 dn√≠  
                    { id: '7', minDays: 31, maxDays: 365, pricePerDay: 45 } // 31+ dn√≠
                ];
                // Update v≈°etk√Ωch vozidiel ktor√© nemaj√∫ kompletn√© pricing (menej ako 7 tiers)
                const vehiclesResult = await client.query(`
          SELECT id, brand, model, pricing FROM vehicles 
          WHERE pricing IS NULL OR jsonb_array_length(pricing) < 7
        `);
                for (const vehicle of vehiclesResult.rows) {
                    // Prisp√¥sobi≈• ceny podƒæa typu vozidla
                    let adjustedPricing = [...fullPricingTiers];
                    // Premium vozidl√° (BMW, Mercedes, Audi Q/X s√©rie) - vy≈°≈°ie ceny
                    if (vehicle.brand === 'BMW' ||
                        vehicle.brand === 'Mercedes' ||
                        (vehicle.brand === 'Audi' && vehicle.model?.includes('Q'))) {
                        adjustedPricing = adjustedPricing.map(tier => ({
                            ...tier,
                            pricePerDay: Math.round(tier.pricePerDay * 1.3) // +30%
                        }));
                    }
                    // Luxury vozidl√° (Porsche, Bentley, atƒè) - najvy≈°≈°ie ceny  
                    else if (['Porsche', 'Bentley', 'Ferrari', 'Lamborghini'].includes(vehicle.brand)) {
                        adjustedPricing = adjustedPricing.map(tier => ({
                            ...tier,
                            pricePerDay: Math.round(tier.pricePerDay * 1.8) // +80%
                        }));
                    }
                    // Standard vozidl√° - z√°kladn√© ceny zostan√∫
                    await client.query('UPDATE vehicles SET pricing = $1 WHERE id = $2', [JSON.stringify(adjustedPricing), vehicle.id]);
                }
                console.log(`‚úÖ Migr√°cia 6: Pricing aktualizovan√© pre ${vehiclesResult.rows.length} vozidiel`);
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 6 chyba:', error.message);
            }
            // Migr√°cia 7: Aktualiz√°cia commission na 20% pre v≈°etky vozidl√°
            try {
                console.log('üìã Migr√°cia 7: Aktualiz√°cia commission na 20%...');
                const commissionResult = await client.query(`
          UPDATE vehicles 
          SET commission = '{"type": "percentage", "value": 20}'::jsonb
          WHERE commission->>'value' != '20'
        `);
                console.log(`‚úÖ Migr√°cia 7: Commission aktualizovan√° na 20% pre v≈°etky vozidl√°`);
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 7 chyba:', error.message);
            }
            // Migr√°cia 8: Pridanie owner_name stƒ∫pca do vehicles tabuƒæky
            try {
                console.log('üìã Migr√°cia 8: Prid√°vanie owner_name stƒ∫pca do vehicles...');
                await client.query(`
          ALTER TABLE vehicles 
          ADD COLUMN IF NOT EXISTS owner_name VARCHAR(255);
        `);
                console.log('‚úÖ Migr√°cia 8: owner_name stƒ∫pec pridan√Ω do vehicles tabuƒæky');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 8 chyba:', error.message);
            }
            // Migr√°cia 9: Pridanie company_id stƒ∫pca do vehicles tabuƒæky
            try {
                console.log('üìã Migr√°cia 9: Prid√°vanie company_id stƒ∫pca do vehicles...');
                await client.query(`
          ALTER TABLE vehicles
          ADD COLUMN IF NOT EXISTS company_id INTEGER REFERENCES companies(id);
        `);
                console.log('‚úÖ Migr√°cia 9: company_id stƒ∫pec pridan√Ω do vehicles tabuƒæky');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 9 chyba:', error.message);
            }
            // Migr√°cia 10: Oprava company_id typu v users tabuƒæke z INTEGER na UUID
            try {
                console.log('üìã Migr√°cia 10: Opravujem company_id typ v users tabuƒæke...');
                // Najprv odstr√°≈à foreign key constraint ak existuje
                await client.query(`
          ALTER TABLE users DROP CONSTRAINT IF EXISTS users_company_id_fkey;
        `);
                // Zme≈à typ stƒ∫pca z INTEGER na UUID
                await client.query(`
          ALTER TABLE users ALTER COLUMN company_id TYPE UUID USING company_id::text::uuid;
        `);
                // Pridaj nov√Ω foreign key constraint
                await client.query(`
          ALTER TABLE users ADD CONSTRAINT users_company_id_fkey 
          FOREIGN KEY (company_id) REFERENCES companies(id);
        `);
                console.log('‚úÖ Migr√°cia 10: company_id typ opraven√Ω na UUID');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 10 chyba:', error.message);
                // Ak zlyh√° konverzia, sk√∫s prida≈• stƒ∫pec nanovo
                try {
                    await client.query(`
            ALTER TABLE users DROP COLUMN IF EXISTS company_id;
            ALTER TABLE users ADD COLUMN company_id UUID REFERENCES companies(id);
          `);
                    console.log('‚úÖ Migr√°cia 10: company_id stƒ∫pec znovu vytvoren√Ω ako UUID');
                }
                catch (retryError) {
                    console.log('‚ö†Ô∏è Migr√°cia 10 retry chyba:', retryError.message);
                }
            }
            // Migr√°cia 11: Oprava vehicles.id typu z INTEGER na UUID
            try {
                console.log('üìã Migr√°cia 11: Opravujem vehicles.id typ z INTEGER na UUID...');
                // Najprv odstr√°≈à v≈°etky foreign key constraints
                await client.query(`
          ALTER TABLE rentals DROP CONSTRAINT IF EXISTS rentals_vehicle_id_fkey;
          ALTER TABLE expenses DROP CONSTRAINT IF EXISTS expenses_vehicle_id_fkey;
          ALTER TABLE insurances DROP CONSTRAINT IF EXISTS insurances_vehicle_id_fkey;
          ALTER TABLE vehicle_documents DROP CONSTRAINT IF EXISTS vehicle_documents_vehicle_id_fkey;
          ALTER TABLE insurance_claims DROP CONSTRAINT IF EXISTS insurance_claims_vehicle_id_fkey;
          ALTER TABLE vehicle_unavailability DROP CONSTRAINT IF EXISTS vehicle_unavailability_vehicle_id_fkey;
        `);
                // Zme≈à typ stƒ∫pca z INTEGER na UUID
                await client.query(`
          ALTER TABLE vehicles ALTER COLUMN id TYPE UUID USING id::text::uuid;
        `);
                // Pridaj sp√§≈• v≈°etky foreign key constraints
                await client.query(`
          ALTER TABLE rentals ADD CONSTRAINT rentals_vehicle_id_fkey 
          FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE SET NULL;
          
          ALTER TABLE expenses ADD CONSTRAINT expenses_vehicle_id_fkey 
          FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE SET NULL;
          
          ALTER TABLE insurances ADD CONSTRAINT insurances_vehicle_id_fkey 
          FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE CASCADE;
          
          ALTER TABLE vehicle_documents ADD CONSTRAINT vehicle_documents_vehicle_id_fkey 
          FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE CASCADE;
          
          ALTER TABLE insurance_claims ADD CONSTRAINT insurance_claims_vehicle_id_fkey 
          FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE CASCADE;
          
          ALTER TABLE vehicle_unavailability ADD CONSTRAINT vehicle_unavailability_vehicle_id_fkey 
          FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE CASCADE;
        `);
                console.log('‚úÖ Migr√°cia 11: vehicles.id typ opraven√Ω na UUID');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 11 chyba:', error.message);
                // Ak zlyh√° konverzia, sk√∫s prida≈• stƒ∫pec nanovo
                try {
                    await client.query(`
            ALTER TABLE vehicles DROP COLUMN IF EXISTS id;
            ALTER TABLE vehicles ADD COLUMN id UUID PRIMARY KEY DEFAULT gen_random_uuid();
          `);
                    console.log('‚úÖ Migr√°cia 11: vehicles.id stƒ∫pec znovu vytvoren√Ω ako UUID');
                }
                catch (retryError) {
                    console.log('‚ö†Ô∏è Migr√°cia 11 retry chyba:', retryError.message);
                }
            }
            // Migr√°cia 12: Oprava users.id typu z INTEGER na UUID
            try {
                console.log('üìã Migr√°cia 12: Opravujem users.id typ z INTEGER na UUID...');
                // Zme≈à typ stƒ∫pca z INTEGER na UUID
                await client.query(`
          ALTER TABLE users ALTER COLUMN id TYPE UUID USING id::text::uuid;
        `);
                console.log('‚úÖ Migr√°cia 12: users.id typ opraven√Ω na UUID');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 12 chyba:', error.message);
                // Ak zlyh√° konverzia, sk√∫s prida≈• stƒ∫pec nanovo
                try {
                    await client.query(`
            ALTER TABLE users DROP COLUMN IF EXISTS id;
            ALTER TABLE users ADD COLUMN id UUID PRIMARY KEY DEFAULT gen_random_uuid();
          `);
                    console.log('‚úÖ Migr√°cia 12: users.id stƒ∫pec znovu vytvoren√Ω ako UUID');
                }
                catch (retryError) {
                    console.log('‚ö†Ô∏è Migr√°cia 12 retry chyba:', retryError.message);
                }
            }
            // Migr√°cia 27: Roz≈°√≠renie VARCHAR stƒ∫pcov pre email parsing
            try {
                console.log('üìã Migr√°cia 27: Roz≈°irujem VARCHAR stƒ∫pce pre email parsing...');
                const fieldsToExpand = [
                    'customer_phone', 'order_number', 'vehicle_name',
                    'vehicle_code', 'handover_place', 'payment_method', 'customer_name'
                ];
                for (const field of fieldsToExpand) {
                    await this.pool.query(`
              ALTER TABLE rentals 
              ALTER COLUMN ${field} TYPE VARCHAR(500)
            `);
                    console.log(`‚úÖ ${field} roz≈°√≠ren√Ω na VARCHAR(500)`);
                }
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 27 chyba:', error);
            }
            // Migr√°cia 28: Blacklist zamietnut√Ωch objedn√°vok
            try {
                console.log('üìã Migr√°cia 28: Vytv√°ram blacklist pre zamietnut√© objedn√°vky...');
                await this.pool.query(`
            CREATE TABLE IF NOT EXISTS email_blacklist (
              id SERIAL PRIMARY KEY,
              order_number VARCHAR(500) NOT NULL UNIQUE,
              reason VARCHAR(500) DEFAULT 'rejected',
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              created_by VARCHAR(255),
              notes TEXT
            )
          `);
                // Index pre r√Ωchle vyhƒæad√°vanie
                await this.pool.query(`
            CREATE INDEX IF NOT EXISTS idx_email_blacklist_order_number 
            ON email_blacklist(order_number)
          `);
                console.log('‚úÖ Blacklist tabuƒæka vytvoren√°');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 28 chyba:', error);
            }
            console.log('‚úÖ Datab√°zov√© migr√°cie √∫spe≈°ne dokonƒçen√©');
            // MIGRATION TRACKING SYSTEM - Vytvor tabuƒæku pre tracking migr√°ci√≠
            await client.query(`
        CREATE TABLE IF NOT EXISTS migration_history (
          id SERIAL PRIMARY KEY,
          migration_name VARCHAR(255) UNIQUE NOT NULL,
          executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          success BOOLEAN DEFAULT true
        )
      `);
            // ‚ùå MIGR√ÅCIA 13 ZMAZAN√Å - Sp√¥sobovala chaos s UUID regener√°ciou ‚ùå
            // Migr√°cia 14: FINAL COMPANY CLEANUP - Odstr√°nenie owner_name a priradenie company v≈°etk√Ωm
            try {
                console.log('üìã Migr√°cia 14: Final Company Cleanup...');
                // 14.1: Odstr√°≈à owner_name z vehicles (nie je potrebn√©)
                console.log('üìã 14.1: Odstra≈àujem owner_name z vehicles...');
                try {
                    await client.query('ALTER TABLE vehicles DROP COLUMN IF EXISTS owner_name');
                    console.log('   ‚úÖ vehicles.owner_name odstr√°nen√©');
                }
                catch (e) {
                    console.log('   ‚ö†Ô∏è vehicles.owner_name u≈æ neexistuje');
                }
                // 14.2: Priradenie company v≈°etk√Ωm pou≈æ√≠vateƒæom (Lubka ako default)
                console.log('üìã 14.2: Priradenie company v≈°etk√Ωm pou≈æ√≠vateƒæom...');
                const lubkaId = await this.getCompanyIdByName('Lubka');
                if (lubkaId) {
                    const result = await client.query(`
            UPDATE users 
            SET company_id = $1 
            WHERE company_id IS NULL
          `, [lubkaId]);
                    console.log(`   ‚úÖ ${result.rowCount} pou≈æ√≠vateƒæov priraden√Ωch k Lubka company`);
                }
                else {
                    console.log('   ‚ö†Ô∏è Lubka company nen√°jden√°');
                }
                // 14.3: Skontroluj ≈æe v≈°etko m√° company assignment
                console.log('üìã 14.3: Kontrola company assignments...');
                const usersWithoutCompany = await client.query('SELECT COUNT(*) FROM users WHERE company_id IS NULL');
                console.log(`   Users bez company: ${usersWithoutCompany.rows[0].count}`);
                const vehiclesWithCompany = await client.query('SELECT COUNT(*) FROM vehicles WHERE company IS NOT NULL');
                console.log(`   Vehicles s company: ${vehiclesWithCompany.rows[0].count}`);
                console.log('‚úÖ Migr√°cia 14: Final Company Cleanup dokonƒçen√°');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 14 chyba:', error.message);
            }
            // ‚ùå MIGR√ÅCIA 15 ZMAZAN√Å - Sp√¥sobovala chaos s vehicle_id remappingom ‚ùå
            // Migr√°cia 16: Pridanie STK stƒ∫pca do vehicles
            try {
                console.log('üìã Migr√°cia 16: Prid√°vanie STK stƒ∫pca do vehicles...');
                // Skontroluj ƒçi stƒ∫pec u≈æ existuje
                const columnExists = await client.query(`
          SELECT column_name 
          FROM information_schema.columns 
          WHERE table_name = 'vehicles' AND column_name = 'stk'
        `);
                if (columnExists.rows.length === 0) {
                    // Pridaj STK stƒ∫pec
                    await client.query(`
            ALTER TABLE vehicles 
            ADD COLUMN stk DATE
          `);
                    console.log('   ‚úÖ STK stƒ∫pec pridan√Ω do vehicles tabuƒæky');
                }
                else {
                    console.log('   ‚ÑπÔ∏è STK stƒ∫pec u≈æ existuje');
                }
                console.log('‚úÖ Migr√°cia 16: STK stƒ∫pec √∫spe≈°ne pridan√Ω');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 16 chyba:', error.message);
            }
            // Migr√°cia 17: Pridanie Foreign Key constraint pre rentals.vehicle_id
            try {
                console.log('üìã Migr√°cia 17: Prid√°vanie FK constraint pre rentals.vehicle_id...');
                // Skontroluj ƒçi constraint u≈æ existuje
                const constraintExists = await client.query(`
          SELECT constraint_name
          FROM information_schema.table_constraints
          WHERE table_name = 'rentals' AND constraint_name = 'rentals_vehicle_id_fkey'
        `);
                if (constraintExists.rows.length === 0) {
                    // Najprv oprav v≈°etky neplatn√© vehicle_id na NULL
                    await client.query(`
            UPDATE rentals 
            SET vehicle_id = NULL 
            WHERE vehicle_id IS NOT NULL 
            AND vehicle_id NOT IN (SELECT id FROM vehicles)
          `);
                    console.log('   üîß Neplatn√© vehicle_id nastaven√© na NULL');
                    // Pridaj FK constraint
                    await client.query(`
            ALTER TABLE rentals 
            ADD CONSTRAINT rentals_vehicle_id_fkey 
            FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE SET NULL
          `);
                    console.log('   ‚úÖ FK constraint pridan√Ω pre rentals.vehicle_id');
                }
                else {
                    console.log('   ‚ÑπÔ∏è FK constraint u≈æ existuje');
                }
                console.log('‚úÖ Migr√°cia 17: FK constraint √∫spe≈°ne pridan√Ω');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 17 chyba:', error.message);
            }
            // Migr√°cia 18: Vehicle Ownership History - Pre tracking zmien vlastn√≠ctva vozidiel
            try {
                console.log('üìã Migr√°cia 18: Vytv√°ram vehicle ownership history tabuƒæku...');
                // Skontroluj ƒçi tabuƒæka u≈æ existuje
                const tableExists = await client.query(`
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_name = 'vehicle_ownership_history'
        `);
                if (tableExists.rows.length === 0) {
                    // Vytvor vehicle ownership history tabuƒæku
                    await client.query(`
            CREATE TABLE vehicle_ownership_history (
              id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
              vehicle_id UUID NOT NULL REFERENCES vehicles(id) ON DELETE CASCADE,
              owner_company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
              owner_company_name VARCHAR(255) NOT NULL, -- cached pre performance
              valid_from TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
              valid_to TIMESTAMP, -- NULL = akt√≠vny vlastn√≠k
              transfer_reason VARCHAR(255) DEFAULT 'initial_setup', -- 'sale', 'acquisition', 'lease_end', etc.
              transfer_notes TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
          `);
                    console.log('   ‚úÖ vehicle_ownership_history tabuƒæka vytvoren√°');
                    // Vytvor indexy pre performance
                    await client.query(`
            CREATE INDEX idx_vehicle_ownership_history_vehicle_id 
            ON vehicle_ownership_history(vehicle_id)
          `);
                    await client.query(`
            CREATE INDEX idx_vehicle_ownership_history_owner_company_id 
            ON vehicle_ownership_history(owner_company_id)
          `);
                    await client.query(`
            CREATE INDEX idx_vehicle_ownership_history_valid_period 
            ON vehicle_ownership_history(valid_from, valid_to)
          `);
                    await client.query(`
            CREATE UNIQUE INDEX idx_vehicle_ownership_one_active 
            ON vehicle_ownership_history(vehicle_id) 
            WHERE valid_to IS NULL
          `);
                    console.log('   ‚úÖ Indexy pre ownership history vytvoren√©');
                    // Migr√°cia existuj√∫cich d√°t - vytvor historick√Ω z√°znam pre ka≈æd√© vozidlo
                    const migratedRows = await client.query(`
            INSERT INTO vehicle_ownership_history (
              vehicle_id, 
              owner_company_id, 
              owner_company_name, 
              valid_from, 
              transfer_reason
            )
            SELECT 
              v.id as vehicle_id,
              v.owner_company_id,
              c.name as owner_company_name,
              COALESCE(v.created_at, CURRENT_TIMESTAMP - INTERVAL '1 year') as valid_from,
              'initial_setup' as transfer_reason
            FROM vehicles v
            JOIN companies c ON v.owner_company_id = c.id
            WHERE v.owner_company_id IS NOT NULL
            AND NOT EXISTS (
              SELECT 1 FROM vehicle_ownership_history voh 
              WHERE voh.vehicle_id = v.id
            )
            RETURNING id
          `);
                    console.log(`   ‚úÖ ${migratedRows.rowCount} existuj√∫cich vozidiel migrovanych do ownership history`);
                }
                else {
                    console.log('   ‚ÑπÔ∏è vehicle_ownership_history tabuƒæka u≈æ existuje');
                }
                console.log('‚úÖ Migr√°cia 18: Vehicle Ownership History √∫spe≈°ne vytvoren√°');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 18 chyba:', error.message);
            }
            // Migr√°cia 19: Vehicle Company Snapshot - Zamrazenie historick√Ωch pren√°jmov üéØ
            try {
                console.log('üìã Migr√°cia 19: Prid√°vanie vehicle_company_snapshot do rentals...');
                // Pridaj stƒ∫pec pre snapshot company name
                await client.query(`
          ALTER TABLE rentals 
          ADD COLUMN IF NOT EXISTS vehicle_company_snapshot VARCHAR(255)
        `);
                console.log('   ‚úÖ vehicle_company_snapshot stƒ∫pec pridan√Ω');
                // Migr√°cia existuj√∫cich pren√°jmov - nastav historical ownership
                console.log('   üîÑ Nastavujem historical ownership pre existuj√∫ce pren√°jmy...');
                const existingRentals = await client.query(`
          SELECT r.id, r.vehicle_id, r.start_date, r.vehicle_company_snapshot
          FROM rentals r 
          WHERE r.vehicle_company_snapshot IS NULL
        `);
                console.log(`   üìä Na≈°iel som ${existingRentals.rows.length} pren√°jmov na migr√°ciu`);
                let migratedCount = 0;
                for (const rental of existingRentals.rows) {
                    // Sk√∫s najs≈• historical owner z ownership history
                    const historicalOwner = await client.query(`
            SELECT owner_company_name
            FROM vehicle_ownership_history
            WHERE vehicle_id = $1
              AND valid_from <= $2
              AND (valid_to IS NULL OR valid_to > $2)
            ORDER BY valid_from DESC
            LIMIT 1
          `, [rental.vehicle_id, rental.start_date]);
                    let companyName = null;
                    if (historicalOwner.rows.length > 0) {
                        companyName = historicalOwner.rows[0].owner_company_name;
                    }
                    else {
                        // Fallback - aktu√°lny owner z vehicles
                        const currentOwner = await client.query(`
              SELECT company FROM vehicles WHERE id = $1
            `, [rental.vehicle_id]);
                        if (currentOwner.rows.length > 0) {
                            companyName = currentOwner.rows[0].company;
                        }
                    }
                    if (companyName) {
                        await client.query(`
              UPDATE rentals 
              SET vehicle_company_snapshot = $1 
              WHERE id = $2
            `, [companyName, rental.id]);
                        migratedCount++;
                    }
                }
                console.log(`   ‚úÖ Migr√°cia dokonƒçen√° pre ${migratedCount} pren√°jmov`);
                console.log('‚úÖ Migr√°cia 19: Vehicle Company Snapshot √∫spe≈°ne vytvoren√°');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 19 chyba:', error.message);
            }
            // Migr√°cia 20: CLEAN SOLUTION - Nahradi≈• komplikovan√Ω snapshot jednoduch√Ωm company field üéØ
            try {
                console.log('üìã Migr√°cia 20: CLEAN SOLUTION - Jednoduch√Ω company field...');
                // Pridaj jednoduch√Ω company stƒ∫pec
                await client.query(`
          ALTER TABLE rentals 
          ADD COLUMN IF NOT EXISTS company VARCHAR(255)
        `);
                console.log('   ‚úÖ company stƒ∫pec pridan√Ω');
                // Migr√°cia d√°t z vehicle_company_snapshot do company
                console.log('   üîÑ Kop√≠rujem d√°ta z vehicle_company_snapshot do company...');
                const migrateResult = await client.query(`
          UPDATE rentals 
          SET company = COALESCE(vehicle_company_snapshot, (
            SELECT v.company 
            FROM vehicles v 
            WHERE v.id = rentals.vehicle_id
          ))
          WHERE company IS NULL
        `);
                console.log(`   üìä Migrovan√Ωch ${migrateResult.rowCount} pren√°jmov`);
                // Po √∫spe≈°nej migr√°cii m√¥≈æeme odstr√°ni≈• star√Ω komplikovan√Ω stƒ∫pec
                console.log('   üßπ Odstra≈àujem star√Ω vehicle_company_snapshot stƒ∫pec...');
                try {
                    await client.query(`ALTER TABLE rentals DROP COLUMN IF EXISTS vehicle_company_snapshot`);
                    console.log('   ‚úÖ vehicle_company_snapshot stƒ∫pec odstr√°nen√Ω');
                }
                catch (dropError) {
                    console.log('   ‚ö†Ô∏è Nemo≈æno odstr√°ni≈• vehicle_company_snapshot:', dropError.message);
                }
                console.log('‚úÖ Migr√°cia 20: CLEAN SOLUTION √∫spe≈°ne dokonƒçen√°');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 20 chyba:', error.message);
            }
            // Migr√°cia 21: üõ°Ô∏è BULLETPROOF - Historick√Ω backfill company (NIKDY sa nezmen√≠!) ‚úÖ
            try {
                console.log('üìã Migr√°cia 21: üõ°Ô∏è BULLETPROOF - Historick√© company pre pren√°jmy...');
                // Reset v≈°etk√Ωch company na NULL pre rebackfill
                console.log('   üßπ Resetujem company stƒ∫pce pre rebackfill...');
                await client.query(`UPDATE rentals SET company = NULL`);
                // Backfill pomocou HISTORICKEJ ownership na z√°klade rental.startDate
                console.log('   üìÖ Backfillujem historick√© company na z√°klade startDate...');
                const backfillResult = await client.query(`
          UPDATE rentals 
          SET company = (
            SELECT voh.owner_company_name
            FROM vehicle_ownership_history voh
            WHERE voh.vehicle_id = rentals.vehicle_id
              AND voh.valid_from <= rentals.start_date
              AND (voh.valid_to IS NULL OR voh.valid_to > rentals.start_date)
            LIMIT 1
          )
          WHERE company IS NULL
        `);
                console.log(`   üìä Backfillovan√© ${backfillResult.rowCount} pren√°jmov s historickou company`);
                // Fallback pre pren√°jmy bez ownership history - pou≈æij aktu√°lnu company
                console.log('   üîÑ Fallback pre pren√°jmy bez ownership history...');
                const fallbackResult = await client.query(`
          UPDATE rentals 
          SET company = (
            SELECT v.company 
            FROM vehicles v 
            WHERE v.id = rentals.vehicle_id
          )
          WHERE company IS NULL
        `);
                console.log(`   üìä Fallback ${fallbackResult.rowCount} pren√°jmov s aktu√°lnou company`);
                // Overenie v√Ωsledku
                const nullCompanyCount = await client.query(`
          SELECT COUNT(*) as count FROM rentals WHERE company IS NULL
        `);
                console.log(`   ‚úÖ Zost√°va ${nullCompanyCount.rows[0].count} pren√°jmov bez company`);
                console.log('‚úÖ Migr√°cia 21: üõ°Ô∏è BULLETPROOF historick√© company FIX dokonƒçen√Ω');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 21 chyba:', error.message);
            }
            // Migr√°cia 22: ‚ö° PERFORMANCE INDEXY - Optimaliz√°cia r√Ωchlosti naƒç√≠tavania d√°t
            try {
                console.log('üìã Migr√°cia 22: ‚ö° Prid√°vanie performance indexov pre r√Ωchlej≈°ie naƒç√≠tanie...');
                // üöÄ INDEX 1: rentals.vehicle_id - Pre r√Ωchlej≈°√≠ JOIN v getRentals()
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_rentals_vehicle_id ON rentals(vehicle_id)
        `);
                console.log('   ‚úÖ Index idx_rentals_vehicle_id pridan√Ω');
                // üöÄ INDEX 2: vehicles.owner_company_id - Pre r√Ωchlej≈°ie permission filtering
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_vehicles_owner_company_id ON vehicles(owner_company_id)
        `);
                console.log('   ‚úÖ Index idx_vehicles_owner_company_id pridan√Ω');
                // üöÄ INDEX 3: rentals.created_at DESC - Pre r√Ωchlej≈°ie ORDER BY v getRentals()
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_rentals_created_at_desc ON rentals(created_at DESC)
        `);
                console.log('   ‚úÖ Index idx_rentals_created_at_desc pridan√Ω');
                // üöÄ INDEX 4: vehicles.created_at DESC - Pre r√Ωchlej≈°ie ORDER BY v getVehicles()
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_vehicles_created_at_desc ON vehicles(created_at DESC)
        `);
                console.log('   ‚úÖ Index idx_vehicles_created_at_desc pridan√Ω');
                // üöÄ INDEX 5: expenses.vehicle_id - Pre r√Ωchlej≈°ie queries v expense API
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_expenses_vehicle_id ON expenses(vehicle_id)
        `);
                console.log('   ‚úÖ Index idx_expenses_vehicle_id pridan√Ω');
                // üöÄ INDEX 6: expenses.date DESC - Pre r√Ωchlej≈°ie date filtering
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_expenses_date_desc ON expenses(date DESC)
        `);
                console.log('   ‚úÖ Index idx_expenses_date_desc pridan√Ω');
                console.log('‚úÖ Migr√°cia 22: ‚ö° Performance indexy √∫spe≈°ne pridan√© (oƒçak√°van√° √∫spora: 30-50% r√Ωchlos≈•)');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 22 chyba:', error.message);
            }
            // Migr√°cia 23: üîÑ FLEXIBILN√â PREN√ÅJMY - Pridanie stƒ∫pcov pre hybridn√Ω pr√≠stup
            try {
                console.log('üìã Migr√°cia 23: üîÑ Prid√°vanie stƒ∫pcov pre flexibiln√© pren√°jmy...');
                await client.query(`
          ALTER TABLE rentals 
          ADD COLUMN IF NOT EXISTS rental_type VARCHAR(20) DEFAULT 'standard',
          ADD COLUMN IF NOT EXISTS is_flexible BOOLEAN DEFAULT false,
          ADD COLUMN IF NOT EXISTS flexible_end_date DATE,
          ADD COLUMN IF NOT EXISTS can_be_overridden BOOLEAN DEFAULT false,
          ADD COLUMN IF NOT EXISTS override_priority INTEGER DEFAULT 5,
          ADD COLUMN IF NOT EXISTS notification_threshold INTEGER DEFAULT 3,
          ADD COLUMN IF NOT EXISTS auto_extend BOOLEAN DEFAULT false,
          ADD COLUMN IF NOT EXISTS override_history JSONB DEFAULT '[]'::jsonb;
        `);
                console.log('   ‚úÖ Flexibiln√© pren√°jmy stƒ∫pce pridan√© do rentals tabuƒæky');
                // Vytvorenie indexu pre r√Ωchlej≈°ie vyhƒæad√°vanie flexibiln√Ωch pren√°jmov
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_rentals_flexible ON rentals(is_flexible, rental_type) 
          WHERE is_flexible = true;
        `);
                console.log('   ‚úÖ Index pre flexibiln√© pren√°jmy vytvoren√Ω');
                // Vytvorenie indexu pre override priority
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_rentals_override_priority ON rentals(override_priority, can_be_overridden) 
          WHERE can_be_overridden = true;
        `);
                console.log('   ‚úÖ Index pre override priority vytvoren√Ω');
                console.log('‚úÖ Migr√°cia 23: üîÑ Flexibiln√© pren√°jmy √∫spe≈°ne implementovan√©!');
                console.log('   üìù Nov√© funkcie:');
                console.log('   ‚Ä¢ rental_type: standard | flexible | priority');
                console.log('   ‚Ä¢ is_flexible: true/false flag');
                console.log('   ‚Ä¢ flexible_end_date: odhadovan√Ω koniec');
                console.log('   ‚Ä¢ can_be_overridden: mo≈ænos≈• prep√≠sania');
                console.log('   ‚Ä¢ override_priority: priorita (1-10)');
                console.log('   ‚Ä¢ notification_threshold: dni vopred na upozornenie');
                console.log('   ‚Ä¢ auto_extend: automatick√© predƒ∫≈æenie');
                console.log('   ‚Ä¢ override_history: hist√≥ria zmien');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 23 chyba:', error.message);
            }
            // Migr√°cia 24: üöó VEHICLE CATEGORIES - Pridanie kateg√≥ri√≠ vozidiel pre lep≈°ie filtrovanie
            try {
                console.log('üìã Migr√°cia 24: üöó Prid√°vanie kateg√≥ri√≠ vozidiel...');
                // Skontroluj ƒçi category stƒ∫pec u≈æ existuje
                const columnExists = await client.query(`
          SELECT column_name 
          FROM information_schema.columns 
          WHERE table_name = 'vehicles' AND column_name = 'category'
        `);
                if (columnExists.rows.length === 0) {
                    // Vytvor ENUM pre kateg√≥rie vozidiel
                    await client.query(`
            DO $$ BEGIN
              CREATE TYPE vehicle_category AS ENUM (
                'nizka-trieda',    -- üöó N√≠zka trieda (≈†koda Fabia, Hyundai i20)
                'stredna-trieda',  -- üöô Stredn√° trieda (VW Golf, Opel Astra)
                'vyssia-stredna',  -- üöò Vy≈°≈°ia stredn√° (BMW 3, Audi A4)
                'luxusne',         -- üíé Luxusn√© (BMW 7, Mercedes S)
                'sportove',        -- üèéÔ∏è ≈†portov√© (BMW M, AMG)
                'suv',             -- üöú SUV (BMW X5, Audi Q7)
                'viacmiestne',     -- üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Viacmiestne (VW Sharan, 7+ sedadiel)
                'dodavky'          -- üì¶ Dod√°vky (Sprinter, Transit)
              );
            EXCEPTION
              WHEN duplicate_object THEN null;
            END $$;
          `);
                    // Pridaj category stƒ∫pec do vehicles tabuƒæky
                    await client.query(`
            ALTER TABLE vehicles 
            ADD COLUMN category vehicle_category DEFAULT 'stredna-trieda'
          `);
                    console.log('   ‚úÖ ENUM vehicle_category vytvoren√Ω');
                    console.log('   ‚úÖ category stƒ∫pec pridan√Ω do vehicles tabuƒæky');
                    console.log('   üìã 8 kateg√≥ri√≠ dostupn√Ωch: nizka-trieda, stredna-trieda, vyssia-stredna, luxusne, sportove, suv, viacmiestne, dodavky');
                }
                else {
                    console.log('   ‚ÑπÔ∏è category stƒ∫pec u≈æ existuje');
                }
                console.log('‚úÖ Migr√°cia 24: üöó Vehicle Categories √∫spe≈°ne implementovan√©!');
                console.log('   üéØ Vozidl√° teraz m√¥≈æu by≈• kategorizovan√© pre lep≈°ie filtrovanie');
                console.log('   üîç Frontend m√¥≈æe pou≈æ√≠va≈• multi-select category filter');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 24 chyba:', error.message);
            }
            // Migr√°cia 25: üóëÔ∏è AUDIT LOGGING REMOVAL - Odstra≈àujeme audit logs syst√©m
            try {
                console.log('üìã Migr√°cia 25: üóëÔ∏è Odstra≈àujem audit_logs tabuƒæku...');
                // Odstr√°nenie audit_logs tabuƒæky a v≈°etk√Ωch indexov
                await client.query(`DROP TABLE IF EXISTS audit_logs CASCADE;`);
                console.log('‚úÖ Migr√°cia 25: üóëÔ∏è Audit Logs syst√©m √∫spe≈°ne odstr√°nen√Ω!');
                console.log('   üßπ Tabuƒæka audit_logs a v≈°etky indexy odstr√°nen√©');
                console.log('   ‚ö° Zn√≠≈æen√° z√°≈•a≈æ na datab√°zu a lep≈°ie performance');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 25 chyba:', error.message);
            }
            // Migr√°cia 26: üìß IMAP EMAIL SUPPORT - Pridanie customer email stƒ∫pcov do rentals
            try {
                console.log('üìã Migr√°cia 26: üìß Prid√°vanie IMAP email support stƒ∫pcov do rentals...');
                // Skontroluj ƒçi stƒ∫pce u≈æ existuj√∫
                const columnCheck = await client.query(`
          SELECT column_name 
          FROM information_schema.columns 
          WHERE table_name = 'rentals' AND column_name IN ('customer_email', 'customer_phone', 'order_number', 'vehicle_name', 'vehicle_code', 'handover_place', 'daily_kilometers', 'approval_status', 'auto_processed_at', 'email_content')
        `);
                const existingColumns = columnCheck.rows.map((row) => row.column_name);
                const neededColumns = [
                    'customer_email', 'customer_phone', 'order_number', 'vehicle_name',
                    'vehicle_code', 'handover_place', 'daily_kilometers', 'approval_status',
                    'auto_processed_at', 'email_content'
                ];
                const missingColumns = neededColumns.filter(col => !existingColumns.includes(col));
                if (missingColumns.length > 0) {
                    console.log(`   üìß Prid√°vam ${missingColumns.length} ch√Ωbaj√∫cich stƒ∫pcov:`, missingColumns);
                    await client.query(`
            ALTER TABLE rentals 
            ADD COLUMN IF NOT EXISTS customer_email VARCHAR(255),
            ADD COLUMN IF NOT EXISTS customer_phone VARCHAR(30),
            ADD COLUMN IF NOT EXISTS order_number VARCHAR(100),
            ADD COLUMN IF NOT EXISTS vehicle_name VARCHAR(255),
            ADD COLUMN IF NOT EXISTS vehicle_code VARCHAR(100),
            ADD COLUMN IF NOT EXISTS handover_place VARCHAR(255),
            ADD COLUMN IF NOT EXISTS daily_kilometers INTEGER,
            ADD COLUMN IF NOT EXISTS approval_status VARCHAR(30) DEFAULT 'pending',
            ADD COLUMN IF NOT EXISTS auto_processed_at TIMESTAMP,
            ADD COLUMN IF NOT EXISTS email_content TEXT
          `);
                    console.log('   ‚úÖ IMAP stƒ∫pce pridan√© do rentals tabuƒæky');
                }
                else {
                    console.log('   ‚ÑπÔ∏è V≈°etky IMAP stƒ∫pce u≈æ existuj√∫');
                }
                // Pridaj indexy pre lep≈°iu performance pri vyhƒæad√°van√≠ emailov√Ωch objedn√°vok
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_rentals_order_number ON rentals(order_number);
          CREATE INDEX IF NOT EXISTS idx_rentals_customer_email ON rentals(customer_email);
          CREATE INDEX IF NOT EXISTS idx_rentals_approval_status ON rentals(approval_status);
          CREATE INDEX IF NOT EXISTS idx_rentals_auto_processed_at ON rentals(auto_processed_at DESC);
        `);
                console.log('‚úÖ Migr√°cia 26: üìß IMAP Email Support √∫spe≈°ne implementovan√Ω!');
                console.log('   üìß Customer email, phone, order number support');
                console.log('   üöó Vehicle name a code pre email parsing');
                console.log('   üìç Handover place a daily kilometers');
                console.log('   ‚öñÔ∏è Approval status workflow pre email objedn√°vky');
                console.log('   üîç Optimalizovan√© indexy pre email vyhƒæad√°vanie');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 26 chyba:', error.message);
            }
            // Migr√°cia 27: üìß EMAIL MANAGEMENT DASHBOARD - Email History & Tracking
            try {
                console.log('üìã Migr√°cia 27: üìß Vytv√°ram Email Management Dashboard ≈°trukt√∫ru...');
                // Vytvorenie tabuƒæky pre email hist√≥riu a tracking
                await client.query(`
          CREATE TABLE IF NOT EXISTS email_processing_history (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            email_id TEXT UNIQUE NOT NULL,
            message_id TEXT,
            subject TEXT NOT NULL,
            sender TEXT NOT NULL,
            recipient TEXT DEFAULT 'info@blackrent.sk',
            email_content TEXT,
            email_html TEXT,
            received_at TIMESTAMP NOT NULL,
            processed_at TIMESTAMP,
            status TEXT NOT NULL DEFAULT 'new' CHECK (status IN ('new', 'processing', 'processed', 'rejected', 'archived', 'duplicate')),
            action_taken TEXT CHECK (action_taken IN ('approved', 'rejected', 'edited', 'deleted', 'archived', 'duplicate')),
            processed_by UUID REFERENCES users(id),
            parsed_data JSONB,
            confidence_score DECIMAL(3,2) DEFAULT 0.0,
            error_message TEXT,
            notes TEXT,
            tags TEXT[],
            rental_id UUID REFERENCES rentals(id),
            is_blacklisted BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        `);
                // Vytvorenie indexov pre optim√°lnu performance
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_email_history_email_id ON email_processing_history(email_id);
          CREATE INDEX IF NOT EXISTS idx_email_history_status ON email_processing_history(status);
          CREATE INDEX IF NOT EXISTS idx_email_history_sender ON email_processing_history(sender);
          CREATE INDEX IF NOT EXISTS idx_email_history_received_at ON email_processing_history(received_at DESC);
          CREATE INDEX IF NOT EXISTS idx_email_history_processed_by ON email_processing_history(processed_by);
          CREATE INDEX IF NOT EXISTS idx_email_history_rental_id ON email_processing_history(rental_id);
          CREATE INDEX IF NOT EXISTS idx_email_history_search ON email_processing_history USING gin(to_tsvector('english', subject || ' ' || COALESCE(email_content, '')));
        `);
                // Vytvorenie tabuƒæky pre email actions log
                await client.query(`
          CREATE TABLE IF NOT EXISTS email_action_logs (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            email_id UUID REFERENCES email_processing_history(id),
            user_id UUID REFERENCES users(id),
            action TEXT NOT NULL,
            old_values JSONB,
            new_values JSONB,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        `);
                await client.query(`
          CREATE INDEX IF NOT EXISTS idx_email_action_logs_email_id ON email_action_logs(email_id);
          CREATE INDEX IF NOT EXISTS idx_email_action_logs_user_id ON email_action_logs(user_id);
          CREATE INDEX IF NOT EXISTS idx_email_action_logs_created_at ON email_action_logs(created_at DESC);
        `);
                // Trigger na automatick√© updatovanie updated_at stƒ∫pca
                await client.query(`
          CREATE OR REPLACE FUNCTION update_email_history_updated_at()
          RETURNS TRIGGER AS $$
          BEGIN
            NEW.updated_at = CURRENT_TIMESTAMP;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;

          DROP TRIGGER IF EXISTS trigger_email_history_updated_at ON email_processing_history;
          CREATE TRIGGER trigger_email_history_updated_at
            BEFORE UPDATE ON email_processing_history
            FOR EACH ROW
            EXECUTE FUNCTION update_email_history_updated_at();
        `);
                console.log('‚úÖ Migr√°cia 27: üìß Email Management Dashboard √∫spe≈°ne vytvoren√Ω!');
                console.log('   üìß Email processing history tabuƒæka');
                console.log('   üìä Email action logs pre audit trail');
                console.log('   üîç Optimalizovan√© indexy pre search & filtering');
                console.log('   ‚ö° Auto-update triggers pre timestamp tracking');
            }
            catch (error) {
                console.log('‚ö†Ô∏è Migr√°cia 27 chyba:', error.message);
            }
        }
        catch (error) {
            console.log('‚ö†Ô∏è Migr√°cie celkovo preskoƒçen√©:', error.message);
        }
    }
    // DATA INTEGRITY VALIDATION
    async validateDataIntegrity(client) {
        console.log('üîç Sp√∫≈°≈•am data integrity validation...');
        try {
            // 1. Kontrola orphaned rentals (rentals bez platn√Ωch vehicles)
            const orphanedRentals = await client.query(`
        SELECT r.id, r.customer_name, r.vehicle_id 
        FROM rentals r 
        LEFT JOIN vehicles v ON r.vehicle_id = v.id 
        WHERE r.vehicle_id IS NOT NULL AND v.id IS NULL
      `);
            if (orphanedRentals.rows.length > 0) {
                console.log(`‚ö†Ô∏è PROBL√âM: ${orphanedRentals.rows.length} rentals m√° neplatn√© vehicle_id`);
                for (const rental of orphanedRentals.rows) {
                    console.log(`   ‚ùå Rental ${rental.id} (${rental.customer_name}) -> neexistuj√∫ce vehicle_id: ${rental.vehicle_id}`);
                }
            }
            else {
                console.log('‚úÖ V≈°etky rentals maj√∫ platn√© vehicle_id');
            }
            // 2. Kontrola vehicles bez owner_company_id
            const vehiclesWithoutCompany = await client.query(`
        SELECT id, brand, model, license_plate, company 
        FROM vehicles 
        WHERE owner_company_id IS NULL
      `);
            if (vehiclesWithoutCompany.rows.length > 0) {
                console.log(`‚ö†Ô∏è PROBL√âM: ${vehiclesWithoutCompany.rows.length} vozidiel nem√° owner_company_id`);
            }
            else {
                console.log('‚úÖ V≈°etky vozidl√° maj√∫ owner_company_id');
            }
            // 3. Kontrola users bez company_id
            const usersWithoutCompany = await client.query(`
        SELECT id, username, role 
        FROM users 
        WHERE company_id IS NULL AND role = 'company_owner'
      `);
            if (usersWithoutCompany.rows.length > 0) {
                console.log(`‚ö†Ô∏è PROBL√âM: ${usersWithoutCompany.rows.length} company_owner users nem√° company_id`);
            }
            else {
                console.log('‚úÖ V≈°etci company_owner users maj√∫ company_id');
            }
            // 4. Kontrola UUID konzistentnosti
            const uuidConsistency = await client.query(`
        SELECT 
          (SELECT COUNT(*) FROM vehicles WHERE id ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$') as valid_vehicle_uuids,
          (SELECT COUNT(*) FROM vehicles) as total_vehicles,
          (SELECT COUNT(*) FROM users WHERE id ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$') as valid_user_uuids,
          (SELECT COUNT(*) FROM users) as total_users
      `);
            const uuidData = uuidConsistency.rows[0];
            if (uuidData.valid_vehicle_uuids == uuidData.total_vehicles && uuidData.valid_user_uuids == uuidData.total_users) {
                console.log('‚úÖ UUID form√°t je konzistentn√Ω');
            }
            else {
                console.log(`‚ö†Ô∏è PROBL√âM: UUID form√°t nie je konzistentn√Ω - Vehicles: ${uuidData.valid_vehicle_uuids}/${uuidData.total_vehicles}, Users: ${uuidData.valid_user_uuids}/${uuidData.total_users}`);
            }
            console.log('‚úÖ Data integrity validation dokonƒçen√°');
        }
        catch (error) {
            console.log('‚ö†Ô∏è Data integrity validation chyba:', error.message);
        }
    }
    async createDefaultAdmin(client) {
        try {
            const adminExists = await client.query('SELECT id FROM users WHERE username = $1', ['admin']);
            if (adminExists.rows.length === 0) {
                const hashedPassword = await bcryptjs_1.default.hash('admin123', 12);
                await client.query('INSERT INTO users (username, email, password_hash, role) VALUES ($1, $2, $3, $4)', ['admin', 'admin@blackrent.sk', hashedPassword, 'admin']);
                console.log('üë§ Admin pou≈æ√≠vateƒæ vytvoren√Ω (username: admin, password: admin123)');
            }
        }
        catch (error) {
            console.error('Chyba pri vytv√°ran√≠ admin pou≈æ√≠vateƒæa:', error);
        }
    }
    async createSampleDataIfEmpty(client) {
        try {
            // Skontroluj ƒçi existuj√∫ nejak√© d√°ta
            const vehicleCount = await client.query('SELECT COUNT(*) FROM vehicles');
            const customerCount = await client.query('SELECT COUNT(*) FROM customers');
            const rentalCount = await client.query('SELECT COUNT(*) FROM rentals');
            console.log('üìä Poƒçet z√°znamov: vehicles:', vehicleCount.rows[0].count, 'customers:', customerCount.rows[0].count, 'rentals:', rentalCount.rows[0].count);
            // VYPNUT√â: Automatick√© vytv√°ranie testov√Ωch d√°t
            if (false && rentalCount.rows[0].count === '0' && vehicleCount.rows[0].count === '0') {
                console.log('üìã Vytv√°ranie testovac√≠ch d√°t...');
                // Vytvorenie firiem - jednoducho bez duplicitov
                try {
                    // Skontroluj existuj√∫ce firmy
                    const existingCompanies = await client.query('SELECT name FROM companies WHERE name IN ($1, $2, $3)', ['ABC Rent', 'Premium Cars', 'City Rent']);
                    const existingNames = existingCompanies.rows.map(row => row.name);
                    const companiesToInsert = ['ABC Rent', 'Premium Cars', 'City Rent'].filter(name => !existingNames.includes(name));
                    if (companiesToInsert.length > 0) {
                        const values = companiesToInsert.map((name, index) => `($${index + 1})`).join(', ');
                        await client.query(`INSERT INTO companies (name) VALUES ${values}`, companiesToInsert);
                        console.log('‚úÖ Firmy vytvoren√©:', companiesToInsert);
                    }
                }
                catch (error) {
                    console.log('‚ö†Ô∏è Chyba pri vytv√°ran√≠ firiem:', error.message);
                }
                // Vytvorenie pois≈•ovn√≠
                try {
                    // Skontroluj existuj√∫ce pois≈•ovne
                    const existingInsurers = await client.query('SELECT name FROM insurers WHERE name IN ($1, $2)', ['Allianz', 'Generali']);
                    const existingInsurerNames = existingInsurers.rows.map(row => row.name);
                    const insurersToInsert = ['Allianz', 'Generali'].filter(name => !existingInsurerNames.includes(name));
                    if (insurersToInsert.length > 0) {
                        const values = insurersToInsert.map((name, index) => `($${index + 1})`).join(', ');
                        await client.query(`INSERT INTO insurers (name) VALUES ${values}`, insurersToInsert);
                        console.log('‚úÖ Pois≈•ovne vytvoren√©:', insurersToInsert);
                    }
                }
                catch (error) {
                    console.log('‚ö†Ô∏è Chyba pri vytv√°ran√≠ pois≈•ovn√≠:', error.message);
                }
                // Vytvorenie vozidiel - len ak neexistuj√∫
                try {
                    const existingVehicles = await client.query('SELECT COUNT(*) FROM vehicles WHERE license_plate IN ($1, $2, $3, $4, $5)', ['BA123AB', 'BA456CD', 'BA789EF', 'BA111XY', 'BA222XZ']);
                    if (existingVehicles.rows[0].count === '0') {
                        const vehicleResult = await client.query(`
              INSERT INTO vehicles (brand, model, license_plate, company, pricing, commission, status) VALUES 
              ('BMW', 'X5', 'BA123AB', 'ABC Rent', $1, $2, 'available'),
              ('Mercedes', 'E-Class', 'BA456CD', 'Premium Cars', $3, $4, 'available'),
              ('Audi', 'A4', 'BA789EF', 'City Rent', $5, $6, 'available'),
              ('Skoda', 'Octavia', 'BA111XY', 'City Rent', $7, $8, 'available'),
              ('Volkswagen', 'Passat', 'BA222XZ', 'ABC Rent', $9, $10, 'available')
              RETURNING id, brand, model
            `, [
                            // BMW X5 - Premium SUV pricing
                            JSON.stringify([
                                { id: '1', minDays: 0, maxDays: 1, pricePerDay: 120 }, // 0-1 dn√≠
                                { id: '2', minDays: 2, maxDays: 3, pricePerDay: 110 }, // 2-3 dni
                                { id: '3', minDays: 4, maxDays: 7, pricePerDay: 100 }, // 4-7 dn√≠
                                { id: '4', minDays: 8, maxDays: 14, pricePerDay: 90 }, // 8-14 dn√≠
                                { id: '5', minDays: 15, maxDays: 22, pricePerDay: 85 }, // 15-22 dn√≠
                                { id: '6', minDays: 23, maxDays: 30, pricePerDay: 80 }, // 23-30 dn√≠
                                { id: '7', minDays: 31, maxDays: 365, pricePerDay: 75 } // 31+ dn√≠
                            ]),
                            JSON.stringify({ type: 'percentage', value: 20 }),
                            // Mercedes E-Class - Business class pricing
                            JSON.stringify([
                                { id: '1', minDays: 0, maxDays: 1, pricePerDay: 100 }, // 0-1 dn√≠
                                { id: '2', minDays: 2, maxDays: 3, pricePerDay: 95 }, // 2-3 dni
                                { id: '3', minDays: 4, maxDays: 7, pricePerDay: 85 }, // 4-7 dn√≠
                                { id: '4', minDays: 8, maxDays: 14, pricePerDay: 75 }, // 8-14 dn√≠
                                { id: '5', minDays: 15, maxDays: 22, pricePerDay: 70 }, // 15-22 dn√≠
                                { id: '6', minDays: 23, maxDays: 30, pricePerDay: 65 }, // 23-30 dn√≠
                                { id: '7', minDays: 31, maxDays: 365, pricePerDay: 60 } // 31+ dn√≠
                            ]),
                            JSON.stringify({ type: 'percentage', value: 20 }),
                            // Audi A4 - Standard sedan pricing
                            JSON.stringify([
                                { id: '1', minDays: 0, maxDays: 1, pricePerDay: 80 }, // 0-1 dn√≠
                                { id: '2', minDays: 2, maxDays: 3, pricePerDay: 75 }, // 2-3 dni
                                { id: '3', minDays: 4, maxDays: 7, pricePerDay: 70 }, // 4-7 dn√≠
                                { id: '4', minDays: 8, maxDays: 14, pricePerDay: 60 }, // 8-14 dn√≠
                                { id: '5', minDays: 15, maxDays: 22, pricePerDay: 55 }, // 15-22 dn√≠
                                { id: '6', minDays: 23, maxDays: 30, pricePerDay: 50 }, // 23-30 dn√≠
                                { id: '7', minDays: 31, maxDays: 365, pricePerDay: 45 } // 31+ dn√≠
                            ]),
                            JSON.stringify({ type: 'percentage', value: 20 }),
                            // Skoda Octavia - Budget friendly pricing
                            JSON.stringify([
                                { id: '1', minDays: 0, maxDays: 1, pricePerDay: 60 }, // 0-1 dn√≠
                                { id: '2', minDays: 2, maxDays: 3, pricePerDay: 55 }, // 2-3 dni
                                { id: '3', minDays: 4, maxDays: 7, pricePerDay: 50 }, // 4-7 dn√≠
                                { id: '4', minDays: 8, maxDays: 14, pricePerDay: 45 }, // 8-14 dn√≠
                                { id: '5', minDays: 15, maxDays: 22, pricePerDay: 40 }, // 15-22 dn√≠
                                { id: '6', minDays: 23, maxDays: 30, pricePerDay: 35 }, // 23-30 dn√≠
                                { id: '7', minDays: 31, maxDays: 365, pricePerDay: 30 } // 31+ dn√≠
                            ]),
                            JSON.stringify({ type: 'percentage', value: 20 }),
                            // Volkswagen Passat - Mid-range pricing
                            JSON.stringify([
                                { id: '1', minDays: 0, maxDays: 1, pricePerDay: 70 }, // 0-1 dn√≠
                                { id: '2', minDays: 2, maxDays: 3, pricePerDay: 65 }, // 2-3 dni
                                { id: '3', minDays: 4, maxDays: 7, pricePerDay: 60 }, // 4-7 dn√≠
                                { id: '4', minDays: 8, maxDays: 14, pricePerDay: 55 }, // 8-14 dn√≠
                                { id: '5', minDays: 15, maxDays: 22, pricePerDay: 50 }, // 15-22 dn√≠
                                { id: '6', minDays: 23, maxDays: 30, pricePerDay: 45 }, // 23-30 dn√≠
                                { id: '7', minDays: 31, maxDays: 365, pricePerDay: 40 } // 31+ dn√≠
                            ]),
                            JSON.stringify({ type: 'percentage', value: 20 })
                        ]);
                        const vehicles = vehicleResult.rows;
                        console.log('‚úÖ Vozidl√° vytvoren√©:', vehicles.length);
                        // Vytvorenie z√°kazn√≠kov
                        const customerResult = await client.query(`
              INSERT INTO customers (name, email, phone) VALUES 
              ('J√°n Nov√°k', 'jan.novak@email.com', '+421901234567'),
              ('M√°ria Svobodov√°', 'maria.svobodova@email.com', '+421907654321'),
              ('Peter Horv√°th', 'peter.horvath@email.com', '+421905111222')
              RETURNING id, name
            `);
                        const customers = customerResult.rows;
                        console.log('‚úÖ Z√°kazn√≠ci vytvoren√≠:', customers.length);
                        // Vytvorenie pren√°jmov s re√°lnymi ID
                        if (vehicles.length > 0 && customers.length > 0) {
                            await client.query(`
                INSERT INTO rentals (vehicle_id, customer_id, customer_name, start_date, end_date, total_price, commission, payment_method, paid, confirmed, handover_place) VALUES 
                ($1, $2, $3, '2025-01-20', '2025-01-23', 240.00, 36.00, 'bank_transfer', true, true, 'Bratislava - Hlavn√° stanica'),
                ($4, $5, $6, '2025-01-25', '2025-01-30', 400.00, 72.00, 'cash', false, true, 'Bratislava - Letisko'),
                ($7, $8, $9, '2025-01-28', '2025-02-02', 275.00, 33.00, 'bank_transfer', true, false, 'Ko≈°ice - Centrum')
              `, [
                                vehicles[0]?.id, customers[0]?.id, customers[0]?.name,
                                vehicles[1]?.id, customers[1]?.id, customers[1]?.name,
                                vehicles[2]?.id, customers[2]?.id, customers[2]?.name
                            ]);
                            console.log('‚úÖ Pren√°jmy vytvoren√©: 3');
                        }
                        console.log('üéâ Testov√© d√°ta √∫spe≈°ne vytvoren√©!');
                        console.log('üìä Vytvoren√©:');
                        console.log('   - 3 vozidl√° (BMW X5, Mercedes E-Class, Audi A4)');
                        console.log('   - 3 z√°kazn√≠kov (J√°n Nov√°k, M√°ria Svobodov√°, Peter Horv√°th)');
                        console.log('   - 3 pren√°jmy s r√¥znymi stavmi');
                        console.log('   - 3 firmy (ABC Rent, Premium Cars, City Rent)');
                        console.log('   - 2 pois≈•ovne (Allianz, Generali)');
                    }
                    else {
                        console.log('‚ÑπÔ∏è Vozidl√° u≈æ existuj√∫, preskakujem vytv√°ranie testovac√≠ch d√°t');
                    }
                }
                catch (vehicleError) {
                    console.log('‚ö†Ô∏è Chyba pri vytv√°ran√≠ vozidiel:', vehicleError.message);
                }
            }
            else {
                console.log('‚ÑπÔ∏è Datab√°za u≈æ obsahuje d√°ta, preskakujem vytv√°ranie testovac√≠ch d√°t');
            }
        }
        catch (error) {
            console.error('‚ö†Ô∏è Chyba pri vytv√°ran√≠ testovac√≠ch d√°t:', error);
        }
    }
    // Met√≥dy pre pou≈æ√≠vateƒæov
    async getUserByUsername(username) {
        try {
            // Najprv sk√∫s v hlavnej users tabuƒæke
            const result = await this.pool.query('SELECT id, username, email, password_hash as password, role, company_id, employee_number, hire_date, is_active, last_login, first_name, last_name, signature_template, created_at, updated_at FROM users WHERE username = $1', [username]);
            if (result.rows.length > 0) {
                const row = result.rows[0];
                return {
                    id: row.id,
                    username: row.username,
                    email: row.email,
                    password: row.password,
                    firstName: row.first_name,
                    lastName: row.last_name,
                    role: row.role,
                    companyId: row.company_id,
                    employeeNumber: row.employee_number,
                    hireDate: row.hire_date ? new Date(row.hire_date) : undefined,
                    isActive: row.is_active ?? true,
                    lastLogin: row.last_login ? new Date(row.last_login) : undefined,
                    signatureTemplate: row.signature_template,
                    createdAt: new Date(row.created_at),
                    updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
                };
            }
            return null;
        }
        catch (error) {
            console.error('‚ùå Chyba pri z√≠skavan√≠ pou≈æ√≠vateƒæa podƒæa username:', error);
            return null;
        }
    }
    async getUserById(id) {
        try {
            const result = await this.pool.query('SELECT id, username, email, password_hash as password, role, company_id, employee_number, hire_date, is_active, last_login, first_name, last_name, signature_template, created_at, updated_at FROM users WHERE id = $1', [id]);
            if (result.rows.length > 0) {
                const row = result.rows[0];
                return {
                    id: row.id,
                    username: row.username,
                    email: row.email,
                    password: row.password,
                    firstName: row.first_name,
                    lastName: row.last_name,
                    role: row.role,
                    companyId: row.company_id,
                    employeeNumber: row.employee_number,
                    hireDate: row.hire_date ? new Date(row.hire_date) : undefined,
                    isActive: row.is_active ?? true,
                    lastLogin: row.last_login ? new Date(row.last_login) : undefined,
                    signatureTemplate: row.signature_template,
                    createdAt: new Date(row.created_at),
                    updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
                };
            }
            return null;
        }
        catch (error) {
            console.error('‚ùå Chyba pri z√≠skavan√≠ pou≈æ√≠vateƒæa podƒæa ID:', error);
            return null;
        }
    }
    async createUser(userData) {
        const client = await this.pool.connect();
        try {
            console.log('üóÑÔ∏è Database createUser - userData:', userData);
            const hashedPassword = await bcryptjs_1.default.hash(userData.password, 12);
            const result = await client.query(`INSERT INTO users (
          username, email, password_hash, role, first_name, last_name, 
          company_id, employee_number, hire_date, is_active, signature_template
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) 
        RETURNING id, username, email, password_hash, role, first_name, last_name,
                  company_id, employee_number, hire_date, is_active, last_login,
                  signature_template, created_at, updated_at`, [
                userData.username,
                userData.email,
                hashedPassword,
                userData.role,
                userData.firstName,
                userData.lastName,
                userData.companyId || null, // UUID string, no conversion needed
                userData.employeeNumber,
                userData.hireDate,
                userData.isActive ?? true,
                userData.signatureTemplate
            ]);
            const row = result.rows[0];
            console.log('üóÑÔ∏è Database createUser - result row:', row);
            return {
                id: row.id.toString(),
                username: row.username,
                email: row.email,
                password: row.password_hash,
                role: row.role,
                firstName: row.first_name,
                lastName: row.last_name,
                companyId: row.company_id, // UUID string, no conversion needed
                employeeNumber: row.employee_number,
                hireDate: row.hire_date ? new Date(row.hire_date) : undefined,
                isActive: row.is_active ?? true,
                lastLogin: row.last_login ? new Date(row.last_login) : undefined,
                permissions: [], // Default empty permissions
                signatureTemplate: row.signature_template,
                createdAt: new Date(row.created_at),
                updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
            };
        }
        catch (error) {
            console.error('‚ùå Database createUser error:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    async updateUser(user) {
        const client = await this.pool.connect();
        try {
            const hashedPassword = await bcryptjs_1.default.hash(user.password, 12);
            await client.query('UPDATE users SET username = $1, email = $2, password_hash = $3, role = $4, company_id = $5, employee_number = $6, hire_date = $7, is_active = $8, first_name = $9, last_name = $10, signature_template = $11, updated_at = CURRENT_TIMESTAMP WHERE id = $12', [
                user.username,
                user.email,
                hashedPassword,
                user.role,
                user.companyId || null, // UUID string, no conversion needed
                user.employeeNumber,
                user.hireDate,
                user.isActive,
                user.firstName,
                user.lastName,
                user.signatureTemplate,
                user.id
            ]);
        }
        finally {
            client.release();
        }
    }
    async deleteUser(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM users WHERE id = $1', [id]); // Removed parseInt for UUID
        }
        finally {
            client.release();
        }
    }
    async getUsers() {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT id, username, email, password_hash as password, role, company_id, employee_number, hire_date, is_active, last_login, first_name, last_name, signature_template, created_at, updated_at FROM users ORDER BY created_at DESC');
            return result.rows.map(row => ({
                id: row.id?.toString(),
                username: row.username,
                email: row.email,
                password: row.password, // using alias from SELECT
                firstName: row.first_name,
                lastName: row.last_name,
                role: row.role,
                companyId: row.company_id,
                employeeNumber: row.employee_number,
                hireDate: row.hire_date ? new Date(row.hire_date) : undefined,
                isActive: row.is_active ?? true,
                lastLogin: row.last_login ? new Date(row.last_login) : undefined,
                permissions: [], // Default empty permissions
                signatureTemplate: row.signature_template,
                createdAt: new Date(row.created_at),
                updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
            }));
        }
        finally {
            client.release();
        }
    }
    // üöÄ F√ÅZA 1.3: CACHED VEHICLES - drastick√© zr√Ωchlenie kalend√°ra
    async getVehicles() {
        // Skontroluj cache
        const now = Date.now();
        if (this.vehicleCache && (now - this.vehicleCache.timestamp) < this.VEHICLE_CACHE_TTL) {
            console.log('‚ö° VEHICLE CACHE HIT - using cached vehicles');
            return this.vehicleCache.data;
        }
        console.log('üîÑ VEHICLE CACHE MISS - loading fresh vehicles from DB');
        const vehicles = await this.getVehiclesFresh();
        // Ulo≈æi≈• do cache
        this.vehicleCache = {
            data: vehicles,
            timestamp: now
        };
        console.log(`‚úÖ VEHICLE CACHE UPDATED - cached ${vehicles.length} vehicles for 10min`);
        return vehicles;
    }
    // Cache invalidation helper
    invalidateVehicleCache() {
        if (this.vehicleCache) {
            console.log('üóëÔ∏è VEHICLE CACHE INVALIDATED - will reload on next request');
            this.vehicleCache = null;
        }
    }
    // üöÄ F√ÅZA 2.2: CONNECTION REUSE helpers pre calendar API
    async getReusableConnection() {
        const now = Date.now();
        // Skontroluj, ƒçi m√°me akt√≠vne connection ƒço m√¥≈æeme reusova≈•
        if (this.calendarConnection &&
            (now - this.calendarConnectionLastUsed) < this.CONNECTION_REUSE_TIMEOUT) {
            console.log('‚ö° REUSING calendar connection (connection reuse)');
            this.calendarConnectionLastUsed = now;
            return this.calendarConnection;
        }
        // Z√≠skaj nov√© connection a ulo≈æ ho pre reuse
        console.log('üîÑ ACQUIRING new calendar connection');
        if (this.calendarConnection) {
            try {
                this.calendarConnection.release();
            }
            catch (e) { }
        }
        this.calendarConnection = await this.pool.connect();
        this.calendarConnectionLastUsed = now;
        return this.calendarConnection;
    }
    releaseReusableConnection(forceRelease = false) {
        if (forceRelease && this.calendarConnection) {
            console.log('üóëÔ∏è FORCE RELEASING calendar connection');
            this.calendarConnection.release();
            this.calendarConnection = null;
            this.calendarConnectionLastUsed = 0;
        }
        // Inak nech√°me connection alive pre reuse
    }
    // üöÄ F√ÅZA 2.3: SMART CACHE HELPERS
    generateCacheKey(prefix, startDate, endDate) {
        const start = startDate.toISOString().split('T')[0];
        const end = endDate.toISOString().split('T')[0];
        return `${prefix}:${start}:${end}`;
    }
    isValidCacheEntry(entry, ttl) {
        return (Date.now() - entry.timestamp) < ttl;
    }
    invalidateCalendarCache() {
        const beforeSize = this.calendarCache.size;
        this.calendarCache.clear();
        console.log(`üóëÔ∏è CALENDAR CACHE INVALIDATED - cleared ${beforeSize} entries`);
    }
    invalidateUnavailabilityCache() {
        const beforeSize = this.unavailabilityCache.size;
        this.unavailabilityCache.clear();
        console.log(`üóëÔ∏è UNAVAILABILITY CACHE INVALIDATED - cleared ${beforeSize} entries`);
    }
    cleanupExpiredCache() {
        const now = Date.now();
        // Cleanup calendar cache
        const calendarBefore = this.calendarCache.size;
        for (const [key, entry] of this.calendarCache.entries()) {
            if (!this.isValidCacheEntry(entry, this.CALENDAR_CACHE_TTL)) {
                this.calendarCache.delete(key);
            }
        }
        // Cleanup unavailability cache
        const unavailabilityBefore = this.unavailabilityCache.size;
        for (const [key, entry] of this.unavailabilityCache.entries()) {
            if (!this.isValidCacheEntry(entry, this.UNAVAILABILITY_CACHE_TTL)) {
                this.unavailabilityCache.delete(key);
            }
        }
        const calendarCleaned = calendarBefore - this.calendarCache.size;
        const unavailabilityCleaned = unavailabilityBefore - this.unavailabilityCache.size;
        if (calendarCleaned > 0 || unavailabilityCleaned > 0) {
            console.log(`üßπ CACHE CLEANUP: Removed ${calendarCleaned} calendar + ${unavailabilityCleaned} unavailability entries`);
        }
    }
    // üöÄ F√ÅZA 2.4: DATA STRUCTURE OPTIMIZATION
    optimizeCalendarDataStructure(data) {
        const startTime = Date.now();
        // Create vehicle lookup map (deduplication)
        const vehicleMap = new Map();
        data.vehicles.forEach((vehicle, index) => {
            vehicleMap.set(vehicle.id, {
                i: index, // Vehicle index instead of full object
                brand: vehicle.brand,
                model: vehicle.model,
                licensePlate: vehicle.licensePlate,
                status: vehicle.status
            });
        });
        // Optimize calendar structure - replace duplicate vehicle data with references
        const optimizedCalendar = data.calendar.map((day) => {
            return {
                date: day.date,
                vehicles: day.vehicles.map((vehicle) => {
                    const vehicleRef = vehicleMap.get(vehicle.vehicleId);
                    return {
                        vi: vehicleRef?.i, // Vehicle index reference
                        s: vehicle.status, // Status
                        ...(vehicle.rentalId && { ri: vehicle.rentalId }), // Rental ID only if exists
                        ...(vehicle.customerName && { cn: vehicle.customerName }), // Customer name only if exists
                        ...(vehicle.isFlexible !== undefined && { f: vehicle.isFlexible }), // Flexible flag
                        ...(vehicle.rentalType !== 'standard' && { rt: vehicle.rentalType }), // Rental type only if not standard
                        ...(vehicle.unavailabilityType && { ut: vehicle.unavailabilityType }) // Unavailability type
                    };
                })
            };
        });
        const optimizedTime = Date.now() - startTime;
        const originalSize = JSON.stringify(data).length;
        const optimizedSize = JSON.stringify({
            calendar: optimizedCalendar,
            vehicles: Array.from(vehicleMap.values()),
            rentals: data.rentals,
            unavailabilities: data.unavailabilities
        }).length;
        const sizeSaved = originalSize - optimizedSize;
        const percentSaved = ((sizeSaved / originalSize) * 100).toFixed(1);
        console.log(`üéØ DATA STRUCTURE OPTIMIZED: ${originalSize} ‚Üí ${optimizedSize} bytes (${percentSaved}% smaller) in ${optimizedTime}ms`);
        return {
            calendar: optimizedCalendar,
            vehicles: Array.from(vehicleMap.values()),
            vehicleMap: Object.fromEntries(vehicleMap), // For frontend reconstruction
            rentals: data.rentals,
            unavailabilities: data.unavailabilities,
            _optimization: {
                originalSize,
                optimizedSize,
                compressionRatio: percentSaved + '%',
                processingTime: optimizedTime + 'ms'
            }
        };
    }
    // Origin√°lna met√≥da pre fresh loading
    async getVehiclesFresh() {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT * FROM vehicles ORDER BY created_at DESC');
            const vehicles = result.rows.map(row => ({
                ...row,
                id: row.id?.toString() || '',
                licensePlate: row.license_plate, // Mapovanie column n√°zvu
                category: row.category || null, // üöó Mapovanie category
                ownerCompanyId: row.owner_company_id?.toString(), // Mapovanie owner_company_id na ownerCompanyId
                pricing: typeof row.pricing === 'string' ? JSON.parse(row.pricing) : row.pricing, // Parsovanie JSON
                commission: typeof row.commission === 'string' ? JSON.parse(row.commission) : row.commission, // Parsovanie JSON
                stk: row.stk ? new Date(row.stk) : undefined, // üìã STK date mapping
                createdAt: new Date(row.created_at)
            }));
            // üîß AUTO-FIX: Automaticky oprav ownerCompanyId pre vozidl√° ktor√© ho nemaj√∫
            const vehiclesToFix = vehicles.filter(v => !v.ownerCompanyId && v.company?.trim());
            if (vehiclesToFix.length > 0) {
                console.log(`üîß AUTO-FIX: Found ${vehiclesToFix.length} vehicles without ownerCompanyId, fixing...`);
                // Z√≠skaj v≈°etky firmy pre mapovanie
                const companiesResult = await client.query('SELECT id, name FROM companies');
                const companyMap = new Map();
                companiesResult.rows.forEach(company => {
                    companyMap.set(company.name.toLowerCase().trim(), company.id);
                });
                // Oprav vozidl√°
                for (const vehicle of vehiclesToFix) {
                    try {
                        const companyName = vehicle.company.trim();
                        const companyNameLower = companyName.toLowerCase();
                        let companyId = companyMap.get(companyNameLower);
                        // Vytvor firmu ak neexistuje
                        if (!companyId) {
                            const newCompanyResult = await client.query('INSERT INTO companies (name) VALUES ($1) RETURNING id', [companyName]);
                            companyId = newCompanyResult.rows[0].id;
                            companyMap.set(companyNameLower, companyId);
                            console.log(`üÜï AUTO-FIX: Created company "${companyName}" with ID ${companyId}`);
                        }
                        // Aktualizuj vozidlo
                        await client.query('UPDATE vehicles SET company_id = $1 WHERE id = $2', [companyId, vehicle.id]);
                        // Aktualizuj vozidlo v pam√§ti
                        vehicle.ownerCompanyId = companyId.toString();
                        console.log(`‚úÖ AUTO-FIX: ${vehicle.brand} ${vehicle.model} ‚Üí ${companyName} (${companyId})`);
                    }
                    catch (fixError) {
                        console.error(`‚ùå AUTO-FIX error for vehicle ${vehicle.id}:`, fixError);
                    }
                }
            }
            return vehicles;
        }
        finally {
            client.release();
        }
    }
    async getVehicle(id) {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT * FROM vehicles WHERE id = $1', [id]); // Removed parseInt for UUID
            if (result.rows.length === 0)
                return null;
            const row = result.rows[0];
            return {
                ...row,
                id: row.id.toString(),
                licensePlate: row.license_plate, // Mapovanie column n√°zvu
                category: row.category || null, // üöó Mapovanie category
                ownerCompanyId: row.owner_company_id?.toString(), // Mapovanie owner_company_id na ownerCompanyId
                pricing: typeof row.pricing === 'string' ? JSON.parse(row.pricing) : row.pricing, // Parsovanie JSON
                commission: typeof row.commission === 'string' ? JSON.parse(row.commission) : row.commission, // Parsovanie JSON
                stk: row.stk ? new Date(row.stk) : undefined, // üìã STK date mapping
                createdAt: new Date(row.created_at)
            };
        }
        finally {
            client.release();
        }
    }
    async createVehicle(vehicleData) {
        const client = await this.pool.connect();
        try {
            // Kontrola duplic√≠t - skontroluj ƒçi u≈æ existuje vozidlo s touto ≈†PZ
            if (vehicleData.licensePlate && vehicleData.licensePlate.trim()) {
                const existingVehicle = await client.query('SELECT id, brand, model FROM vehicles WHERE LOWER(license_plate) = LOWER($1)', [vehicleData.licensePlate.trim()]);
                if (existingVehicle.rows.length > 0) {
                    const existing = existingVehicle.rows[0];
                    console.log(`‚ö†Ô∏è Vozidlo s ≈†PZ ${vehicleData.licensePlate} u≈æ existuje: ${existing.brand} ${existing.model}`);
                    throw new Error(`Vozidlo s ≈†PZ ${vehicleData.licensePlate} u≈æ existuje v datab√°ze`);
                }
            }
            // N√°jdi alebo vytvor company UUID
            let ownerCompanyId = null;
            if (vehicleData.company && vehicleData.company.trim()) {
                const companies = await this.getCompanies();
                const existingCompany = companies.find(c => c.name === vehicleData.company.trim());
                if (existingCompany) {
                    ownerCompanyId = existingCompany.id;
                }
                else {
                    // Vytvor nov√∫ firmu
                    const newCompany = await this.createCompany({ name: vehicleData.company.trim() });
                    ownerCompanyId = newCompany.id;
                }
            }
            // ‚úÖ OPRAVEN√â: Pou≈æ√≠vame owner_company_id (UUID) konzistentne
            const result = await client.query('INSERT INTO vehicles (brand, model, year, license_plate, company, owner_company_id, pricing, commission, status) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, brand, model, year, license_plate, company, owner_company_id, pricing, commission, status, created_at', [
                vehicleData.brand,
                vehicleData.model,
                vehicleData.year || 2024, // Default rok ak nie je zadan√Ω
                vehicleData.licensePlate,
                vehicleData.company,
                ownerCompanyId, // üÜï Spr√°vne owner_company_id (UUID)
                JSON.stringify(vehicleData.pricing),
                JSON.stringify(vehicleData.commission),
                vehicleData.status
            ]);
            const row = result.rows[0];
            // üöÄ F√ÅZA 1.3: Cache invalidation po vytvoren√≠ vozidla
            this.invalidateVehicleCache();
            // üöÄ F√ÅZA 2.3: Calendar cache invalidation po vytvoren√≠ vozidla
            this.invalidateCalendarCache();
            return {
                id: row.id.toString(),
                brand: row.brand,
                model: row.model,
                year: row.year,
                licensePlate: row.license_plate,
                company: row.company,
                ownerCompanyId: row.owner_company_id?.toString(), // ‚úÖ OPRAVEN√â: Pou≈æ√≠vame owner_company_id konzistentne
                pricing: typeof row.pricing === 'string' ? JSON.parse(row.pricing) : row.pricing,
                commission: typeof row.commission === 'string' ? JSON.parse(row.commission) : row.commission,
                status: row.status,
                createdAt: new Date(row.created_at)
            };
        }
        catch (error) {
            console.error('‚ùå Detailed createVehicle error:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    async updateVehicle(vehicle) {
        const client = await this.pool.connect();
        try {
            // Automaticky vytvori≈• company z√°znam ak neexistuje - bez ON CONFLICT
            if (vehicle.company && vehicle.company.trim()) {
                try {
                    const existingCompany = await client.query('SELECT name FROM companies WHERE name = $1', [vehicle.company.trim()]);
                    if (existingCompany.rows.length === 0) {
                        await client.query('INSERT INTO companies (name) VALUES ($1)', [vehicle.company.trim()]);
                    }
                }
                catch (companyError) {
                    console.log('‚ö†Ô∏è Company update error:', companyError.message);
                }
            }
            await client.query('UPDATE vehicles SET brand = $1, model = $2, license_plate = $3, company = $4, category = $5, owner_company_id = $6, pricing = $7, commission = $8, status = $9, year = $10, stk = $11, updated_at = CURRENT_TIMESTAMP WHERE id = $12', [
                vehicle.brand,
                vehicle.model,
                vehicle.licensePlate,
                vehicle.company,
                vehicle.category || null,
                vehicle.ownerCompanyId || null,
                JSON.stringify(vehicle.pricing),
                JSON.stringify(vehicle.commission),
                vehicle.status,
                vehicle.year || null,
                vehicle.stk || null,
                vehicle.id
            ]);
            // üöÄ F√ÅZA 1.3: Cache invalidation po aktualiz√°cii vozidla
            this.invalidateVehicleCache();
            // üöÄ F√ÅZA 2.3: Calendar cache invalidation po aktualiz√°cii vozidla
            this.invalidateCalendarCache();
        }
        finally {
            client.release();
        }
    }
    async deleteVehicle(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM vehicles WHERE id = $1', [id]); // Removed parseInt for UUID
            // üöÄ F√ÅZA 1.3: Cache invalidation po zmazan√≠ vozidla
            this.invalidateVehicleCache();
            // üöÄ F√ÅZA 2.3: Calendar cache invalidation po zmazan√≠ vozidla
            this.invalidateCalendarCache();
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre pren√°jmy
    // OPTIMALIZ√ÅCIA: Nov√° met√≥da pre naƒç√≠tanie len pren√°jmov v danom obdob√≠
    async getRentalsForDateRange(startDate, endDate) {
        const client = await this.pool.connect();
        try {
            // Naƒç√≠taj len pren√°jmy ktor√© sa prekr√Ωvaj√∫ s dan√Ωm obdob√≠m
            const result = await client.query(`
        SELECT id, vehicle_id, start_date, end_date, 
               total_price, commission, payment_method, paid, status, 
               customer_name, created_at, order_number, deposit, 
               allowed_kilometers, daily_kilometers, handover_place,
               rental_type, is_flexible, flexible_end_date, can_be_overridden,
               override_priority, notification_threshold, auto_extend, override_history,
               company
        FROM rentals 
        WHERE (start_date <= $2 AND end_date >= $1)
        ORDER BY start_date ASC
      `, [startDate, endDate]);
            if (result.rows.length === 0) {
                return [];
            }
            return result.rows.map((row) => {
                try {
                    return {
                        id: row.id?.toString() || '',
                        vehicleId: row.vehicle_id?.toString(),
                        customerId: undefined, // customer_id stƒ∫pec neexistuje v rentals tabuƒæke
                        customerName: row.customer_name || 'Nezn√°my z√°kazn√≠k',
                        startDate: new Date(row.start_date),
                        endDate: new Date(row.end_date),
                        totalPrice: parseFloat(row.total_price) || 0,
                        commission: parseFloat(row.commission) || 0,
                        paymentMethod: row.payment_method || 'cash',
                        paid: Boolean(row.paid),
                        status: row.status || 'active',
                        createdAt: row.created_at ? new Date(row.created_at) : new Date(),
                        orderNumber: row.order_number || undefined,
                        deposit: row.deposit ? parseFloat(row.deposit) : undefined,
                        allowedKilometers: row.allowed_kilometers || undefined,
                        dailyKilometers: row.daily_kilometers || undefined,
                        handoverPlace: row.handover_place || undefined,
                        // üè¢ COMPANY SNAPSHOT: Historical company field
                        company: row.company || 'Nezn√°ma firma',
                        // üîÑ NOV√â: Flexibiln√© pren√°jmy polia
                        rentalType: row.rental_type || 'standard',
                        isFlexible: Boolean(row.is_flexible),
                        flexibleEndDate: row.flexible_end_date ? new Date(row.flexible_end_date) : undefined,
                    };
                }
                catch (error) {
                    console.error('‚ùå Chyba pri spracovan√≠ rental:', error);
                    throw error;
                }
            });
        }
        finally {
            client.release();
        }
    }
    // üöÄ NOV√Å MET√ìDA: Paginated rentals s filtrami
    async getRentalsPaginated(params) {
        const client = await this.pool.connect();
        try {
            console.log('üöÄ Loading paginated rentals with filters:', params);
            // Z√°kladn√Ω WHERE clause
            let whereConditions = ['1=1'];
            const queryParams = [];
            let paramIndex = 1;
            // üîç SEARCH filter - live vyhƒæad√°vanie
            if (params.search && params.search.trim()) {
                whereConditions.push(`(
          r.customer_name ILIKE $${paramIndex} OR 
          r.order_number ILIKE $${paramIndex} OR 
          v.license_plate ILIKE $${paramIndex} OR
          v.brand ILIKE $${paramIndex} OR
          v.model ILIKE $${paramIndex}
        )`);
                queryParams.push(`%${params.search.trim()}%`);
                paramIndex++;
            }
            // üìÖ DATE filter
            if (params.dateFilter && params.dateFilter !== 'all') {
                const today = new Date();
                let startDate, endDate;
                switch (params.dateFilter) {
                    case 'today':
                        startDate = new Date(today.setHours(0, 0, 0, 0));
                        endDate = new Date(today.setHours(23, 59, 59, 999));
                        break;
                    case 'week':
                        const weekStart = new Date(today);
                        weekStart.setDate(today.getDate() - today.getDay());
                        weekStart.setHours(0, 0, 0, 0);
                        const weekEnd = new Date(weekStart);
                        weekEnd.setDate(weekStart.getDate() + 6);
                        weekEnd.setHours(23, 59, 59, 999);
                        startDate = weekStart;
                        endDate = weekEnd;
                        break;
                    case 'month':
                        startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                        endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59, 999);
                        break;
                    case 'custom':
                        if (params.dateFrom)
                            startDate = new Date(params.dateFrom);
                        if (params.dateTo)
                            endDate = new Date(params.dateTo);
                        break;
                }
                if (startDate) {
                    whereConditions.push(`r.start_date >= $${paramIndex}`);
                    queryParams.push(startDate);
                    paramIndex++;
                }
                if (endDate) {
                    whereConditions.push(`r.start_date <= $${paramIndex}`);
                    queryParams.push(endDate);
                    paramIndex++;
                }
            }
            // üè¢ COMPANY filter
            if (params.company && params.company !== 'all') {
                whereConditions.push(`(r.company = $${paramIndex} OR c.name = $${paramIndex})`);
                queryParams.push(params.company);
                paramIndex++;
            }
            // ‚ö° STATUS filter
            if (params.status && params.status !== 'all') {
                if (params.status === 'active') {
                    whereConditions.push(`r.status IN ('confirmed', 'ongoing')`);
                }
                else if (params.status === 'completed') {
                    whereConditions.push(`r.status = 'completed'`);
                }
                else {
                    whereConditions.push(`r.status = $${paramIndex}`);
                    queryParams.push(params.status);
                    paramIndex++;
                }
            }
            // üí≥ PAYMENT METHOD filter
            if (params.paymentMethod && params.paymentMethod !== 'all') {
                whereConditions.push(`r.payment_method = $${paramIndex}`);
                queryParams.push(params.paymentMethod);
                paramIndex++;
            }
            // üí∞ PAYMENT STATUS filter
            if (params.paymentStatus && params.paymentStatus !== 'all') {
                if (params.paymentStatus === 'paid') {
                    whereConditions.push(`r.paid = true`);
                }
                else if (params.paymentStatus === 'unpaid') {
                    whereConditions.push(`r.paid = false`);
                }
            }
            // üöó VEHICLE BRAND filter
            if (params.vehicleBrand && params.vehicleBrand !== 'all') {
                whereConditions.push(`v.brand = $${paramIndex}`);
                queryParams.push(params.vehicleBrand);
                paramIndex++;
            }
            // üíµ PRICE RANGE filter
            if (params.priceMin && !isNaN(parseFloat(params.priceMin))) {
                whereConditions.push(`r.total_price >= $${paramIndex}`);
                queryParams.push(parseFloat(params.priceMin));
                paramIndex++;
            }
            if (params.priceMax && !isNaN(parseFloat(params.priceMax))) {
                whereConditions.push(`r.total_price <= $${paramIndex}`);
                queryParams.push(parseFloat(params.priceMax));
                paramIndex++;
            }
            const whereClause = whereConditions.join(' AND ');
            // Count query pre pagination
            const countQuery = `
        SELECT COUNT(*) as total
        FROM rentals r
        LEFT JOIN vehicles v ON r.vehicle_id = v.id
        LEFT JOIN companies c ON v.company_id = c.id
        WHERE ${whereClause}
      `;
            const countResult = await client.query(countQuery, queryParams);
            const total = parseInt(countResult.rows[0].total);
            // Main query s LIMIT a OFFSET
            const mainQuery = `
        SELECT 
          r.id, r.vehicle_id, r.start_date, r.end_date, 
          r.total_price, r.commission, r.payment_method, r.paid, r.status, 
          r.customer_name, r.created_at, r.order_number, r.deposit, 
          r.allowed_kilometers, r.daily_kilometers, r.handover_place, r.company,
          r.rental_type, r.is_flexible, r.flexible_end_date, r.can_be_overridden,
          r.override_priority, r.notification_threshold, r.auto_extend, r.override_history,
          v.brand, v.model, v.license_plate, v.pricing, v.commission as v_commission, v.status as v_status,
          c.name as company_name, v.company as vehicle_company
        FROM rentals r
        LEFT JOIN vehicles v ON r.vehicle_id = v.id
        LEFT JOIN companies c ON v.company_id = c.id
        WHERE ${whereClause}
        ORDER BY r.created_at DESC
        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
      `;
            queryParams.push(params.limit, params.offset);
            const result = await client.query(mainQuery, queryParams);
            console.log(`üìä Paginated query: ${result.rows.length}/${total} rentals (limit: ${params.limit}, offset: ${params.offset})`);
            // Transform data to Rental objects
            const rentals = result.rows.map((row) => this.transformRowToRental(row));
            // Apply permission filtering for non-admin users
            let filteredRentals = rentals;
            if (params.userRole !== 'admin' && params.userId) {
                const userCompanyAccess = await this.getUserCompanyAccess(params.userId);
                const allowedCompanyIds = userCompanyAccess.map(access => access.companyId);
                const allowedCompanyNames = await Promise.all(allowedCompanyIds.map(async (companyId) => {
                    try {
                        return await this.getCompanyNameById(companyId);
                    }
                    catch (error) {
                        return null;
                    }
                }));
                const validCompanyNames = allowedCompanyNames.filter(name => name !== null);
                filteredRentals = rentals.filter(rental => {
                    if (rental.vehicle && rental.vehicle.ownerCompanyId) {
                        return allowedCompanyIds.includes(rental.vehicle.ownerCompanyId);
                    }
                    else if (rental.vehicle && rental.vehicle.company) {
                        return validCompanyNames.includes(rental.vehicle.company);
                    }
                    return false;
                });
                console.log('üîê Permission filtering applied:', {
                    originalCount: rentals.length,
                    filteredCount: filteredRentals.length
                });
            }
            return {
                rentals: filteredRentals,
                total: filteredRentals.length // Adjust total if filtered
            };
        }
        catch (error) {
            console.error('Error in getRentalsPaginated:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // üîß HELPER: Transform database row to Rental object
    transformRowToRental(row) {
        return {
            id: row.id?.toString() || '',
            vehicleId: row.vehicle_id?.toString(),
            customerId: row.customer_id?.toString(),
            customerName: row.customer_name || 'Nezn√°my z√°kazn√≠k',
            startDate: new Date(row.start_date),
            endDate: new Date(row.end_date),
            totalPrice: parseFloat(row.total_price) || 0,
            commission: parseFloat(row.commission) || 0,
            paymentMethod: row.payment_method || 'cash',
            paid: Boolean(row.paid),
            status: row.status || 'active',
            createdAt: row.created_at ? new Date(row.created_at) : new Date(),
            orderNumber: row.order_number || undefined,
            deposit: row.deposit ? parseFloat(row.deposit) : undefined,
            allowedKilometers: row.allowed_kilometers || undefined,
            dailyKilometers: row.daily_kilometers || undefined,
            handoverPlace: row.handover_place || undefined,
            company: row.company || undefined,
            // Flexibiln√© pren√°jmy polia
            rentalType: row.rental_type || 'standard',
            isFlexible: Boolean(row.is_flexible),
            flexibleEndDate: row.flexible_end_date ? new Date(row.flexible_end_date) : undefined,
            // Vehicle information from JOIN
            vehicle: row.brand ? {
                id: row.vehicle_id?.toString() || '',
                brand: row.brand,
                model: row.model,
                licensePlate: row.license_plate,
                company: row.vehicle_company || row.company_name || 'N/A',
                pricing: row.pricing ? (typeof row.pricing === 'string' ? JSON.parse(row.pricing) : row.pricing) : [],
                commission: row.v_commission ? (typeof row.v_commission === 'string' ? JSON.parse(row.v_commission) : row.v_commission) : { type: 'percentage', value: 0 },
                status: row.v_status || 'available',
                ownerCompanyId: row.company_id || undefined
            } : undefined
        };
    }
    async getRentals() {
        const client = await this.pool.connect();
        try {
            // üöÄ NOV√ù PR√çSTUP: Priamy JOIN ako getVehicles() - STABILN√ù ‚úÖ
            console.log('üîç Loading rentals with direct JOIN...');
            // üêõ DEBUG: Check vehicle_id types in rentals before JOIN
            console.log('üîç DEBUG: Checking vehicle_id types in rentals...');
            const typeCheck = await client.query(`
        SELECT 
          id, 
          vehicle_id, 
          pg_typeof(vehicle_id) as vehicle_id_type,
          customer_name
        FROM rentals 
        LIMIT 3
      `);
            console.log('üîç DEBUG: Sample rentals data:', typeCheck.rows);
            // üîß FIX: Remove ::uuid cast - if vehicle_id is already uuid, casting is unnecessary
            const result = await client.query(`
        SELECT 
          r.id, r.vehicle_id, r.start_date, r.end_date, 
          r.total_price, r.commission, r.payment_method, r.paid, r.status, 
          r.customer_name, r.created_at, r.order_number, r.deposit, 
          r.allowed_kilometers, r.daily_kilometers, r.handover_place, r.company,
          -- üîÑ NOV√â: Flexibiln√© pren√°jmy polia
          r.rental_type, r.is_flexible, r.flexible_end_date, r.can_be_overridden,
          r.override_priority, r.notification_threshold, r.auto_extend, r.override_history,
          v.brand, v.model, v.license_plate, v.pricing, v.commission as v_commission, v.status as v_status,
          -- üè¢ COMPANY INFO: Pridan√© pre ≈°tatistiky Top firiem
          c.name as company_name, v.company as vehicle_company
        FROM rentals r
        LEFT JOIN vehicles v ON r.vehicle_id = v.id
        LEFT JOIN companies c ON v.company_id = c.id
        ORDER BY r.created_at DESC
      `);
            console.log(`üìä Found ${result.rows.length} rentals`);
            // üîß DEBUG: Log first 2 raw SQL results
            console.log('üîç RAW SQL RESULTS (first 2 rows):');
            result.rows.slice(0, 2).forEach((row, i) => {
                console.log(`  Row ${i}:`, {
                    customer_name: row.customer_name,
                    vehicle_id: row.vehicle_id,
                    brand: row.brand,
                    model: row.model,
                    license_plate: row.license_plate,
                    company: row.company,
                    company_name: row.company_name,
                    vehicle_company: row.vehicle_company,
                    has_brand: !!row.brand
                });
            });
            // üîß DIAGNOSTIC: Check for missing vehicle data in JOIN
            const missingVehicleData = result.rows.filter(row => row.vehicle_id && !row.brand);
            if (missingVehicleData.length > 0) {
                console.error(`üö® CRITICAL: ${missingVehicleData.length} rentals have vehicle_id but no vehicle data from JOIN!`);
                console.error('üîç Missing vehicle IDs:', missingVehicleData.map(r => r.vehicle_id).slice(0, 3));
                // Check if these vehicle_ids exist in vehicles table
                for (const rental of missingVehicleData.slice(0, 2)) { // Check first 2
                    const vehicleCheck = await client.query('SELECT id, brand, model FROM vehicles WHERE id = $1', [rental.vehicle_id]);
                    console.error(`üîç Vehicle ${rental.vehicle_id} exists in vehicles:`, vehicleCheck.rows.length > 0 ? vehicleCheck.rows[0] : 'NOT FOUND');
                }
            }
            const rentals = result.rows.map(row => ({
                id: row.id?.toString() || '',
                vehicleId: row.vehicle_id?.toString(),
                customerId: undefined, // customer_id stƒ∫pec neexistuje v rentals tabuƒæke
                customerName: row.customer_name || 'Nezn√°my z√°kazn√≠k',
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                totalPrice: parseFloat(row.total_price) || 0,
                commission: parseFloat(row.commission) || 0,
                paymentMethod: row.payment_method || 'cash',
                paid: Boolean(row.paid),
                status: row.status || 'active',
                createdAt: row.created_at ? new Date(row.created_at) : new Date(),
                orderNumber: row.order_number || undefined,
                deposit: row.deposit ? parseFloat(row.deposit) : undefined,
                allowedKilometers: row.allowed_kilometers || undefined,
                dailyKilometers: row.daily_kilometers || undefined,
                handoverPlace: row.handover_place || undefined,
                company: row.company || undefined, // üéØ CLEAN SOLUTION field
                // üîÑ NOV√â: Flexibiln√© pren√°jmy polia
                rentalType: row.rental_type || 'standard',
                isFlexible: Boolean(row.is_flexible),
                flexibleEndDate: row.flexible_end_date ? new Date(row.flexible_end_date) : undefined,
                // üöó PRIAMO MAPOVAN√â VEHICLE DATA (ako getVehicles) ‚úÖ
                vehicle: row.brand ? {
                    id: row.vehicle_id,
                    brand: row.brand,
                    model: row.model,
                    licensePlate: row.license_plate,
                    // üè¢ COMPANY INFO: Pridan√© pre ≈°tatistiky - pou≈æije company_name z companies tabuƒæky alebo fallback na vehicle_company
                    company: row.company_name || row.vehicle_company || 'Bez firmy',
                    pricing: typeof row.pricing === 'string' ? JSON.parse(row.pricing) : row.pricing || [],
                    commission: typeof row.v_commission === 'string' ? JSON.parse(row.v_commission) : row.v_commission || { type: 'percentage', value: 0 },
                    status: row.v_status || 'available'
                } : undefined
            }));
            // ‚ö†Ô∏è AUTO-FIX DISABLED - Nebezpeƒçn√©, menilo vehicle_id v datab√°ze!
            // Namiesto toho len logujeme probl√©m
            const rentalsWithMissingVehicle = rentals.filter(r => r.vehicleId && !r.vehicle);
            if (rentalsWithMissingVehicle.length > 0) {
                console.warn(`‚ö†Ô∏è Found ${rentalsWithMissingVehicle.length} rentals with missing vehicle data (not auto-fixing):`);
                rentalsWithMissingVehicle.forEach(rental => {
                    console.warn(`  - Rental ${rental.id} (${rental.customerName}) has vehicle_id ${rental.vehicleId} but no vehicle data`);
                });
            }
            // üîß DEBUG: Log mapped rentals (first 2)
            console.log('üîç MAPPED RENTALS (first 2):');
            rentals.slice(0, 2).forEach((rental, i) => {
                console.log(`  Mapped ${i}:`, {
                    customer: rental.customerName,
                    company: rental.company,
                    vehicleId: rental.vehicleId,
                    vehicle_exists: !!rental.vehicle,
                    vehicle_brand: rental.vehicle?.brand || 'NULL',
                    vehicle_model: rental.vehicle?.model || 'NULL',
                    vehicle_licensePlate: rental.vehicle?.licensePlate || 'NULL'
                });
            });
            // üõ°Ô∏è BULLETPROOF VALID√ÅCIA: Kontrola ≈æe v≈°etky rentals maj√∫ company
            const rentalsWithoutCompany = rentals.filter(r => !r.company);
            if (rentalsWithoutCompany.length > 0) {
                console.error(`üö® CRITICAL: ${rentalsWithoutCompany.length} rentals BEZ company - BULLETPROOF NARU≈†EN√â!`);
                rentalsWithoutCompany.forEach(rental => {
                    console.error(`  ‚ùå Rental ${rental.id} (${rental.customerName}) - ≈ΩIADNA company! StartDate: ${rental.startDate.toISOString()}`);
                });
            }
            else {
                console.log(`‚úÖ BULLETPROOF VALID√ÅCIA: V≈°etk√Ωch ${rentals.length} pren√°jmov m√° company`);
            }
            return rentals;
        }
        catch (error) {
            console.error('‚ùå getRentals() chyba:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // Bezpeƒçn√© parsovanie JSON pol√≠
    safeJsonParse(value, fallback = undefined) {
        if (!value)
            return fallback;
        if (typeof value === 'object')
            return value;
        if (typeof value === 'string') {
            try {
                return JSON.parse(value);
            }
            catch (e) {
                console.warn('‚ö†Ô∏è JSON parse chyba:', e, 'value:', value);
                return fallback;
            }
        }
        return fallback;
    }
    async createRental(rentalData) {
        const client = await this.pool.connect();
        try {
            // üéØ CLEAN SOLUTION: Rental vlastn√≠ svoj company field - JEDNODUCHO!
            let company = null;
            if (rentalData.vehicleId) {
                const vehicleResult = await client.query(`
          SELECT company FROM vehicles WHERE id = $1
        `, [rentalData.vehicleId]);
                if (vehicleResult.rows.length > 0) {
                    company = vehicleResult.rows[0].company;
                }
            }
            const result = await client.query(`
        INSERT INTO rentals (
          vehicle_id, customer_name, start_date, end_date, 
          total_price, commission, payment_method, discount, custom_commission, 
          extra_km_charge, paid, status, handover_place, confirmed, payments, history, order_number,
          deposit, allowed_kilometers, daily_kilometers, extra_kilometer_rate, return_conditions, 
          fuel_level, odometer, return_fuel_level, return_odometer, actual_kilometers, fuel_refill_cost,
          handover_protocol_id, return_protocol_id, company,
          rental_type, is_flexible, flexible_end_date, can_be_overridden, override_priority, 
          notification_threshold, auto_extend, override_history,
          approval_status, email_content, auto_processed_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42)
        RETURNING id, vehicle_id, customer_name, start_date, end_date, total_price, commission, payment_method, 
          discount, custom_commission, extra_km_charge, paid, status, handover_place, confirmed, payments, history, order_number,
          deposit, allowed_kilometers, daily_kilometers, extra_kilometer_rate, return_conditions, 
          fuel_level, odometer, return_fuel_level, return_odometer, actual_kilometers, fuel_refill_cost,
          handover_protocol_id, return_protocol_id, company, created_at,
          rental_type, is_flexible, flexible_end_date, can_be_overridden, override_priority, 
          notification_threshold, auto_extend, override_history,
          approval_status, email_content, auto_processed_at
      `, [
                rentalData.vehicleId || null,
                rentalData.customerName,
                rentalData.startDate,
                rentalData.endDate,
                rentalData.totalPrice,
                rentalData.commission,
                rentalData.paymentMethod,
                rentalData.discount ? JSON.stringify(rentalData.discount) : null,
                rentalData.customCommission ? JSON.stringify(rentalData.customCommission) : null,
                rentalData.extraKmCharge || null,
                rentalData.paid || false,
                rentalData.status || 'pending',
                rentalData.handoverPlace || null,
                rentalData.confirmed || false,
                rentalData.payments ? JSON.stringify(rentalData.payments) : null,
                rentalData.history ? JSON.stringify(rentalData.history) : null,
                rentalData.orderNumber || null,
                rentalData.deposit || null,
                rentalData.allowedKilometers || null,
                rentalData.dailyKilometers || null,
                rentalData.extraKilometerRate || null,
                rentalData.returnConditions || null,
                rentalData.fuelLevel || null,
                rentalData.odometer || null,
                rentalData.returnFuelLevel || null,
                rentalData.returnOdometer || null,
                rentalData.actualKilometers || null,
                rentalData.fuelRefillCost || null,
                rentalData.handoverProtocolId || null,
                rentalData.returnProtocolId || null,
                company, // üéØ CLEAN SOLUTION hodnota
                // üîÑ OPTIMALIZOVAN√â: Flexibiln√© pren√°jmy parametre (zjednodu≈°en√©)
                rentalData.rentalType || 'standard',
                rentalData.isFlexible || false,
                rentalData.flexibleEndDate || null,
                // üìß NOV√â: Automatick√© spracovanie emailov hodnoty (len existuj√∫ce stƒ∫pce)
                rentalData.approvalStatus || 'approved',
                rentalData.emailContent || null,
                rentalData.autoProcessedAt || null
            ]);
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                vehicleId: row.vehicle_id?.toString(),
                customerId: undefined, // customer_id stƒ∫pec neexistuje v rentals tabuƒæke
                customerName: row.customer_name,
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                totalPrice: parseFloat(row.total_price) || 0,
                commission: parseFloat(row.commission) || 0,
                paymentMethod: row.payment_method,
                discount: this.safeJsonParse(row.discount),
                customCommission: this.safeJsonParse(row.custom_commission),
                extraKmCharge: row.extra_km_charge ? parseFloat(row.extra_km_charge) : undefined,
                paid: Boolean(row.paid),
                status: row.status || 'pending',
                handoverPlace: row.handover_place,
                confirmed: Boolean(row.confirmed),
                payments: this.safeJsonParse(row.payments),
                history: this.safeJsonParse(row.history),
                orderNumber: row.order_number,
                deposit: row.deposit ? parseFloat(row.deposit) : undefined,
                allowedKilometers: row.allowed_kilometers || undefined,
                dailyKilometers: row.daily_kilometers || undefined,
                extraKilometerRate: row.extra_kilometer_rate ? parseFloat(row.extra_kilometer_rate) : undefined,
                returnConditions: row.return_conditions || undefined,
                fuelLevel: row.fuel_level || undefined,
                odometer: row.odometer || undefined,
                returnFuelLevel: row.return_fuel_level || undefined,
                returnOdometer: row.return_odometer || undefined,
                actualKilometers: row.actual_kilometers || undefined,
                fuelRefillCost: row.fuel_refill_cost ? parseFloat(row.fuel_refill_cost) : undefined,
                handoverProtocolId: row.handover_protocol_id || undefined,
                returnProtocolId: row.return_protocol_id || undefined,
                company: row.company || undefined, // üéØ CLEAN SOLUTION field
                createdAt: new Date(row.created_at),
                // üîÑ OPTIMALIZOVAN√â: Flexibiln√© pren√°jmy (zjednodu≈°en√©)
                rentalType: row.rental_type || 'standard',
                isFlexible: Boolean(row.is_flexible),
                flexibleEndDate: row.flexible_end_date ? new Date(row.flexible_end_date) : undefined,
                // üìß NOV√â: Automatick√© spracovanie emailov polia (len existuj√∫ce stƒ∫pce)
                approvalStatus: row.approval_status || 'approved',
                emailContent: row.email_content || undefined,
                autoProcessedAt: row.auto_processed_at ? new Date(row.auto_processed_at) : undefined
            };
            // üöÄ F√ÅZA 2.3: Calendar cache invalidation po vytvoren√≠ pren√°jmu
            this.invalidateCalendarCache();
            this.invalidateUnavailabilityCache();
        }
        finally {
            client.release();
        }
    }
    async getRental(id) {
        const client = await this.pool.connect();
        try {
            console.log('üîç getRental called for ID:', id);
            const result = await client.query(`
        SELECT r.*, v.brand, v.model, v.license_plate, v.company as vehicle_company 
        FROM rentals r 
        LEFT JOIN vehicles v ON r.vehicle_id = v.id 
        WHERE r.id = $1
      `, [parseInt(id)]);
            console.log('üìä getRental result:', {
                found: result.rows.length > 0,
                vehicleId: result.rows[0]?.vehicle_id,
                vehicleBrand: result.rows[0]?.brand,
                vehicleModel: result.rows[0]?.model
            });
            if (result.rows.length === 0)
                return null;
            const row = result.rows[0];
            return {
                id: row.id,
                vehicleId: row.vehicle_id,
                customerId: undefined, // customer_id stƒ∫pec neexistuje v rentals tabuƒæke
                customerName: row.customer_name,
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                totalPrice: parseFloat(row.total_price) || 0,
                commission: parseFloat(row.commission) || 0,
                paymentMethod: row.payment_method,
                discount: row.discount ? (typeof row.discount === 'string' ? JSON.parse(row.discount) : row.discount) : undefined,
                customCommission: row.custom_commission ? (typeof row.custom_commission === 'string' ? JSON.parse(row.custom_commission) : row.custom_commission) : undefined,
                extraKmCharge: row.extra_km_charge ? parseFloat(row.extra_km_charge) : undefined,
                paid: row.paid,
                status: row.status,
                handoverPlace: row.handover_place,
                confirmed: row.confirmed,
                payments: row.payments ? (typeof row.payments === 'string' ? JSON.parse(row.payments) : row.payments) : undefined,
                history: row.history ? (typeof row.history === 'string' ? JSON.parse(row.history) : row.history) : undefined,
                orderNumber: row.order_number,
                createdAt: new Date(row.created_at),
                // üè¢ COMPANY SNAPSHOT: Historical company field  
                company: row.company || 'Nezn√°ma firma',
                // Roz≈°√≠ren√© polia
                deposit: row.deposit ? parseFloat(row.deposit) : undefined,
                allowedKilometers: row.allowed_kilometers || undefined,
                extraKilometerRate: row.extra_kilometer_rate ? parseFloat(row.extra_kilometer_rate) : undefined,
                returnConditions: row.return_conditions || undefined,
                fuelLevel: row.fuel_level || undefined,
                odometer: row.odometer || undefined,
                returnFuelLevel: row.return_fuel_level || undefined,
                returnOdometer: row.return_odometer || undefined,
                actualKilometers: row.actual_kilometers || undefined,
                fuelRefillCost: row.fuel_refill_cost ? parseFloat(row.fuel_refill_cost) : undefined,
                // Protokoly
                handoverProtocolId: row.handover_protocol_id || undefined,
                returnProtocolId: row.return_protocol_id || undefined,
                vehicle: {
                    id: row.vehicle_id,
                    brand: row.brand,
                    model: row.model,
                    licensePlate: row.license_plate,
                    company: row.vehicle_company || 'N/A',
                    pricing: [],
                    commission: { type: 'percentage', value: 0 },
                    status: 'available'
                }
            };
        }
        finally {
            client.release();
        }
    }
    // üõ°Ô∏è FIXED UPDATE with proper field mapping
    async updateRental(rental) {
        const client = await this.pool.connect();
        try {
            console.log(`üîß RENTAL UPDATE: ${rental.id}`, {
                customer: rental.customerName,
                vehicle: rental.vehicleId,
                price: rental.totalPrice,
                paid: rental.paid,
                status: rental.status
            });
            // UPDATE with proper field mapping
            const result = await client.query(`
        UPDATE rentals SET 
          vehicle_id = $1, 
          customer_name = $2, 
          start_date = $3, 
          end_date = $4,
          total_price = $5, 
          paid = $6, 
          status = $7,
          payment_method = $8,
          handover_place = $9,
          order_number = $10,
          deposit = $11,
          allowed_kilometers = $12,
          extra_kilometer_rate = $13
        WHERE id = $14
        `, [
                rental.vehicleId || null, // UUID as string, not parseInt
                rental.customerName,
                rental.startDate,
                rental.endDate,
                rental.totalPrice || 0,
                rental.paid || false,
                rental.status || 'pending',
                rental.paymentMethod || null,
                rental.handoverPlace || null,
                rental.orderNumber || null,
                rental.deposit || null,
                rental.allowedKilometers || null,
                rental.extraKilometerRate || null,
                rental.id // UUID as string, not parseInt
            ]);
            console.log(`‚úÖ RENTAL UPDATE SUCCESS: ${rental.id} (${result.rowCount} row updated)`);
        }
        catch (error) {
            console.error(`‚ùå RENTAL UPDATE ERROR: ${rental.id}`, error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // üõ°Ô∏è PROTECTED DELETE with safety checks
    async deleteRental(id) {
        const client = await this.pool.connect();
        try {
            // üõ°Ô∏è OCHRANA LEVEL 1: Verificaj ≈æe pren√°jom existuje
            const existing = await this.getRental(id);
            if (!existing) {
                throw new Error(`RENTAL DELETE BLOCKED: Rental ${id} does not exist`);
            }
            // üõ°Ô∏è OCHRANA LEVEL 2: Backup pred vymazan√≠m
            await this.createRentalBackup(id);
            // üõ°Ô∏è OCHRANA LEVEL 3: Transaction protection
            await client.query('BEGIN');
            try {
                // üõ°Ô∏è OCHRANA LEVEL 4: Log delete pokus
                console.log(`üõ°Ô∏è RENTAL DELETE START: ${id}`, {
                    customer: existing.customerName,
                    vehicle: existing.vehicleId,
                    totalPrice: existing.totalPrice,
                    dateRange: `${existing.startDate} - ${existing.endDate}`
                });
                // üõ°Ô∏è OCHRANA LEVEL 5: Controlled DELETE s row counting
                const result = await client.query('DELETE FROM rentals WHERE id = $1', [id]);
                // üõ°Ô∏è OCHRANA LEVEL 6: Verify delete success
                if (result.rowCount === null || result.rowCount === 0) {
                    throw new Error(`RENTAL DELETE FAILED: No rows affected for ID ${id}`);
                }
                if (result.rowCount > 1) {
                    throw new Error(`RENTAL DELETE ERROR: Multiple rows affected (${result.rowCount}) for ID ${id}`);
                }
                await client.query('COMMIT');
                console.log(`‚úÖ RENTAL DELETE SUCCESS: ${id} (${result.rowCount} row deleted)`);
            }
            catch (deleteError) {
                await client.query('ROLLBACK');
                console.error(`‚ùå RENTAL DELETE FAILED, ROLLED BACK:`, deleteError);
                throw deleteError;
            }
            // üöÄ F√ÅZA 2.3: Calendar cache invalidation po zmazan√≠ pren√°jmu
            this.invalidateCalendarCache();
            this.invalidateUnavailabilityCache();
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre z√°kazn√≠kov
    async getCustomers() {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT id, name, email, phone, created_at FROM customers ORDER BY created_at DESC');
            return result.rows.map((row) => ({
                id: row.id.toString(),
                name: row.name,
                email: row.email,
                phone: row.phone,
                createdAt: new Date(row.created_at)
            }));
        }
        finally {
            client.release();
        }
    }
    async createCustomer(customerData) {
        const client = await this.pool.connect();
        try {
            console.log('üìù Creating customer with data:', customerData);
            // Rozdelenie mena na first_name a last_name
            const nameParts = customerData.name.trim().split(/\s+/);
            const firstName = nameParts[0] || customerData.name.trim();
            const lastName = nameParts.length > 1 ? nameParts.slice(1).join(' ') : '';
            console.log('üìù Name parsing:', {
                originalName: customerData.name,
                firstName,
                lastName
            });
            const result = await client.query('INSERT INTO customers (first_name, last_name, name, email, phone) VALUES ($1, $2, $3, $4, $5) RETURNING id, first_name, last_name, name, email, phone, created_at', [firstName, lastName, customerData.name, customerData.email, customerData.phone]);
            const row = result.rows[0];
            console.log('‚úÖ Customer created with ID:', row.id);
            return {
                id: row.id.toString(),
                name: row.name || `${row.first_name} ${row.last_name}`.trim(),
                email: row.email,
                phone: row.phone,
                createdAt: new Date(row.created_at)
            };
        }
        catch (error) {
            console.error('‚ùå Detailed createCustomer error:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    async updateCustomer(customer) {
        const client = await this.pool.connect();
        try {
            // Parse name into first_name and last_name
            const nameParts = customer.name.split(' ');
            const firstName = nameParts[0] || '';
            const lastName = nameParts.slice(1).join(' ') || '';
            await client.query('UPDATE customers SET name = $1, first_name = $2, last_name = $3, email = $4, phone = $5 WHERE id = $6', [customer.name, firstName, lastName, customer.email, customer.phone, customer.id]);
        }
        finally {
            client.release();
        }
    }
    async deleteCustomer(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM customers WHERE id = $1', [id]); // Removed parseInt for UUID
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre n√°klady
    async getExpenses() {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT * FROM expenses ORDER BY date DESC');
            return result.rows.map(row => ({
                id: row.id?.toString() || '',
                description: row.description,
                amount: parseFloat(row.amount) || 0,
                date: new Date(row.date),
                vehicleId: row.vehicle_id?.toString(),
                company: row.company,
                category: row.category,
                note: row.note || undefined
            }));
        }
        finally {
            client.release();
        }
    }
    async createExpense(expenseData) {
        const client = await this.pool.connect();
        try {
            // Automaticky vytvori≈• company z√°znam ak neexistuje - bez ON CONFLICT
            if (expenseData.company && expenseData.company.trim()) {
                try {
                    const existingCompany = await client.query('SELECT name FROM companies WHERE name = $1', [expenseData.company.trim()]);
                    if (existingCompany.rows.length === 0) {
                        await client.query('INSERT INTO companies (name) VALUES ($1)', [expenseData.company.trim()]);
                        console.log('‚úÖ Company vytvoren√° pre expense:', expenseData.company.trim());
                    }
                }
                catch (companyError) {
                    console.log('‚ö†Ô∏è Company pre expense u≈æ existuje:', companyError.message);
                }
            }
            const result = await client.query('INSERT INTO expenses (description, amount, date, vehicle_id, company, category, note) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, description, amount, date, vehicle_id, company, category, note, created_at', [
                expenseData.description,
                expenseData.amount,
                expenseData.date,
                expenseData.vehicleId || null,
                expenseData.company,
                expenseData.category,
                expenseData.note || null
            ]);
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                description: row.description,
                amount: parseFloat(row.amount) || 0,
                date: new Date(row.date),
                vehicleId: row.vehicle_id?.toString(),
                company: row.company,
                category: row.category,
                note: row.note || undefined
            };
        }
        catch (error) {
            console.error('‚ùå Detailed createExpense error:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    async updateExpense(expense) {
        const client = await this.pool.connect();
        try {
            // Automaticky vytvori≈• company z√°znam ak neexistuje - bez ON CONFLICT
            if (expense.company && expense.company.trim()) {
                try {
                    const existingCompany = await client.query('SELECT name FROM companies WHERE name = $1', [expense.company.trim()]);
                    if (existingCompany.rows.length === 0) {
                        await client.query('INSERT INTO companies (name) VALUES ($1)', [expense.company.trim()]);
                    }
                }
                catch (companyError) {
                    console.log('‚ö†Ô∏è Company update pre expense error:', companyError.message);
                }
            }
            await client.query('UPDATE expenses SET description = $1, amount = $2, date = $3, vehicle_id = $4, company = $5, category = $6, note = $7 WHERE id = $8', [
                expense.description,
                expense.amount,
                expense.date,
                expense.vehicleId || null, // UUID as string, not parseInt
                expense.company,
                expense.category,
                expense.note,
                expense.id // UUID as string, not parseInt
            ]);
        }
        finally {
            client.release();
        }
    }
    async deleteExpense(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM expenses WHERE id = $1', [id]); // Removed parseInt for UUID
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre poistky
    async getInsurances() {
        const client = await this.pool.connect();
        try {
            // JOIN s insurers tabuƒækou pre naƒç√≠tanie n√°zvu poistovne
            const result = await client.query(`
        SELECT i.*, ins.name as insurer_name 
        FROM insurances i 
        LEFT JOIN insurers ins ON i.insurer_id = ins.id 
        ORDER BY i.created_at DESC
      `);
            return result.rows.map(row => ({
                id: row.id?.toString() || '',
                vehicleId: row.rental_id?.toString() || '', // Mapovanie rental_id na vehicleId pre kompatibilitu
                type: row.type,
                policyNumber: row.policy_number || '',
                validFrom: row.start_date ? new Date(row.start_date) : new Date(),
                validTo: row.end_date ? new Date(row.end_date) : new Date(),
                price: parseFloat(row.premium) || 0,
                company: row.insurer_name || '', // Naƒç√≠tan√Ω n√°zov poistovne z JOIN
                paymentFrequency: row.payment_frequency || 'yearly',
                filePath: row.file_path || undefined
            }));
        }
        finally {
            client.release();
        }
    }
    async createInsurance(insuranceData) {
        const client = await this.pool.connect();
        try {
            // ‚úÖ OPRAVEN√â: Mapovanie API parametrov na datab√°zov√© stƒ∫pce
            const result = await client.query('INSERT INTO insurances (rental_id, insurer_id, policy_number, type, coverage_amount, premium, start_date, end_date, payment_frequency, file_path) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, rental_id, insurer_id, policy_number, type, coverage_amount, premium, start_date, end_date, payment_frequency, file_path, created_at', [
                insuranceData.rentalId || null,
                insuranceData.insurerId || null,
                insuranceData.policyNumber,
                insuranceData.type,
                insuranceData.coverageAmount || insuranceData.price, // coverage_amount = price ako fallback
                insuranceData.price, // premium = price
                insuranceData.validFrom, // start_date = validFrom
                insuranceData.validTo, // end_date = validTo
                insuranceData.paymentFrequency || 'yearly',
                insuranceData.filePath || null
            ]);
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                vehicleId: insuranceData.vehicleId || '', // Zachov√°vame pre kompatibilitu API
                rentalId: row.rental_id,
                insurerId: row.insurer_id,
                type: row.type,
                policyNumber: row.policy_number || '',
                validFrom: new Date(row.start_date),
                validTo: new Date(row.end_date),
                price: parseFloat(row.premium) || 0,
                company: insuranceData.company || '',
                paymentFrequency: row.payment_frequency || 'yearly',
                filePath: row.file_path || undefined,
                coverageAmount: parseFloat(row.coverage_amount) || 0
            };
        }
        finally {
            client.release();
        }
    }
    async updateInsurance(id, insuranceData) {
        const client = await this.pool.connect();
        try {
            // UPDATE s JOIN pre z√≠skanie n√°zvu poistovne
            const result = await client.query(`
        UPDATE insurances 
        SET rental_id = $1, insurer_id = $2, type = $3, policy_number = $4, start_date = $5, end_date = $6, premium = $7, coverage_amount = $8, payment_frequency = $9, file_path = $10 
        WHERE id = $11 
        RETURNING id, rental_id, insurer_id, policy_number, type, coverage_amount, premium, start_date, end_date, payment_frequency, file_path
      `, [insuranceData.vehicleId || null, insuranceData.insurerId || null, insuranceData.type, insuranceData.policyNumber, insuranceData.validFrom, insuranceData.validTo, insuranceData.price, insuranceData.price, insuranceData.paymentFrequency || 'yearly', insuranceData.filePath || null, id]);
            if (result.rows.length === 0) {
                throw new Error('Poistka nebola n√°jden√°');
            }
            // Naƒç√≠tam n√°zov poistovne ak existuje insurer_id
            let insurerName = '';
            if (result.rows[0].insurer_id) {
                const insurerResult = await client.query('SELECT name FROM insurers WHERE id = $1', [result.rows[0].insurer_id]);
                insurerName = insurerResult.rows[0]?.name || '';
            }
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                vehicleId: insuranceData.vehicleId || '', // Zachov√°vame pre kompatibilitu API
                type: row.type,
                policyNumber: row.policy_number || '',
                validFrom: new Date(row.start_date),
                validTo: new Date(row.end_date),
                price: parseFloat(row.premium) || 0,
                company: insurerName || insuranceData.company || '', // Pou≈æijem naƒç√≠tan√Ω n√°zov poistovne
                paymentFrequency: row.payment_frequency || 'yearly',
                filePath: row.file_path || undefined
            };
        }
        finally {
            client.release();
        }
    }
    async deleteInsurance(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM insurances WHERE id = $1', [id]);
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre firmy
    async getCompanies() {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT * FROM companies ORDER BY name');
            return result.rows.map(row => ({
                ...row,
                id: row.id?.toString() || '',
                createdAt: new Date(row.created_at)
            }));
        }
        finally {
            client.release();
        }
    }
    async createCompany(companyData) {
        const client = await this.pool.connect();
        try {
            console.log('üè¢ Creating company:', companyData.name);
            // ‚úÖ OPRAVEN√â: Pou≈æ√≠vame len stƒ∫pce ktor√© existuj√∫ v datab√°ze
            const result = await client.query('INSERT INTO companies (name) VALUES ($1) RETURNING id, name, address, phone, email, ic, dic, created_at', [companyData.name]);
            console.log('üè¢ Company created successfully:', result.rows[0]);
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                name: row.name,
                businessId: row.ic, // ‚úÖ ic -> businessId mapovanie
                taxId: row.dic, // ‚úÖ dic -> taxId mapovanie
                address: row.address || '',
                contactPerson: '', // Nem√°me v datab√°ze, prazdn√©
                email: row.email || '',
                phone: row.phone || '',
                contractStartDate: undefined, // Nem√°me v datab√°ze
                contractEndDate: undefined, // Nem√°me v datab√°ze
                commissionRate: 20.00, // Default hodnota
                isActive: true, // Default hodnota
                createdAt: new Date(row.created_at),
                updatedAt: undefined // Nem√°me v datab√°ze
            };
        }
        catch (error) {
            console.error('‚ùå Error creating company:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    async deleteCompany(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM companies WHERE id = $1', [id]); // Removed parseInt for UUID
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre pois≈•ovne
    async getInsurers() {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT * FROM insurers ORDER BY name');
            return result.rows.map(row => ({
                ...row,
                id: row.id?.toString() || '',
                createdAt: new Date(row.created_at)
            }));
        }
        finally {
            client.release();
        }
    }
    async createInsurer(insurerData) {
        const client = await this.pool.connect();
        try {
            const result = await client.query('INSERT INTO insurers (name) VALUES ($1) RETURNING id, name, created_at', [insurerData.name]);
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                name: row.name,
                createdAt: new Date(row.created_at)
            };
        }
        finally {
            client.release();
        }
    }
    async deleteInsurer(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM insurers WHERE id = $1', [id]);
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre vy√∫ƒçtovania (settlements)
    async getSettlements() {
        const client = await this.pool.connect();
        try {
            console.log('üîç Starting getSettlements - checking/creating table...');
            // Ensure settlements table exists with correct schema
            await client.query(`
        CREATE TABLE IF NOT EXISTS settlements (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          company VARCHAR(100) DEFAULT 'Default Company',
          period VARCHAR(50) DEFAULT 'Current Period',
          from_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          to_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          total_income DECIMAL(10,2) DEFAULT 0,
          total_expenses DECIMAL(10,2) DEFAULT 0,
          commission DECIMAL(10,2) DEFAULT 0,
          profit DECIMAL(10,2) DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
            console.log('‚úÖ Settlements table ensured');
            console.log('‚úÖ Settlements table ready');
            // Simple query without JOINs that can cause issues
            const result = await client.query(`
        SELECT 
          id,
          company,
          period,
          from_date,
          to_date,
          total_income,
          total_expenses, 
          commission,
          profit,
          created_at
        FROM settlements
        ORDER BY created_at DESC
      `);
            console.log(`üìä Found ${result.rows.length} settlements`);
            // Load rentals and expenses for filtering
            const allRentals = await this.getRentals();
            const allExpenses = await this.getExpenses();
            // Map to Settlement interface format
            return result.rows.map((row) => {
                const fromDate = new Date(row.from_date || new Date());
                const toDate = new Date(row.to_date || new Date());
                const company = row.company || 'Default Company';
                // Filter rentals for this settlement
                const filteredRentals = allRentals.filter(rental => {
                    const rentalStart = new Date(rental.startDate);
                    const rentalEnd = new Date(rental.endDate);
                    const isInPeriod = (rentalStart >= fromDate && rentalStart <= toDate) ||
                        (rentalEnd >= fromDate && rentalEnd <= toDate) ||
                        (rentalStart <= fromDate && rentalEnd >= toDate);
                    // üîß FIXED: Use vehicle.company (from corrected getRentals) or fallback to rental.company
                    const vehicleCompany = rental.vehicle?.company;
                    const rentalCompany = rental.company; // Historical snapshot
                    const hasMatchingCompany = vehicleCompany === company || rentalCompany === company;
                    if (row.id && (isInPeriod || hasMatchingCompany)) {
                        console.log(`üè† Settlement ${row.id} - Rental ${rental.id}: Vehicle company: "${vehicleCompany}", Historical company: "${rentalCompany}", Settlement company: "${company}", Match: ${hasMatchingCompany}, Period: ${isInPeriod}`);
                    }
                    return isInPeriod && hasMatchingCompany;
                });
                // Filter expenses for this settlement
                const filteredExpenses = allExpenses.filter(expense => {
                    const expenseDate = new Date(expense.date);
                    const isInPeriod = expenseDate >= fromDate && expenseDate <= toDate;
                    return isInPeriod && expense.company === company;
                });
                return {
                    id: row.id?.toString() || '',
                    period: {
                        from: fromDate,
                        to: toDate
                    },
                    rentals: filteredRentals,
                    expenses: filteredExpenses,
                    totalIncome: parseFloat(row.total_income) || 0,
                    totalExpenses: parseFloat(row.total_expenses) || 0,
                    totalCommission: parseFloat(row.commission) || 0,
                    profit: parseFloat(row.profit) || 0,
                    company: company,
                    vehicleId: undefined
                };
            });
        }
        catch (error) {
            console.error('‚ùå getSettlements error:', error);
            // Return empty array instead of throwing - graceful fallback
            return [];
        }
        finally {
            client.release();
        }
    }
    async getSettlement(id) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT * FROM settlements WHERE id = $1
      `, [id]);
            if (result.rows.length === 0)
                return null;
            const row = result.rows[0];
            // Naƒç√≠taj s√∫visiace pren√°jmy a n√°klady a filtruj ich
            const allRentals = await this.getRentals();
            const allExpenses = await this.getExpenses();
            const fromDate = new Date(row.from_date);
            const toDate = new Date(row.to_date);
            const company = row.company;
            // Filter rentals for this settlement
            const filteredRentals = allRentals.filter(rental => {
                const rentalStart = new Date(rental.startDate);
                const rentalEnd = new Date(rental.endDate);
                const isInPeriod = (rentalStart >= fromDate && rentalStart <= toDate) ||
                    (rentalEnd >= fromDate && rentalEnd <= toDate) ||
                    (rentalStart <= fromDate && rentalEnd >= toDate);
                // Use vehicle.company (from corrected getRentals) or fallback to rental.company
                const vehicleCompany = rental.vehicle?.company;
                const rentalCompany = rental.company;
                const hasMatchingCompany = vehicleCompany === company || rentalCompany === company;
                return isInPeriod && hasMatchingCompany;
            });
            // Filter expenses for this settlement
            const filteredExpenses = allExpenses.filter(expense => {
                const expenseDate = new Date(expense.date);
                const isInPeriod = expenseDate >= fromDate && expenseDate <= toDate;
                return isInPeriod && expense.company === company;
            });
            return {
                id: row.id?.toString() || '',
                period: {
                    from: fromDate,
                    to: toDate
                },
                rentals: filteredRentals || [],
                expenses: filteredExpenses || [],
                totalIncome: parseFloat(row.total_income) || 0,
                totalExpenses: parseFloat(row.total_expenses) || 0,
                totalCommission: parseFloat(row.total_commission) || 0,
                profit: parseFloat(row.profit) || 0,
                company: row.company || undefined,
                vehicleId: row.vehicle_id || undefined
            };
        }
        finally {
            client.release();
        }
    }
    async createSettlement(settlementData) {
        const client = await this.pool.connect();
        try {
            console.log('üîç Creating settlement with data:', settlementData);
            // Ensure settlements table exists with correct schema
            await client.query(`
        CREATE TABLE IF NOT EXISTS settlements (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          company VARCHAR(100) DEFAULT 'Default Company',
          period VARCHAR(50) DEFAULT 'Current Period',
          from_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          to_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          total_income DECIMAL(10,2) DEFAULT 0,
          total_expenses DECIMAL(10,2) DEFAULT 0,
          commission DECIMAL(10,2) DEFAULT 0,
          profit DECIMAL(10,2) DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
            console.log('‚úÖ Settlements table ensured for create operation');
            const result = await client.query(`
        INSERT INTO settlements (
          company, period, from_date, to_date, total_income, total_expenses, 
          commission, profit
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        RETURNING id, company, period, from_date, to_date, total_income, total_expenses, 
                  commission, profit, created_at
      `, [
                settlementData.company || 'Default Company',
                settlementData.period || 'Current Period',
                settlementData.fromDate || new Date(),
                settlementData.toDate || new Date(),
                settlementData.totalIncome || 0,
                settlementData.totalExpenses || 0,
                settlementData.commission || 0,
                settlementData.profit || 0
            ]);
            const row = result.rows[0];
            console.log('‚úÖ Settlement created successfully:', row.id);
            return {
                id: row.id?.toString() || '',
                period: {
                    from: new Date(row.from_date),
                    to: new Date(row.to_date)
                },
                rentals: settlementData.rentals || [],
                expenses: settlementData.expenses || [],
                totalIncome: parseFloat(row.total_income) || 0,
                totalExpenses: parseFloat(row.total_expenses) || 0,
                totalCommission: parseFloat(row.commission) || 0,
                profit: parseFloat(row.profit) || 0,
                company: row.company || 'Default Company',
                vehicleId: undefined
            };
        }
        finally {
            client.release();
        }
    }
    async updateSettlement(id, updateData) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        UPDATE settlements 
        SET total_income = COALESCE($2, total_income),
            total_expenses = COALESCE($3, total_expenses),
            total_commission = COALESCE($4, total_commission),
            profit = COALESCE($5, profit),
            summary = COALESCE($6, summary),
            updated_at = CURRENT_TIMESTAMP
        WHERE id = $1
        RETURNING id, company, period_from, period_to, total_income, total_expenses, 
                  total_commission, profit, summary
      `, [
                id,
                updateData.totalIncome,
                updateData.totalExpenses,
                updateData.totalCommission,
                updateData.profit,
                updateData.summary
            ]);
            const row = result.rows[0];
            return {
                id: row.id?.toString() || '',
                period: {
                    from: new Date(row.period_from),
                    to: new Date(row.period_to)
                },
                rentals: [],
                expenses: [],
                totalIncome: parseFloat(row.total_income) || 0,
                totalExpenses: parseFloat(row.total_expenses) || 0,
                totalCommission: parseFloat(row.total_commission) || 0,
                profit: parseFloat(row.profit) || 0,
                company: row.company || undefined,
                vehicleId: undefined
            };
        }
        finally {
            client.release();
        }
    }
    async deleteSettlement(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM settlements WHERE id = $1', [id]);
        }
        finally {
            client.release();
        }
    }
    // PROTOCOLS HELPER METHODS
    extractMediaData(mediaArray) {
        try {
            if (!Array.isArray(mediaArray)) {
                console.log('‚ö†Ô∏è extractMediaData: mediaArray is not an array, returning empty array');
                return [];
            }
            if (mediaArray.length === 0) {
                console.log('üîç extractMediaData: Empty mediaArray, returning empty array');
                return [];
            }
            console.log('üîç extractMediaData: Processing mediaArray with', mediaArray.length, 'items');
            const mediaData = mediaArray
                .filter(item => item !== null && item !== undefined)
                .map(item => {
                try {
                    // Ak je item string (base64 URL), vytvor objekt
                    if (typeof item === 'string') {
                        console.log('üîç extractMediaData: Found string item (base64 URL)');
                        return {
                            id: `${Date.now()}_${Math.random()}`,
                            url: item,
                            type: 'vehicle',
                            timestamp: new Date(),
                            compressed: false
                        };
                    }
                    // Ak je item objekt, pou≈æij ho ako je
                    if (item && typeof item === 'object') {
                        console.log('üîç extractMediaData: Found object item:', item.id || 'no id');
                        return item;
                    }
                    console.log('‚ö†Ô∏è extractMediaData: Ignoring invalid item:', item);
                    return null;
                }
                catch (error) {
                    console.error('‚ùå extractMediaData: Error processing item:', error);
                    return null;
                }
            })
                .filter(item => item !== null);
            console.log('‚úÖ extractMediaData: Successfully extracted', mediaData.length, 'media items');
            return mediaData;
        }
        catch (error) {
            console.error('‚ùå extractMediaData: Critical error:', error);
            return [];
        }
    }
    mapMediaObjectsFromDB(mediaData) {
        if (!Array.isArray(mediaData)) {
            console.log('‚ö†Ô∏è mapMediaObjectsFromDB: mediaData is not an array, returning empty array');
            return [];
        }
        return mediaData
            .filter(item => item !== null && typeof item === 'object')
            .map(item => ({
            id: item.id || `${Date.now()}_${Math.random()}`,
            url: item.url || item,
            type: item.type || this.getMediaTypeFromUrl(item.url || ''),
            description: item.description || '',
            timestamp: item.timestamp ? new Date(item.timestamp) : new Date(),
            compressed: item.compressed || false,
            originalSize: item.originalSize,
            compressedSize: item.compressedSize
        }));
    }
    getMediaTypeFromUrl(url) {
        if (url.includes('/vehicle/'))
            return 'vehicle';
        if (url.includes('/damage/'))
            return 'damage';
        if (url.includes('/document/'))
            return 'document';
        if (url.includes('/fuel/'))
            return 'fuel';
        if (url.includes('/odometer/'))
            return 'odometer';
        return 'vehicle'; // default
    }
    // R2 Storage integration
    async uploadProtocolFile(protocolId, file, filename, contentType, mediaType = 'vehicle-images') {
        try {
            // ‚úÖ POU≈ΩIJ NOV√â R2 MET√ìDY S LEP≈†OU ORGANIZ√ÅCIOU
            const fileKey = r2_storage_1.r2Storage.generateProtocolMediaKey(protocolId, mediaType, filename);
            const url = await r2_storage_1.r2Storage.uploadFile(fileKey, file, contentType, {
                protocol_id: protocolId,
                media_type: mediaType,
                uploaded_at: new Date().toISOString()
            });
            console.log(`‚úÖ Protocol ${mediaType} uploaded to R2:`, url);
            return url;
        }
        catch (error) {
            console.error(`‚ùå Error uploading protocol ${mediaType} to R2:`, error);
            throw error;
        }
    }
    async uploadProtocolPDF(protocolId, pdfBuffer, protocolType = 'handover') {
        try {
            // ‚úÖ POU≈ΩIJ NOV√â R2 MET√ìDY PRE PDF
            const fileKey = r2_storage_1.r2Storage.generateProtocolPDFKey(protocolId, protocolType);
            const url = await r2_storage_1.r2Storage.uploadFile(fileKey, pdfBuffer, 'application/pdf', {
                protocol_id: protocolId,
                protocol_type: protocolType,
                file_type: 'pdf',
                uploaded_at: new Date().toISOString()
            });
            console.log(`‚úÖ Protocol PDF (${protocolType}) uploaded to R2:`, url);
            return url;
        }
        catch (error) {
            console.error(`‚ùå Error uploading protocol PDF (${protocolType}) to R2:`, error);
            throw error;
        }
    }
    // PROTOCOLS METHODS
    async initProtocolTables() {
        const client = await this.pool.connect();
        try {
            console.log('üîß Initializing protocol tables...');
            // Handover Protocols table
            await client.query(`
        CREATE TABLE IF NOT EXISTS handover_protocols (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          rental_id UUID NOT NULL,
          type VARCHAR(20) DEFAULT 'handover',
          status VARCHAR(20) DEFAULT 'completed',
          location VARCHAR(255),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          completed_at TIMESTAMP,
          
          -- Vehicle condition
          odometer INTEGER DEFAULT 0,
          fuel_level INTEGER DEFAULT 100,
          fuel_type VARCHAR(50) DEFAULT 'Benz√≠n',
          exterior_condition VARCHAR(100) DEFAULT 'Dobr√Ω',
          interior_condition VARCHAR(100) DEFAULT 'Dobr√Ω',
          condition_notes TEXT,
          
          -- Media storage (JSONB for full objects with base64 data)
          vehicle_images_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          vehicle_videos_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          document_images_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          damage_images_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          
          -- Damages and signatures
          damages JSONB DEFAULT '[]',
          signatures JSONB DEFAULT '[]',
          
          -- Additional data
          rental_data JSONB,
          pdf_url VARCHAR(500),
          email_sent BOOLEAN DEFAULT FALSE,
          notes TEXT,
          created_by VARCHAR(100)
        );
      `);
            // Return Protocols table  
            await client.query(`
        CREATE TABLE IF NOT EXISTS return_protocols (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          rental_id UUID NOT NULL,
          handover_protocol_id UUID,
          type VARCHAR(20) DEFAULT 'return',
          status VARCHAR(20) DEFAULT 'draft',
          location VARCHAR(255),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          completed_at TIMESTAMP,
          
          -- Vehicle condition
          odometer INTEGER DEFAULT 0,
          fuel_level INTEGER DEFAULT 100,
          fuel_type VARCHAR(50) DEFAULT 'Benz√≠n',
          exterior_condition VARCHAR(100) DEFAULT 'Dobr√Ω',
          interior_condition VARCHAR(100) DEFAULT 'Dobr√Ω',
          condition_notes TEXT,
          
          -- Media storage (JSONB for full objects with base64 data)
          vehicle_images_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          vehicle_videos_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          document_images_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          damage_images_urls JSONB DEFAULT '[]', -- Full media objects with base64 data
          
          -- Damages and signatures
          damages JSONB DEFAULT '[]',
          new_damages JSONB DEFAULT '[]',
          signatures JSONB DEFAULT '[]',
          
          -- Calculations
          kilometers_used INTEGER DEFAULT 0,
          kilometer_overage INTEGER DEFAULT 0,
          kilometer_fee DECIMAL(10,2) DEFAULT 0,
          fuel_used INTEGER DEFAULT 0,
          fuel_fee DECIMAL(10,2) DEFAULT 0,
          total_extra_fees DECIMAL(10,2) DEFAULT 0,
          deposit_refund DECIMAL(10,2) DEFAULT 0,
          additional_charges DECIMAL(10,2) DEFAULT 0,
          final_refund DECIMAL(10,2) DEFAULT 0,
          
          -- Additional data
          rental_data JSONB,
          pdf_url VARCHAR(500),
          email_sent BOOLEAN DEFAULT FALSE,
          email_sent_at TIMESTAMP,
          notes TEXT,
          created_by VARCHAR(100)
        );
      `);
            // Migr√°cia existuj√∫cich tabuliek na JSONB
            try {
                console.log('üîÑ Running protocol tables migration...');
                // Migr√°cia handover_protocols
                await client.query(`
          ALTER TABLE handover_protocols 
          ALTER COLUMN vehicle_images_urls TYPE JSONB USING 
            CASE 
              WHEN vehicle_images_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(vehicle_images_urls::jsonb) = 'array' THEN vehicle_images_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                await client.query(`
          ALTER TABLE handover_protocols 
          ALTER COLUMN vehicle_videos_urls TYPE JSONB USING 
            CASE 
              WHEN vehicle_videos_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(vehicle_videos_urls::jsonb) = 'array' THEN vehicle_videos_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                await client.query(`
          ALTER TABLE handover_protocols 
          ALTER COLUMN document_images_urls TYPE JSONB USING 
            CASE 
              WHEN document_images_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(document_images_urls::jsonb) = 'array' THEN document_images_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                await client.query(`
          ALTER TABLE handover_protocols 
          ALTER COLUMN damage_images_urls TYPE JSONB USING 
            CASE 
              WHEN damage_images_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(damage_images_urls::jsonb) = 'array' THEN damage_images_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                // Migr√°cia return_protocols
                await client.query(`
          ALTER TABLE return_protocols 
          ALTER COLUMN vehicle_images_urls TYPE JSONB USING 
            CASE 
              WHEN vehicle_images_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(vehicle_images_urls::jsonb) = 'array' THEN vehicle_images_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                await client.query(`
          ALTER TABLE return_protocols 
          ALTER COLUMN vehicle_videos_urls TYPE JSONB USING 
            CASE 
              WHEN vehicle_videos_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(vehicle_videos_urls::jsonb) = 'array' THEN vehicle_videos_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                await client.query(`
          ALTER TABLE return_protocols 
          ALTER COLUMN document_images_urls TYPE JSONB USING 
            CASE 
              WHEN document_images_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(document_images_urls::jsonb) = 'array' THEN document_images_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                await client.query(`
          ALTER TABLE return_protocols 
          ALTER COLUMN damage_images_urls TYPE JSONB USING 
            CASE 
              WHEN damage_images_urls IS NULL THEN '[]'::jsonb
              WHEN jsonb_typeof(damage_images_urls::jsonb) = 'array' THEN damage_images_urls::jsonb
              ELSE '[]'::jsonb
            END;
        `);
                // Pridanie ch√Ωbaj√∫cich stƒ∫pcov pre handover_protocols
                try {
                    await client.query(`
            ALTER TABLE handover_protocols 
            ADD COLUMN IF NOT EXISTS pdf_url VARCHAR(500);
          `);
                    await client.query(`
            ALTER TABLE handover_protocols 
            ADD COLUMN IF NOT EXISTS email_sent BOOLEAN DEFAULT FALSE;
          `);
                    console.log('‚úÖ Added missing columns to handover_protocols');
                }
                catch (columnError) {
                    console.log('‚ö†Ô∏è Column migration failed (columns might already exist):', columnError);
                }
                console.log('‚úÖ Protocol tables migration completed');
            }
            catch (migrationError) {
                console.log('‚ö†Ô∏è Protocol tables migration failed (tables might already be migrated):', migrationError);
            }
            console.log('‚úÖ Protocol tables initialized successfully');
        }
        catch (error) {
            console.error('‚ùå Error initializing protocol tables:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // HANDOVER PROTOCOLS
    async createHandoverProtocol(protocolData) {
        const client = await this.pool.connect();
        try {
            console.log('üîÑ [DB] createHandoverProtocol - input:', JSON.stringify(protocolData, null, 2));
            await this.initProtocolTables();
            console.log('üîÑ Creating handover protocol:', protocolData.id);
            console.log('üîÑ Protocol data:', JSON.stringify(protocolData, null, 2));
            console.log('üîÑ PDF URL from input:', protocolData.pdfUrl);
            // Valid√°cia d√°t
            if (!protocolData.rentalId) {
                throw new Error('Rental ID is required');
            }
            // M√âDIA: Pou≈æij priamo m√©di√° z frontendu - u≈æ s√∫ v spr√°vnom form√°te
            console.log('üîÑ [DB] Media before DB insert:', {
                vehicleImages: protocolData.vehicleImages?.length || 0,
                vehicleVideos: protocolData.vehicleVideos?.length || 0,
                documentImages: protocolData.documentImages?.length || 0,
                damageImages: protocolData.damageImages?.length || 0
            });
            console.log('üîÑ PDF URL before DB insert:', protocolData.pdfUrl);
            const result = await client.query(`
        INSERT INTO handover_protocols (
          rental_id, location, odometer, fuel_level, fuel_type,
          exterior_condition, interior_condition, condition_notes,
          vehicle_images_urls, vehicle_videos_urls, document_images_urls, damage_images_urls,
          damages, signatures, rental_data, pdf_url, email_sent, notes, created_by
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
        ) RETURNING *
      `, [
                protocolData.rentalId, // UUID as string, not parseInt
                protocolData.location || '',
                protocolData.vehicleCondition?.odometer || 0,
                protocolData.vehicleCondition?.fuelLevel || 100,
                protocolData.vehicleCondition?.fuelType || 'Benz√≠n',
                protocolData.vehicleCondition?.exteriorCondition || 'Dobr√Ω',
                protocolData.vehicleCondition?.interiorCondition || 'Dobr√Ω',
                protocolData.vehicleCondition?.notes || '',
                JSON.stringify(protocolData.vehicleImages || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.vehicleVideos || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.documentImages || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.damageImages || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.damages || []),
                JSON.stringify(protocolData.signatures || []),
                JSON.stringify(protocolData.rentalData || {}),
                protocolData.pdfUrl || null,
                protocolData.emailSent || false,
                protocolData.notes || '',
                protocolData.createdBy || ''
            ]);
            const row = result.rows[0];
            console.log('‚úÖ Handover protocol created:', row.id);
            console.log('‚úÖ PDF URL in database:', row.pdf_url);
            console.log('‚úÖ Media in database:', {
                vehicleImages: row.vehicle_images_urls?.length || 0,
                vehicleVideos: row.vehicle_videos_urls?.length || 0,
                documentImages: row.document_images_urls?.length || 0,
                damageImages: row.damage_images_urls?.length || 0
            });
            // ‚úÖ UPDATE RENTAL with protocol ID
            await client.query(`
        UPDATE rentals 
        SET handover_protocol_id = $1 
        WHERE id = $2
      `, [row.id, protocolData.rentalId]);
            console.log('‚úÖ Updated rental', protocolData.rentalId, 'with handover protocol ID:', row.id);
            const mappedProtocol = this.mapHandoverProtocolFromDB(row);
            console.log('‚úÖ Mapped protocol pdfUrl:', mappedProtocol.pdfUrl);
            console.log('‚úÖ Mapped protocol media:', {
                vehicleImages: mappedProtocol.vehicleImages?.length || 0,
                vehicleVideos: mappedProtocol.vehicleVideos?.length || 0,
                documentImages: mappedProtocol.documentImages?.length || 0,
                damageImages: mappedProtocol.damageImages?.length || 0
            });
            return mappedProtocol;
        }
        catch (error) {
            console.error('‚ùå Error creating handover protocol:', error);
            console.error('‚ùå Error details:', error instanceof Error ? error.message : 'Unknown error');
            console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack trace');
            throw error;
        }
        finally {
            client.release();
        }
    }
    async getHandoverProtocolsByRental(rentalId) {
        const client = await this.pool.connect();
        try {
            await this.initProtocolTables();
            const result = await client.query(`
        SELECT * FROM handover_protocols 
        WHERE rental_id = $1 
        ORDER BY created_at DESC
      `, [rentalId]);
            return result.rows.map(row => this.mapHandoverProtocolFromDB(row));
        }
        catch (error) {
            console.error('‚ùå Error fetching handover protocols:', error);
            return [];
        }
        finally {
            client.release();
        }
    }
    async getHandoverProtocolById(id) {
        const client = await this.pool.connect();
        try {
            await this.initProtocolTables();
            const result = await client.query(`
        SELECT * FROM handover_protocols WHERE id = $1::uuid
      `, [id]);
            if (result.rows.length === 0)
                return null;
            return this.mapHandoverProtocolFromDB(result.rows[0]);
        }
        catch (error) {
            console.error('‚ùå Error fetching handover protocol:', error);
            return null;
        }
        finally {
            client.release();
        }
    }
    // RETURN PROTOCOLS
    async createReturnProtocol(protocolData) {
        const client = await this.pool.connect();
        try {
            await this.initProtocolTables();
            console.log('üîÑ Creating return protocol:', protocolData.id);
            const result = await client.query(`
        INSERT INTO return_protocols (
          id, rental_id, handover_protocol_id, location, status, completed_at,
          odometer, fuel_level, fuel_type, exterior_condition, interior_condition, condition_notes,
          vehicle_images_urls, vehicle_videos_urls, document_images_urls, damage_images_urls,
          damages, new_damages, signatures,
          kilometers_used, kilometer_overage, kilometer_fee,
          fuel_used, fuel_fee, total_extra_fees,
          deposit_refund, additional_charges, final_refund,
          rental_data, pdf_url, email_sent, notes, created_by
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, 
          $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33
        ) RETURNING *
      `, [
                protocolData.id,
                protocolData.rentalId,
                protocolData.handoverProtocolId || null,
                protocolData.location || '',
                protocolData.status || 'draft',
                protocolData.completedAt || null,
                protocolData.vehicleCondition?.odometer || 0,
                protocolData.vehicleCondition?.fuelLevel || 100,
                protocolData.vehicleCondition?.fuelType || 'Benz√≠n',
                protocolData.vehicleCondition?.exteriorCondition || 'Dobr√Ω',
                protocolData.vehicleCondition?.interiorCondition || 'Dobr√Ω',
                protocolData.vehicleCondition?.notes || '',
                JSON.stringify(protocolData.vehicleImages || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.vehicleVideos || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.documentImages || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.damageImages || []), // ‚úÖ OPRAVEN√â: JSON.stringify pre JSONB
                JSON.stringify(protocolData.damages || []),
                JSON.stringify(protocolData.newDamages || []),
                JSON.stringify(protocolData.signatures || []),
                protocolData.kilometersUsed || 0,
                protocolData.kilometerOverage || 0,
                protocolData.kilometerFee || 0,
                protocolData.fuelUsed || 0,
                protocolData.fuelFee || 0,
                protocolData.totalExtraFees || 0,
                protocolData.depositRefund || 0,
                protocolData.additionalCharges || 0,
                protocolData.finalRefund || 0,
                JSON.stringify(protocolData.rentalData || {}),
                protocolData.pdfUrl || null,
                protocolData.emailSent || false,
                protocolData.notes || '',
                protocolData.createdBy || ''
            ]);
            const row = result.rows[0];
            console.log('‚úÖ Return protocol created:', row.id);
            // ‚úÖ UPDATE RENTAL with protocol ID
            await client.query(`
        UPDATE rentals 
        SET return_protocol_id = $1 
        WHERE id = $2
      `, [row.id, protocolData.rentalId]);
            console.log('‚úÖ Updated rental', protocolData.rentalId, 'with return protocol ID:', row.id);
            return this.mapReturnProtocolFromDB(row);
        }
        catch (error) {
            console.error('‚ùå Error creating return protocol:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    async getReturnProtocolsByRental(rentalId) {
        const client = await this.pool.connect();
        try {
            await this.initProtocolTables();
            const result = await client.query(`
        SELECT * FROM return_protocols 
        WHERE rental_id = $1 
        ORDER BY created_at DESC
      `, [rentalId]);
            return result.rows.map(row => this.mapReturnProtocolFromDB(row));
        }
        catch (error) {
            console.error('‚ùå Error fetching return protocols:', error);
            return [];
        }
        finally {
            client.release();
        }
    }
    async getReturnProtocolById(id) {
        const client = await this.pool.connect();
        try {
            await this.initProtocolTables();
            const result = await client.query(`
        SELECT * FROM return_protocols WHERE id = $1::uuid
      `, [id]);
            if (result.rows.length === 0)
                return null;
            return this.mapReturnProtocolFromDB(result.rows[0]);
        }
        catch (error) {
            console.error('‚ùå Error fetching return protocol:', error);
            return null;
        }
        finally {
            client.release();
        }
    }
    async updateReturnProtocol(id, updateData) {
        const client = await this.pool.connect();
        try {
            await this.initProtocolTables();
            const result = await client.query(`
        UPDATE return_protocols SET
          status = COALESCE($2, status),
          completed_at = COALESCE($3, completed_at),
          pdf_url = COALESCE($4, pdf_url),
          email_sent = COALESCE($5, email_sent),
          email_sent_at = COALESCE($6, email_sent_at),
          notes = COALESCE($7, notes)
        WHERE id = $1::uuid
        RETURNING *
      `, [
                id,
                updateData.status,
                updateData.completedAt,
                updateData.pdfUrl,
                updateData.emailSent,
                updateData.emailSentAt,
                updateData.notes
            ]);
            if (result.rows.length === 0)
                return null;
            return this.mapReturnProtocolFromDB(result.rows[0]);
        }
        catch (error) {
            console.error('‚ùå Error updating return protocol:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // Mapping methods
    mapHandoverProtocolFromDB(row) {
        // Safe JSON parsing function for JSONB fields
        const safeJsonParse = (value, fallback = []) => {
            console.log('üîç [DB] safeJsonParse input:', {
                value: value,
                type: typeof value,
                isArray: Array.isArray(value),
                isNull: value === null,
                isUndefined: value === undefined,
                stringLength: typeof value === 'string' ? value.length : 'N/A'
            });
            if (!value || value === 'null' || value === 'undefined') {
                console.log('üîç [DB] safeJsonParse: returning fallback (null/undefined)');
                return fallback;
            }
            // JSONB sa automaticky parsuje PostgreSQL, tak≈æe ak je to u≈æ objekt, vr√°≈• ho
            if (typeof value === 'object' && value !== null) {
                // ‚úÖ NOV√Å LOGIKA: Ak je to pole stringov, parsuj ka≈æd√Ω string
                if (Array.isArray(value) && value.length > 0 && typeof value[0] === 'string') {
                    console.log('üîç [DB] safeJsonParse: parsing array of JSON strings');
                    try {
                        const parsed = value.map(item => {
                            if (typeof item === 'string') {
                                return JSON.parse(item);
                            }
                            return item;
                        });
                        console.log('üîç [DB] safeJsonParse: successfully parsed array of strings:', parsed);
                        return parsed;
                    }
                    catch (error) {
                        console.log('‚ö†Ô∏è Error parsing array of JSON strings:', error);
                        return fallback;
                    }
                }
                console.log('üîç [DB] safeJsonParse: value is already object, returning as is');
                return value;
            }
            // Ak je to string, sk√∫s ho parsova≈•
            if (typeof value === 'string') {
                try {
                    const parsed = JSON.parse(value);
                    console.log('üîç [DB] safeJsonParse: successfully parsed string to:', parsed);
                    return parsed;
                }
                catch (error) {
                    console.log('‚ö†Ô∏è JSON parse error in mapHandoverProtocolFromDB:', error);
                    return fallback;
                }
            }
            console.log('üîç [DB] safeJsonParse: returning fallback (unknown type)');
            return fallback;
        };
        console.log('üîÑ [DB] Mapping handover protocol from DB row:', {
            id: row.id,
            pdf_url: row.pdf_url,
            pdf_url_type: typeof row.pdf_url,
            vehicle_images_type: typeof row.vehicle_images_urls,
            vehicle_images_length: Array.isArray(row.vehicle_images_urls) ? row.vehicle_images_urls.length : 'not array',
            vehicle_images_raw: row.vehicle_images_urls
        });
        const mappedProtocol = {
            id: row.id,
            rentalId: row.rental_id,
            type: 'handover',
            status: row.status || 'completed',
            location: row.location,
            createdAt: new Date(row.created_at),
            completedAt: row.completed_at ? new Date(row.completed_at) : new Date(row.created_at),
            vehicleCondition: {
                odometer: row.odometer || 0,
                fuelLevel: row.fuel_level || 100,
                fuelType: row.fuel_type || 'Benz√≠n',
                exteriorCondition: row.exterior_condition || 'Dobr√Ω',
                interiorCondition: row.interior_condition || 'Dobr√Ω',
                notes: row.condition_notes || ''
            },
            vehicleImages: safeJsonParse(row.vehicle_images_urls, []), // ‚úÖ JSONB - automaticky parsovan√©
            vehicleVideos: safeJsonParse(row.vehicle_videos_urls, []), // ‚úÖ JSONB - automaticky parsovan√©
            documentImages: safeJsonParse(row.document_images_urls, []), // ‚úÖ JSONB - automaticky parsovan√©
            damageImages: safeJsonParse(row.damage_images_urls, []), // ‚úÖ JSONB - automaticky parsovan√©
            damages: safeJsonParse(row.damages, []),
            signatures: safeJsonParse(row.signatures, []),
            rentalData: safeJsonParse(row.rental_data, {}),
            pdfUrl: row.pdf_url,
            emailSent: row.email_sent || false,
            emailSentAt: row.email_sent_at ? new Date(row.email_sent_at) : undefined,
            notes: row.notes,
            createdBy: row.created_by
        };
        console.log('üîÑ [DB] Mapped protocol media:', {
            vehicleImages: mappedProtocol.vehicleImages?.length || 0,
            vehicleVideos: mappedProtocol.vehicleVideos?.length || 0,
            documentImages: mappedProtocol.documentImages?.length || 0,
            damageImages: mappedProtocol.damageImages?.length || 0,
            vehicleImagesSample: mappedProtocol.vehicleImages?.slice(0, 2) || []
        });
        return mappedProtocol;
    }
    mapReturnProtocolFromDB(row) {
        // Safe JSON parsing function for JSONB fields
        const safeJsonParse = (value, fallback = []) => {
            if (!value || value === 'null' || value === 'undefined') {
                return fallback;
            }
            // JSONB sa automaticky parsuje PostgreSQL, tak≈æe ak je to u≈æ objekt, vr√°≈• ho
            if (typeof value === 'object' && value !== null) {
                return value;
            }
            // Ak je to string, sk√∫s ho parsova≈•
            if (typeof value === 'string') {
                try {
                    return JSON.parse(value);
                }
                catch (error) {
                    console.log('‚ö†Ô∏è JSON parse error in mapReturnProtocolFromDB:', error);
                    return fallback;
                }
            }
            return fallback;
        };
        return {
            id: row.id,
            rentalId: row.rental_id,
            handoverProtocolId: row.handover_protocol_id,
            type: 'return',
            status: row.status || 'draft',
            location: row.location,
            createdAt: new Date(row.created_at),
            completedAt: row.completed_at ? new Date(row.completed_at) : undefined,
            vehicleCondition: {
                odometer: row.odometer || 0,
                fuelLevel: row.fuel_level || 100,
                fuelType: row.fuel_type || 'Benz√≠n',
                exteriorCondition: row.exterior_condition || 'Dobr√Ω',
                interiorCondition: row.interior_condition || 'Dobr√Ω',
                notes: row.condition_notes || ''
            },
            vehicleImages: safeJsonParse(row.vehicle_images_urls, []), // ‚úÖ PRIAMO - bez mapMediaObjectsFromDB
            vehicleVideos: safeJsonParse(row.vehicle_videos_urls, []), // ‚úÖ PRIAMO - bez mapMediaObjectsFromDB
            documentImages: safeJsonParse(row.document_images_urls, []), // ‚úÖ PRIAMO - bez mapMediaObjectsFromDB
            damageImages: safeJsonParse(row.damage_images_urls, []), // ‚úÖ PRIAMO - bez mapMediaObjectsFromDB
            damages: safeJsonParse(row.damages, []),
            newDamages: safeJsonParse(row.new_damages, []),
            signatures: safeJsonParse(row.signatures, []),
            kilometersUsed: row.kilometers_used || 0,
            kilometerOverage: row.kilometer_overage || 0,
            kilometerFee: parseFloat(row.kilometer_fee) || 0,
            fuelUsed: row.fuel_used || 0,
            fuelFee: parseFloat(row.fuel_fee) || 0,
            totalExtraFees: parseFloat(row.total_extra_fees) || 0,
            depositRefund: parseFloat(row.deposit_refund) || 0,
            additionalCharges: parseFloat(row.additional_charges) || 0,
            finalRefund: parseFloat(row.final_refund) || 0,
            rentalData: safeJsonParse(row.rental_data, {}),
            pdfUrl: row.pdf_url,
            emailSent: row.email_sent || false,
            emailSentAt: row.email_sent_at ? new Date(row.email_sent_at) : undefined,
            notes: row.notes,
            createdBy: row.created_by
        };
    }
    // Zatvorenie spojenia
    async deleteHandoverProtocol(id) {
        const client = await this.pool.connect();
        try {
            console.log(`üóëÔ∏è Deleting handover protocol: ${id}`);
            // Najprv z√≠skaj protokol aby sme vedeli vymaza≈• s√∫bory
            const protocol = await this.getHandoverProtocolById(id);
            if (!protocol) {
                console.log(`‚ö†Ô∏è Protocol ${id} not found`);
                return false;
            }
            // Vymazanie z datab√°zy
            const result = await client.query(`
        DELETE FROM handover_protocols WHERE id = $1::uuid
      `, [id]);
            if (result.rowCount === 0) {
                console.log(`‚ö†Ô∏è No protocol deleted from database: ${id}`);
                return false;
            }
            // ‚úÖ MAZANIE S√öBOROV Z R2
            try {
                await r2_storage_1.r2Storage.deleteProtocolFiles(id);
                console.log(`‚úÖ Protocol files deleted from R2: ${id}`);
            }
            catch (error) {
                console.error(`‚ùå Error deleting protocol files from R2: ${error}`);
                // Pokraƒçujeme aj keƒè sa s√∫bory nevymazali
            }
            console.log(`‚úÖ Handover protocol deleted successfully: ${id}`);
            return true;
        }
        catch (error) {
            console.error('‚ùå Error deleting handover protocol:', error);
            return false;
        }
        finally {
            client.release();
        }
    }
    async deleteReturnProtocol(id) {
        const client = await this.pool.connect();
        try {
            console.log(`üóëÔ∏è Deleting return protocol: ${id}`);
            // Najprv z√≠skaj protokol aby sme vedeli vymaza≈• s√∫bory
            const protocol = await this.getReturnProtocolById(id);
            if (!protocol) {
                console.log(`‚ö†Ô∏è Protocol ${id} not found`);
                return false;
            }
            // Vymazanie z datab√°zy
            const result = await client.query(`
        DELETE FROM return_protocols WHERE id = $1::uuid
      `, [id]);
            if (result.rowCount === 0) {
                console.log(`‚ö†Ô∏è No protocol deleted from database: ${id}`);
                return false;
            }
            // ‚úÖ MAZANIE S√öBOROV Z R2
            try {
                await r2_storage_1.r2Storage.deleteProtocolFiles(id);
                console.log(`‚úÖ Protocol files deleted from R2: ${id}`);
            }
            catch (error) {
                console.error(`‚ùå Error deleting protocol files from R2: ${error}`);
                // Pokraƒçujeme aj keƒè sa s√∫bory nevymazali
            }
            console.log(`‚úÖ Return protocol deleted successfully: ${id}`);
            return true;
        }
        catch (error) {
            console.error('‚ùå Error deleting return protocol:', error);
            return false;
        }
        finally {
            client.release();
        }
    }
    async getClient() {
        return await this.pool.connect();
    }
    async close() {
        await this.pool.end();
    }
    // üöÄ NOV√Å MET√ìDA: Aktualiz√°cia handover protokolu
    async updateHandoverProtocol(id, updateData) {
        const client = await this.pool.connect();
        try {
            console.log('üîÑ Updating handover protocol:', id);
            console.log('üîÑ Update data:', JSON.stringify(updateData, null, 2));
            // Dynamick√© vytvorenie SET klauzuly
            const setFields = [];
            const values = [];
            let paramIndex = 1;
            // Mapovanie pol√≠
            const fieldMappings = {
                vehicleImages: 'vehicle_images_urls',
                vehicleVideos: 'vehicle_videos_urls',
                documentImages: 'document_images_urls',
                documentVideos: 'document_videos_urls',
                damageImages: 'damage_images_urls',
                damageVideos: 'damage_videos_urls',
                damages: 'damages',
                signatures: 'signatures',
                rentalData: 'rental_data',
                pdfUrl: 'pdf_url',
                emailSent: 'email_sent',
                notes: 'notes',
                location: 'location',
                status: 'status',
                completedAt: 'completed_at'
            };
            for (const [key, value] of Object.entries(updateData)) {
                if (fieldMappings[key]) {
                    setFields.push(`${fieldMappings[key]} = $${paramIndex}`);
                    // ≈†peci√°lne spracovanie pre JSON polia
                    if (['vehicleImages', 'vehicleVideos', 'documentImages', 'documentVideos', 'damageImages', 'damageVideos', 'damages', 'signatures', 'rentalData'].includes(key)) {
                        values.push(JSON.stringify(value));
                    }
                    else if (key === 'completedAt' && value) {
                        values.push(new Date(value));
                    }
                    else {
                        values.push(value);
                    }
                    paramIndex++;
                }
            }
            if (setFields.length === 0) {
                throw new Error('≈Ωiadne platn√© polia na aktualiz√°ciu');
            }
            // Pridanie updated_at
            setFields.push('updated_at = CURRENT_TIMESTAMP');
            const query = `
        UPDATE handover_protocols 
        SET ${setFields.join(', ')}
        WHERE id = $${paramIndex}::uuid
        RETURNING *
      `;
            values.push(id);
            console.log('üîÑ Update query:', query);
            console.log('üîÑ Update values:', values);
            const result = await client.query(query, values);
            if (result.rows.length === 0) {
                throw new Error('Protokol nebol n√°jden√Ω');
            }
            const updatedProtocol = this.mapHandoverProtocolFromDB(result.rows[0]);
            console.log('‚úÖ Handover protocol updated successfully');
            return updatedProtocol;
        }
        catch (error) {
            console.error('‚ùå Error updating handover protocol:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // ========================================
    // VEHICLE UNAVAILABILITY CRUD METHODS
    // ========================================
    async getVehicleUnavailabilities(vehicleId, startDate, endDate) {
        const client = await this.pool.connect();
        try {
            let query = `
        SELECT vu.*, v.brand, v.model, v.license_plate 
        FROM vehicle_unavailability vu
        LEFT JOIN vehicles v ON vu.vehicle_id = v.id
        WHERE 1=1
      `;
            const params = [];
            let paramIndex = 1;
            // Filter by vehicle ID
            if (vehicleId) {
                query += ` AND vu.vehicle_id = $${paramIndex}`;
                params.push(vehicleId);
                paramIndex++;
            }
            // Filter by date range
            if (startDate && endDate) {
                query += ` AND vu.start_date <= $${paramIndex} AND vu.end_date >= $${paramIndex + 1}`;
                params.push(endDate, startDate);
                paramIndex += 2;
            }
            query += ` ORDER BY vu.start_date ASC, vu.priority ASC`;
            const result = await client.query(query, params);
            return result.rows.map(row => ({
                id: row.id,
                vehicleId: row.vehicle_id,
                vehicle: row.brand ? {
                    brand: row.brand,
                    model: row.model,
                    licensePlate: row.license_plate
                } : undefined,
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                reason: row.reason,
                type: row.type,
                notes: row.notes,
                priority: row.priority,
                recurring: row.recurring,
                recurringConfig: row.recurring_config ? JSON.parse(row.recurring_config) : undefined,
                createdAt: new Date(row.created_at),
                updatedAt: new Date(row.updated_at),
                createdBy: row.created_by
            }));
        }
        finally {
            client.release();
        }
    }
    async getVehicleUnavailability(id) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT vu.*, v.brand, v.model, v.license_plate 
        FROM vehicle_unavailability vu
        LEFT JOIN vehicles v ON vu.vehicle_id = v.id
        WHERE vu.id = $1
      `, [id]);
            if (result.rows.length === 0)
                return null;
            const row = result.rows[0];
            return {
                id: row.id,
                vehicleId: row.vehicle_id,
                vehicle: row.brand ? {
                    brand: row.brand,
                    model: row.model,
                    licensePlate: row.license_plate
                } : undefined,
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                reason: row.reason,
                type: row.type,
                notes: row.notes,
                priority: row.priority,
                recurring: row.recurring,
                recurringConfig: row.recurring_config ? JSON.parse(row.recurring_config) : undefined,
                createdAt: new Date(row.created_at),
                updatedAt: new Date(row.updated_at),
                createdBy: row.created_by
            };
        }
        finally {
            client.release();
        }
    }
    async createVehicleUnavailability(data) {
        const client = await this.pool.connect();
        try {
            // Validate dates
            if (data.endDate < data.startDate) {
                throw new Error('D√°tum ukonƒçenia nem√¥≈æe by≈• skor≈°√≠ ako d√°tum zaƒçiatku');
            }
            // Check for conflicts
            const conflictCheck = await client.query(`
        SELECT id, reason, type FROM vehicle_unavailability 
        WHERE vehicle_id = $1 
        AND start_date < $3 
        AND end_date > $2
      `, [data.vehicleId, data.startDate, data.endDate]);
            if (conflictCheck.rows.length > 0) {
                const conflict = conflictCheck.rows[0];
                console.warn(`‚ö†Ô∏è Prekr√Ωvanie s existuj√∫cou nedostupnos≈•ou: ${conflict.reason} (${conflict.type})`);
                // Len warning, nie error - m√¥≈æu sa prekr√Ωva≈•
            }
            const result = await client.query(`
        INSERT INTO vehicle_unavailability (
          vehicle_id, start_date, end_date, reason, type, notes, 
          priority, recurring, recurring_config, created_by
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) 
        RETURNING *
      `, [
                data.vehicleId,
                data.startDate,
                data.endDate,
                data.reason,
                data.type || 'maintenance',
                data.notes,
                data.priority || 2,
                data.recurring || false,
                data.recurringConfig ? JSON.stringify(data.recurringConfig) : null,
                data.createdBy || 'system'
            ]);
            const row = result.rows[0];
            return {
                id: row.id,
                vehicleId: row.vehicle_id,
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                reason: row.reason,
                type: row.type,
                notes: row.notes,
                priority: row.priority,
                recurring: row.recurring,
                recurringConfig: row.recurring_config ? JSON.parse(row.recurring_config) : undefined,
                createdAt: new Date(row.created_at),
                updatedAt: new Date(row.updated_at),
                createdBy: row.created_by
            };
        }
        finally {
            client.release();
        }
    }
    async updateVehicleUnavailability(id, data) {
        const client = await this.pool.connect();
        try {
            // Build dynamic update query
            const setFields = [];
            const values = [];
            let paramIndex = 1;
            for (const [key, value] of Object.entries(data)) {
                if (value !== undefined) {
                    const dbField = key === 'startDate' ? 'start_date' :
                        key === 'endDate' ? 'end_date' :
                            key === 'recurringConfig' ? 'recurring_config' :
                                key.replace(/([A-Z])/g, '_$1').toLowerCase();
                    setFields.push(`${dbField} = $${paramIndex}`);
                    if (key === 'recurringConfig') {
                        values.push(JSON.stringify(value));
                    }
                    else {
                        values.push(value);
                    }
                    paramIndex++;
                }
            }
            if (setFields.length === 0) {
                throw new Error('≈Ωiadne polia na aktualiz√°ciu');
            }
            setFields.push('updated_at = CURRENT_TIMESTAMP');
            const query = `
        UPDATE vehicle_unavailability 
        SET ${setFields.join(', ')}
        WHERE id = $${paramIndex}
        RETURNING *
      `;
            const result = await client.query(query, [...values, id]);
            if (result.rows.length === 0) {
                throw new Error('Nedostupnos≈• vozidla nen√°jden√°');
            }
            const row = result.rows[0];
            return {
                id: row.id,
                vehicleId: row.vehicle_id,
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                reason: row.reason,
                type: row.type,
                notes: row.notes,
                priority: row.priority,
                recurring: row.recurring,
                recurringConfig: row.recurring_config ? JSON.parse(row.recurring_config) : undefined,
                createdAt: new Date(row.created_at),
                updatedAt: new Date(row.updated_at),
                createdBy: row.created_by
            };
        }
        finally {
            client.release();
        }
    }
    async deleteVehicleUnavailability(id) {
        const client = await this.pool.connect();
        try {
            const result = await client.query('DELETE FROM vehicle_unavailability WHERE id = $1', [id]);
            return (result.rowCount || 0) > 0;
        }
        finally {
            client.release();
        }
    }
    // üöÄ F√ÅZA 2.1 + 2.2 + 2.3: HYBRID OPTIMIZED - smart cache + pre-filtered CTE + connection reuse  
    async getCalendarDataUnified(startDate, endDate) {
        // üöÄ F√ÅZA 2.3: SMART CACHE CHECK - sk√∫s n√°js≈• v cache
        const cacheKey = this.generateCacheKey('calendar', startDate, endDate);
        const cachedEntry = this.calendarCache.get(cacheKey);
        if (cachedEntry && this.isValidCacheEntry(cachedEntry, this.CALENDAR_CACHE_TTL)) {
            console.log(`‚ö° CALENDAR CACHE HIT - using cached data for ${cacheKey}`);
            return cachedEntry.data;
        }
        console.log(`üîÑ CALENDAR CACHE MISS - generating fresh data for ${cacheKey}`);
        // üöÄ F√ÅZA 2.2: CONNECTION REUSE - reusovanie connection pre calendar queries
        const client = await this.getReusableConnection();
        try {
            console.log('üöÄ PHASE 2.3 OPTIMIZED: Smart cached calendar data + connection reuse + pre-filtered CTE');
            // üöÄ F√ÅZA 2.1: OPTIMALIZED CTE - 31% r√Ωchlej≈°ie, 94% menej filtrovan√Ωch riadkov
            const result = await client.query(`
        WITH active_rentals AS (
          -- Pre-filter rentals PRED CROSS JOIN (94% redukcia filtrovan√Ωch riadkov)
          SELECT r.*
          FROM rentals r
          WHERE r.start_date <= $2 
          AND r.end_date >= $1
        ),
        active_unavailabilities AS (
          -- Pre-filter unavailabilities PRED CROSS JOIN
          SELECT u.*  
          FROM vehicle_unavailability u
          WHERE u.start_date <= $2
          AND u.end_date >= $1
        ),
        calendar_dates AS (
          SELECT generate_series($1::date, $2::date, '1 day'::interval)::date as date
        ),
        optimized_calendar AS (
          SELECT
            cd.date,
            v.id as vehicle_id,
            v.brand || ' ' || v.model as vehicle_name,
            v.license_plate,
            -- RENTALS JOIN (u≈æ pre-filtrovan√©)
            ar.id as rental_id,
            ar.customer_name,
            ar.is_flexible,
            ar.rental_type,
            CASE
              WHEN ar.id IS NOT NULL THEN
                CASE WHEN ar.is_flexible = true THEN 'flexible' ELSE 'rented' END
              ELSE NULL
            END as rental_status,
            -- UNAVAILABILITIES JOIN (u≈æ pre-filtrovan√©)  
            au.id as unavailability_id,
            au.reason as unavailability_reason,
            au.type as unavailability_type,
            au.priority as unavailability_priority,
            -- FINAL STATUS
            CASE
              WHEN ar.id IS NOT NULL THEN
                CASE WHEN ar.is_flexible = true THEN 'flexible' ELSE 'rented' END
              WHEN au.type IS NOT NULL THEN au.type
              ELSE 'available'
            END as final_status
          FROM calendar_dates cd
          CROSS JOIN vehicles v
          LEFT JOIN active_rentals ar ON (
            ar.vehicle_id = v.id 
            AND cd.date BETWEEN ar.start_date AND ar.end_date
          )
          LEFT JOIN active_unavailabilities au ON (
            au.vehicle_id = v.id
            AND cd.date BETWEEN au.start_date AND au.end_date
          )
        )
        SELECT
          date,
          vehicle_id,
          vehicle_name,
          license_plate,
          final_status as status,
          rental_id,
          customer_name,
          is_flexible,
          rental_type,
          unavailability_id,
          unavailability_reason,
          unavailability_type,
          unavailability_priority
        FROM optimized_calendar
        ORDER BY date, vehicle_id
      `, [startDate, endDate]);
            console.log('‚úÖ UNIFIED QUERY: Retrieved', result.rows.length, 'calendar records');
            // üöÄ F√ÅZA 1.2: P√¥vodn√° logika grupovanie podƒæa d√°tumu (funguje spr√°vne)
            const groupedByDate = result.rows.reduce((acc, row) => {
                const dateStr = row.date.toISOString().split('T')[0];
                if (!acc[dateStr]) {
                    acc[dateStr] = {
                        date: dateStr,
                        vehicles: []
                    };
                }
                acc[dateStr].vehicles.push({
                    vehicleId: row.vehicle_id,
                    vehicleName: row.vehicle_name,
                    licensePlate: row.license_plate,
                    status: row.status,
                    rentalId: row.rental_id,
                    customerName: row.customer_name,
                    isFlexible: row.is_flexible,
                    rentalType: row.rental_type || 'standard',
                    unavailabilityId: row.unavailability_id,
                    unavailabilityReason: row.unavailability_reason,
                    unavailabilityType: row.unavailability_type,
                    unavailabilityPriority: row.unavailability_priority
                });
                return acc;
            }, {});
            // Konvertovanie na array
            const calendarData = Object.values(groupedByDate);
            // üöÄ F√ÅZA 1.2: P√¥vodn√° extrakcia vehicles z SQL result (FUNKƒåN√Å VERZIA)
            const vehicles = [...new Map(result.rows.map((row) => [
                    row.vehicle_id,
                    {
                        id: row.vehicle_id,
                        brand: row.vehicle_name.split(' ')[0],
                        model: row.vehicle_name.split(' ').slice(1).join(' '),
                        licensePlate: row.license_plate,
                        status: 'available' // Default status
                    }
                ])).values()];
            // Extrakcia nedostupnost√≠ pre backward compatibility
            const unavailabilities = result.rows
                .filter((row) => row.unavailability_id)
                .map((row) => ({
                id: row.unavailability_id,
                vehicleId: row.vehicle_id,
                startDate: startDate,
                endDate: endDate,
                reason: row.unavailability_reason,
                type: row.unavailability_type,
                priority: row.unavailability_priority
            }));
            console.log('üéØ PHASE 2.3 OPTIMIZED RESULT:', {
                calendarDays: calendarData.length,
                vehiclesCount: vehicles.length,
                unavailabilitiesCount: unavailabilities.length,
                performanceGain: 'Smart cache + 31% faster CTE'
            });
            const calendarResult = {
                calendar: calendarData,
                vehicles: vehicles, // üöÄ F√ÅZA 1.2: Vehicles z SQL (FUNKƒåN√â)
                rentals: [], // U≈æ s√∫ v kalend√°ri
                unavailabilities: unavailabilities
            };
            // üöÄ F√ÅZA 2.3: SAVE TO CACHE - ulo≈æi≈• fresh data do cache
            this.calendarCache.set(cacheKey, {
                data: calendarResult,
                timestamp: Date.now(),
                dateRange: { start: startDate, end: endDate }
            });
            console.log(`‚úÖ CALENDAR CACHED - saved ${cacheKey} to cache (TTL: 5min)`);
            return calendarResult;
        }
        catch (error) {
            // Pri chybe force release connection
            console.error('‚ùå Calendar query error:', error);
            this.releaseReusableConnection(true);
            throw error;
        }
        // üöÄ F√ÅZA 2.2: Nerelease-uj connection - ponechaj pre reuse
    }
    // Get unavailabilities for specific date range (for calendar)
    async getUnavailabilitiesForDateRange(startDate, endDate) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT vu.*, v.brand, v.model, v.license_plate 
        FROM vehicle_unavailability vu
        LEFT JOIN vehicles v ON vu.vehicle_id = v.id
        WHERE vu.start_date <= $2 AND vu.end_date >= $1
        ORDER BY vu.start_date ASC, v.brand ASC, v.model ASC
      `, [startDate, endDate]);
            return result.rows.map(row => ({
                id: row.id,
                vehicleId: row.vehicle_id,
                vehicle: row.brand ? {
                    brand: row.brand,
                    model: row.model,
                    licensePlate: row.license_plate
                } : undefined,
                startDate: new Date(row.start_date),
                endDate: new Date(row.end_date),
                reason: row.reason,
                type: row.type,
                notes: row.notes,
                priority: row.priority,
                recurring: row.recurring,
                recurringConfig: row.recurring_config ? JSON.parse(row.recurring_config) : undefined,
                createdAt: new Date(row.created_at),
                updatedAt: new Date(row.updated_at),
                createdBy: row.created_by
            }));
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre evidenciu platnosti vozidiel
    async getVehicleDocuments(vehicleId) {
        const client = await this.pool.connect();
        try {
            let query = 'SELECT * FROM vehicle_documents';
            let params = [];
            if (vehicleId) {
                query += ' WHERE vehicle_id = $1';
                params.push(vehicleId);
            }
            query += ' ORDER BY valid_to ASC';
            const result = await client.query(query, params);
            return result.rows.map(row => ({
                id: row.id?.toString() || '',
                vehicleId: row.vehicle_id?.toString() || '',
                documentType: row.document_type,
                validFrom: row.valid_from ? new Date(row.valid_from) : undefined,
                validTo: new Date(row.valid_to),
                documentNumber: row.document_number || undefined,
                price: row.price ? parseFloat(row.price) : undefined,
                notes: row.notes || undefined,
                filePath: row.file_path || undefined,
                createdAt: new Date(row.created_at),
                updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
            }));
        }
        finally {
            client.release();
        }
    }
    async createVehicleDocument(documentData) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`INSERT INTO vehicle_documents (vehicle_id, document_type, valid_from, valid_to, document_number, price, notes, file_path) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
         RETURNING id, vehicle_id, document_type, valid_from, valid_to, document_number, price, notes, file_path, created_at`, [documentData.vehicleId, documentData.documentType, documentData.validFrom, documentData.validTo, documentData.documentNumber, documentData.price, documentData.notes, documentData.filePath || null]);
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                vehicleId: row.vehicle_id,
                documentType: row.document_type,
                validFrom: row.valid_from ? new Date(row.valid_from) : undefined,
                validTo: new Date(row.valid_to),
                documentNumber: row.document_number || undefined,
                price: row.price ? parseFloat(row.price) : undefined,
                notes: row.notes || undefined,
                filePath: row.file_path || undefined,
                createdAt: new Date(row.created_at),
                updatedAt: undefined
            };
        }
        finally {
            client.release();
        }
    }
    async updateVehicleDocument(id, documentData) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`UPDATE vehicle_documents 
         SET vehicle_id = $1, document_type = $2, valid_from = $3, valid_to = $4, document_number = $5, price = $6, notes = $7, file_path = $8, updated_at = CURRENT_TIMESTAMP 
         WHERE id = $9 
         RETURNING id, vehicle_id, document_type, valid_from, valid_to, document_number, price, notes, file_path, created_at, updated_at`, [documentData.vehicleId, documentData.documentType, documentData.validFrom, documentData.validTo, documentData.documentNumber, documentData.price, documentData.notes, documentData.filePath || null, id]);
            if (result.rows.length === 0) {
                throw new Error('Dokument nebol n√°jden√Ω');
            }
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                vehicleId: row.vehicle_id,
                documentType: row.document_type,
                validFrom: row.valid_from ? new Date(row.valid_from) : undefined,
                validTo: new Date(row.valid_to),
                documentNumber: row.document_number || undefined,
                price: row.price ? parseFloat(row.price) : undefined,
                notes: row.notes || undefined,
                filePath: row.file_path || undefined,
                createdAt: new Date(row.created_at),
                updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
            };
        }
        finally {
            client.release();
        }
    }
    async deleteVehicleDocument(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM vehicle_documents WHERE id = $1', [id]);
        }
        finally {
            client.release();
        }
    }
    // Met√≥dy pre poistn√© udalosti
    async getInsuranceClaims(vehicleId) {
        const client = await this.pool.connect();
        try {
            let query = 'SELECT * FROM insurance_claims';
            let params = [];
            if (vehicleId) {
                query += ' WHERE vehicle_id = $1';
                params.push(vehicleId);
            }
            query += ' ORDER BY incident_date DESC';
            const result = await client.query(query, params);
            return result.rows.map(row => ({
                id: row.id?.toString() || '',
                vehicleId: row.vehicle_id?.toString() || '',
                insuranceId: row.insurance_id?.toString() || undefined,
                incidentDate: new Date(row.incident_date),
                reportedDate: new Date(row.reported_date),
                claimNumber: row.claim_number || undefined,
                description: row.description,
                location: row.location || undefined,
                incidentType: row.incident_type,
                estimatedDamage: row.estimated_damage ? parseFloat(row.estimated_damage) : undefined,
                deductible: row.deductible ? parseFloat(row.deductible) : undefined,
                payoutAmount: row.payout_amount ? parseFloat(row.payout_amount) : undefined,
                status: row.status,
                filePaths: row.file_paths || [],
                policeReportNumber: row.police_report_number || undefined,
                otherPartyInfo: row.other_party_info || undefined,
                notes: row.notes || undefined,
                createdAt: new Date(row.created_at),
                updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
            }));
        }
        finally {
            client.release();
        }
    }
    async createInsuranceClaim(claimData) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`INSERT INTO insurance_claims (vehicle_id, insurance_id, incident_date, description, location, incident_type, estimated_damage, deductible, payout_amount, status, claim_number, file_paths, police_report_number, other_party_info, notes) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) 
         RETURNING id, vehicle_id, insurance_id, incident_date, reported_date, claim_number, description, location, incident_type, estimated_damage, deductible, payout_amount, status, file_paths, police_report_number, other_party_info, notes, created_at`, [
                claimData.vehicleId,
                claimData.insuranceId || null,
                claimData.incidentDate,
                claimData.description,
                claimData.location || null,
                claimData.incidentType,
                claimData.estimatedDamage || null,
                claimData.deductible || null,
                claimData.payoutAmount || null,
                claimData.status || 'reported',
                claimData.claimNumber || null,
                claimData.filePaths || [],
                claimData.policeReportNumber || null,
                claimData.otherPartyInfo || null,
                claimData.notes || null
            ]);
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                vehicleId: row.vehicle_id,
                insuranceId: row.insurance_id?.toString() || undefined,
                incidentDate: new Date(row.incident_date),
                reportedDate: new Date(row.reported_date),
                claimNumber: row.claim_number || undefined,
                description: row.description,
                location: row.location || undefined,
                incidentType: row.incident_type,
                estimatedDamage: row.estimated_damage ? parseFloat(row.estimated_damage) : undefined,
                deductible: row.deductible ? parseFloat(row.deductible) : undefined,
                payoutAmount: row.payout_amount ? parseFloat(row.payout_amount) : undefined,
                status: row.status,
                filePaths: row.file_paths || [],
                policeReportNumber: row.police_report_number || undefined,
                otherPartyInfo: row.other_party_info || undefined,
                notes: row.notes || undefined,
                createdAt: new Date(row.created_at),
                updatedAt: undefined
            };
        }
        finally {
            client.release();
        }
    }
    async updateInsuranceClaim(id, claimData) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`UPDATE insurance_claims 
         SET vehicle_id = $1, insurance_id = $2, incident_date = $3, description = $4, location = $5, incident_type = $6, estimated_damage = $7, deductible = $8, payout_amount = $9, status = $10, claim_number = $11, file_paths = $12, police_report_number = $13, other_party_info = $14, notes = $15, updated_at = CURRENT_TIMESTAMP 
         WHERE id = $16 
         RETURNING id, vehicle_id, insurance_id, incident_date, reported_date, claim_number, description, location, incident_type, estimated_damage, deductible, payout_amount, status, file_paths, police_report_number, other_party_info, notes, created_at, updated_at`, [
                claimData.vehicleId,
                claimData.insuranceId || null,
                claimData.incidentDate,
                claimData.description,
                claimData.location || null,
                claimData.incidentType,
                claimData.estimatedDamage || null,
                claimData.deductible || null,
                claimData.payoutAmount || null,
                claimData.status || 'reported',
                claimData.claimNumber || null,
                claimData.filePaths || [],
                claimData.policeReportNumber || null,
                claimData.otherPartyInfo || null,
                claimData.notes || null,
                id
            ]);
            if (result.rows.length === 0) {
                throw new Error('Poistn√° udalos≈• nebola n√°jden√°');
            }
            const row = result.rows[0];
            return {
                id: row.id.toString(),
                vehicleId: row.vehicle_id,
                insuranceId: row.insurance_id?.toString() || undefined,
                incidentDate: new Date(row.incident_date),
                reportedDate: new Date(row.reported_date),
                claimNumber: row.claim_number || undefined,
                description: row.description,
                location: row.location || undefined,
                incidentType: row.incident_type,
                estimatedDamage: row.estimated_damage ? parseFloat(row.estimated_damage) : undefined,
                deductible: row.deductible ? parseFloat(row.deductible) : undefined,
                payoutAmount: row.payout_amount ? parseFloat(row.payout_amount) : undefined,
                status: row.status,
                filePaths: row.file_paths || [],
                policeReportNumber: row.police_report_number || undefined,
                otherPartyInfo: row.other_party_info || undefined,
                notes: row.notes || undefined,
                createdAt: new Date(row.created_at),
                updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
            };
        }
        finally {
            client.release();
        }
    }
    async deleteInsuranceClaim(id) {
        const client = await this.pool.connect();
        try {
            await client.query('DELETE FROM insurance_claims WHERE id = $1', [id]);
        }
        finally {
            client.release();
        }
    }
    // üîß ADMIN UTILITY - Assign vehicles to company
    async assignVehiclesToCompany(vehicleIds, companyId) {
        const client = await this.pool.connect();
        try {
            for (const vehicleId of vehicleIds) {
                await client.query('UPDATE vehicles SET owner_company_id = $1 WHERE id = $2', [companyId, vehicleId]);
            }
        }
        finally {
            client.release();
        }
    }
    // Nov√© met√≥dy pre spr√°vu pr√°v pou≈æ√≠vateƒæov
    async getUserPermissions(userId) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT up.*, c.name as company_name
        FROM user_permissions up
        JOIN companies c ON up.company_id = c.id
        WHERE up.user_id = $1
        ORDER BY c.name
      `, [userId]);
            return result.rows.map(row => ({
                id: row.id,
                userId: row.user_id,
                companyId: row.company_id,
                permissions: row.permissions,
                createdAt: new Date(row.created_at),
                updatedAt: row.updated_at ? new Date(row.updated_at) : undefined
            }));
        }
        finally {
            client.release();
        }
    }
    async getUserCompanyAccess(userId) {
        // ‚ö° CACHE CHECK: Skontroluj cache najprv
        const cacheKey = `permissions:${userId}`;
        const cached = this.permissionCache.get(cacheKey);
        if (cached) {
            const now = Date.now();
            const isValid = (now - cached.timestamp) < this.PERMISSION_CACHE_TTL;
            if (isValid) {
                console.log('‚ö° getUserCompanyAccess CACHE HIT for userId:', userId, '(saved SQL query)');
                return cached.data;
            }
            else {
                // Cache expired, remove it
                this.permissionCache.delete(cacheKey);
                console.log('üïí getUserCompanyAccess cache EXPIRED for userId:', userId);
            }
        }
        // ‚ö° CACHE MISS: Load from database
        const client = await this.pool.connect();
        try {
            console.log('üîç getUserCompanyAccess CACHE MISS - loading from DB for userId:', userId);
            const result = await client.query(`
        SELECT up.company_id, c.name as company_name, up.permissions
        FROM user_permissions up
        JOIN companies c ON up.company_id = c.id
        WHERE up.user_id = $1
        ORDER BY c.name
        `, [userId]);
            const data = result.rows.map(row => ({
                companyId: row.company_id,
                companyName: row.company_name,
                permissions: row.permissions
            }));
            // ‚ö° CACHE STORE: Ulo≈æ do cache
            this.permissionCache.set(cacheKey, {
                data: data,
                timestamp: Date.now()
            });
            console.log('‚ö° getUserCompanyAccess CACHED for userId:', userId, {
                rowCount: result.rows.length,
                companies: result.rows.map(r => ({ companyId: r.company_id, companyName: r.company_name }))
            });
            return data;
        }
        finally {
            client.release();
        }
    }
    async setUserPermission(userId, companyId, permissions) {
        const client = await this.pool.connect();
        try {
            await client.query(`
        INSERT INTO user_permissions (user_id, company_id, permissions)
        VALUES ($1, $2, $3)
        ON CONFLICT (user_id, company_id)
        DO UPDATE SET 
          permissions = $3,
          updated_at = CURRENT_TIMESTAMP
      `, [userId, companyId, JSON.stringify(permissions)]);
            // ‚ö° CACHE INVALIDATION: Vyma≈æ cache pre tohoto pou≈æ√≠vateƒæa
            const cacheKey = `permissions:${userId}`;
            this.permissionCache.delete(cacheKey);
            console.log('üßπ Permission cache INVALIDATED for userId:', userId);
        }
        finally {
            client.release();
        }
    }
    async removeUserPermission(userId, companyId) {
        const client = await this.pool.connect();
        try {
            await client.query(`
        DELETE FROM user_permissions 
        WHERE user_id = $1 AND company_id = $2
      `, [userId, companyId]);
            // ‚ö° CACHE INVALIDATION: Vyma≈æ cache pre tohoto pou≈æ√≠vateƒæa
            this.clearPermissionCache(userId);
        }
        finally {
            client.release();
        }
    }
    async hasPermission(userId, companyId, resource, action) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT permissions->$3->$4 as permission
        FROM user_permissions
        WHERE user_id = $1 AND company_id = $2
      `, [userId, companyId, resource, action]);
            if (result.rows.length === 0)
                return false;
            const permission = result.rows[0].permission;
            return permission === true;
        }
        finally {
            client.release();
        }
    }
    async getUsersWithCompanyAccess(companyId) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT up.user_id, u.username, up.permissions
        FROM user_permissions up
        JOIN users u ON up.user_id = u.id
        WHERE up.company_id = $1
        ORDER BY u.username
      `, [companyId]);
            return result.rows.map(row => ({
                userId: row.user_id,
                username: row.username,
                permissions: row.permissions
            }));
        }
        finally {
            client.release();
        }
    }
    // üóëÔ∏è ADMIN FUNCTIONS
    async resetDatabase() {
        const client = await this.pool.connect();
        try {
            // Vypn√∫≈• foreign key constraints
            await client.query('SET session_replication_role = replica');
            // Zmaza≈• v≈°etky tabuƒæky
            const tables = [
                'settlements',
                'user_permissions',
                'insurance_claims',
                'insurances',
                'expenses',
                'rentals',
                'customers',
                'vehicles',
                'users',
                'companies',
                'insurers'
            ];
            for (const table of tables) {
                await client.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
                console.log(`üóëÔ∏è Dropped table: ${table}`);
            }
            // Zapn√∫≈• foreign key constraints
            await client.query('SET session_replication_role = DEFAULT');
            return tables.length;
        }
        finally {
            client.release();
        }
    }
    // üîÑ COMPANY MAPPING FUNCTIONS
    async getCompanyIdByName(companyName) {
        const client = await this.pool.connect();
        try {
            // 1. Sk√∫s najprv presn√Ω n√°zov
            const exactResult = await client.query('SELECT id FROM companies WHERE name = $1', [companyName]);
            if (exactResult.rows.length > 0) {
                const companyId = exactResult.rows[0].id; // UUID as string, not parseInt
                console.log(`‚úÖ Company found (exact): "${companyName}" ID: ${companyId}`);
                return companyId;
            }
            // 2. Ak nen√°jdem presn√Ω n√°zov, vytvor nov√∫ firmu
            console.log(`‚ö†Ô∏è Company "${companyName}" not found, creating new one...`);
            const insertResult = await client.query('INSERT INTO companies (name) VALUES ($1) RETURNING id', [companyName]);
            const newCompanyId = insertResult.rows[0].id; // UUID as string, not parseInt
            console.log(`‚úÖ Company created: "${companyName}" ID: ${newCompanyId}`);
            return newCompanyId;
        }
        catch (error) {
            console.error(`‚ùå Error getting/creating company "${companyName}":`, error);
            return null;
        }
        finally {
            client.release();
        }
    }
    async getCompanyNameById(companyId) {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT name FROM companies WHERE id = $1', [companyId]);
            return result.rows.length > 0 ? result.rows[0].name : null;
        }
        finally {
            client.release();
        }
    }
    async getAllCompanies() {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT id, name FROM companies ORDER BY name');
            return result.rows.map(row => ({
                id: row.id,
                name: row.name
            }));
        }
        finally {
            client.release();
        }
    }
    // üèóÔ∏è VEHICLE OWNERSHIP HISTORY FUNCTIONS
    // Z√≠skanie aktu√°lneho vlastn√≠ka vozidla
    async getCurrentVehicleOwner(vehicleId) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT owner_company_id, owner_company_name
        FROM vehicle_ownership_history
        WHERE vehicle_id = $1 AND valid_to IS NULL
        ORDER BY valid_from DESC
        LIMIT 1
      `, [vehicleId]);
            if (result.rows.length === 0) {
                return null;
            }
            return {
                ownerCompanyId: result.rows[0].owner_company_id,
                ownerCompanyName: result.rows[0].owner_company_name
            };
        }
        finally {
            client.release();
        }
    }
    // Z√≠skanie vlastn√≠ka vozidla v konkr√©tnom ƒçase
    async getVehicleOwnerAtTime(vehicleId, timestamp) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT owner_company_id, owner_company_name
        FROM vehicle_ownership_history
        WHERE vehicle_id = $1 
          AND valid_from <= $2
          AND (valid_to IS NULL OR valid_to > $2)
        ORDER BY valid_from DESC
        LIMIT 1
      `, [vehicleId, timestamp]);
            if (result.rows.length === 0) {
                return null;
            }
            return {
                ownerCompanyId: result.rows[0].owner_company_id,
                ownerCompanyName: result.rows[0].owner_company_name
            };
        }
        finally {
            client.release();
        }
    }
    // Z√≠skanie hist√≥rie vlastn√≠ctva vozidla
    async getVehicleOwnershipHistory(vehicleId) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT 
          id,
          owner_company_id,
          owner_company_name,
          valid_from,
          valid_to,
          transfer_reason,
          transfer_notes
        FROM vehicle_ownership_history
        WHERE vehicle_id = $1
        ORDER BY valid_from DESC
      `, [vehicleId]);
            return result.rows.map(row => ({
                id: row.id,
                ownerCompanyId: row.owner_company_id,
                ownerCompanyName: row.owner_company_name,
                validFrom: row.valid_from,
                validTo: row.valid_to,
                transferReason: row.transfer_reason,
                transferNotes: row.transfer_notes
            }));
        }
        finally {
            client.release();
        }
    }
    // Transfer vlastn√≠ctva vozidla
    async transferVehicleOwnership(vehicleId, newOwnerCompanyId, transferReason = 'manual_transfer', transferNotes = null, transferDate = new Date()) {
        const client = await this.pool.connect();
        try {
            await client.query('BEGIN');
            // 1. Z√≠skaj n√°zov novej firmy
            const companyResult = await client.query(`
        SELECT name FROM companies WHERE id = $1
      `, [newOwnerCompanyId]);
            if (companyResult.rows.length === 0) {
                throw new Error(`Company with ID ${newOwnerCompanyId} not found`);
            }
            const newOwnerCompanyName = companyResult.rows[0].name;
            // 2. OPRAVA: Skontroluj ƒçi existuje ownership historia pre toto vozidlo
            const existingHistoryResult = await client.query(`
        SELECT COUNT(*) as count FROM vehicle_ownership_history WHERE vehicle_id = $1
      `, [vehicleId]);
            const hasHistory = parseInt(existingHistoryResult.rows[0].count) > 0;
            // 3. OPRAVA: Ak neexistuje historia, vytvor poƒçiatoƒçn√Ω z√°znam pre aktu√°lneho majiteƒæa
            if (!hasHistory) {
                console.log(`üîÑ Creating initial ownership record for vehicle ${vehicleId}`);
                // Z√≠skaj aktu√°lneho majiteƒæa z vehicles tabuƒæky
                const vehicleResult = await client.query(`
          SELECT owner_company_id, company, created_at FROM vehicles WHERE id = $1
        `, [vehicleId]);
                if (vehicleResult.rows.length === 0) {
                    throw new Error(`Vehicle with ID ${vehicleId} not found`);
                }
                const currentOwner = vehicleResult.rows[0];
                const currentOwnerCompanyId = currentOwner.owner_company_id;
                const currentOwnerCompanyName = currentOwner.company;
                // OPRAVA: Pou≈æij veƒæmi star√Ω d√°tum pre initial ownership, nie created_at
                const vehicleCreatedAt = new Date('2024-01-01'); // Safe past date for initial ownership
                // Vytvor poƒçiatoƒçn√Ω ownership z√°znam pre s√∫ƒçasn√©ho majiteƒæa
                await client.query(`
          INSERT INTO vehicle_ownership_history (
            vehicle_id, 
            owner_company_id, 
            owner_company_name,
            valid_from, 
            transfer_reason, 
            transfer_notes
          ) VALUES ($1, $2, $3, $4, $5, $6)
        `, [vehicleId, currentOwnerCompanyId, currentOwnerCompanyName, vehicleCreatedAt, 'initial_setup', 'Initial ownership record created during transfer']);
                console.log(`‚úÖ Created initial ownership record for ${currentOwnerCompanyName} from ${vehicleCreatedAt.toISOString()}`);
            }
            // 4. Ukonƒç√≠ s√∫ƒçasn√© vlastn√≠ctvo (teraz urƒçite existuje z√°znam)
            const updateResult = await client.query(`
        UPDATE vehicle_ownership_history 
        SET valid_to = $1, updated_at = CURRENT_TIMESTAMP
        WHERE vehicle_id = $2 AND valid_to IS NULL
      `, [transferDate, vehicleId]);
            console.log(`üîÑ Ended current ownership for vehicle ${vehicleId}, affected rows: ${updateResult.rowCount}`);
            // 5. Vytvor nov√Ω ownership z√°znam
            await client.query(`
        INSERT INTO vehicle_ownership_history (
          vehicle_id, 
          owner_company_id, 
          owner_company_name,
          valid_from, 
          transfer_reason, 
          transfer_notes
        ) VALUES ($1, $2, $3, $4, $5, $6)
      `, [vehicleId, newOwnerCompanyId, newOwnerCompanyName, transferDate, transferReason, transferNotes]);
            console.log(`‚úÖ Created new ownership record for ${newOwnerCompanyName} from ${transferDate.toISOString()}`);
            // 6. Aktualizuj vehicles tabuƒæku pre s√∫ƒçasn√Ω stav (oba stƒ∫pce!)
            await client.query(`
        UPDATE vehicles 
        SET owner_company_id = $1, company = $2, updated_at = CURRENT_TIMESTAMP
        WHERE id = $3
      `, [newOwnerCompanyId, newOwnerCompanyName, vehicleId]);
            await client.query('COMMIT');
            return true;
        }
        catch (error) {
            await client.query('ROLLBACK');
            console.error('Transfer ownership error:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // Z√≠skanie vozidiel firmy v konkr√©tnom ƒçase
    async getCompanyVehiclesAtTime(companyId, timestamp) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT DISTINCT v.*
        FROM vehicles v
        JOIN vehicle_ownership_history voh ON v.id = voh.vehicle_id
        WHERE voh.owner_company_id = $1
          AND voh.valid_from <= $2
          AND (voh.valid_to IS NULL OR voh.valid_to > $2)
        ORDER BY v.brand, v.model, v.license_plate
      `, [companyId, timestamp]);
            return result.rows.map(row => ({
                id: row.id,
                brand: row.brand,
                model: row.model,
                year: row.year,
                licensePlate: row.license_plate,
                company: row.company,
                ownerCompanyId: row.owner_company_id?.toString(),
                pricing: row.pricing,
                commission: row.commission,
                status: row.status,
                stk: row.stk,
                createdAt: row.created_at,
                updatedAt: row.updated_at
            }));
        }
        finally {
            client.release();
        }
    }
    // ====================================
    // üõ°Ô∏è RENTAL DATA PROTECTION SYSTEM üõ°Ô∏è
    // ====================================
    // Ochrana Level 1: Valid√°cia pred UPDATE
    async validateRentalUpdate(id, newData) {
        const errors = [];
        // Skontroluj ƒçi pren√°jom existuje
        const existing = await this.getRental(id);
        if (!existing) {
            errors.push(`Rental ${id} does not exist`);
            return { valid: false, errors };
        }
        // Ochrana critical fields
        const criticalFields = ['customerName', 'startDate', 'endDate'];
        for (const field of criticalFields) {
            if (field in newData && !newData[field]) {
                errors.push(`Critical field ${field} cannot be empty`);
            }
        }
        // Valid√°cia d√°tumov
        if (newData.startDate && newData.endDate) {
            if (new Date(newData.startDate) >= new Date(newData.endDate)) {
                errors.push('Start date must be before end date');
            }
        }
        // Log ka≈æd√Ω update pokus
        console.log(`üõ°Ô∏è RENTAL UPDATE VALIDATION: ${id}`, {
            existingCustomer: existing.customerName,
            newCustomer: newData.customerName,
            vehicleId: newData.vehicleId,
            validationErrors: errors.length
        });
        return { valid: errors.length === 0, errors };
    }
    // Ochrana Level 2: Backup before UPDATE
    async createRentalBackup(id) {
        const client = await this.pool.connect();
        try {
            // Create backup table if not exists
            await client.query(`
        CREATE TABLE IF NOT EXISTS rental_backups (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          original_rental_id UUID NOT NULL,
          backup_data JSONB NOT NULL,
          backup_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          backup_reason VARCHAR(100) DEFAULT 'pre_update'
        )
      `);
            // Get current rental data
            const rental = await this.getRental(id);
            if (rental) {
                await client.query(`
          INSERT INTO rental_backups (original_rental_id, backup_data, backup_reason)
          VALUES ($1, $2, $3)
        `, [id, JSON.stringify(rental), 'pre_update']);
                console.log(`‚úÖ RENTAL BACKUP created for ${id}`);
            }
        }
        catch (error) {
            console.error(`‚ùå RENTAL BACKUP failed for ${id}:`, error);
        }
        finally {
            client.release();
        }
    }
    // üõ°Ô∏è OCHRANA LEVEL 7: Recovery function pre obnovenie d√°t
    async recoverRentalFromBackup(rentalId, backupId) {
        const client = await this.pool.connect();
        try {
            // N√°jdi najnov≈°√≠ backup alebo konkr√©tny backup
            const backupQuery = backupId
                ? 'SELECT * FROM rental_backups WHERE id = $1'
                : 'SELECT * FROM rental_backups WHERE original_rental_id = $1 ORDER BY backup_timestamp DESC LIMIT 1';
            const backupResult = await client.query(backupQuery, [backupId || rentalId]);
            if (backupResult.rows.length === 0) {
                console.error(`‚ùå No backup found for rental ${rentalId}`);
                return null;
            }
            const backup = backupResult.rows[0];
            const rentalData = backup.backup_data;
            console.log(`üîÑ RECOVERING RENTAL: ${rentalId} from backup ${backup.id}`);
            console.log(`   Backup timestamp: ${backup.backup_timestamp}`);
            console.log(`   Customer: ${rentalData.customerName}`);
            // Restore rental from backup
            await this.updateRental(rentalData);
            console.log(`‚úÖ RENTAL RECOVERED: ${rentalId}`);
            return rentalData;
        }
        catch (error) {
            console.error(`‚ùå RENTAL RECOVERY FAILED for ${rentalId}:`, error);
            throw error;
        }
        finally {
            client.release();
        }
    }
    // üõ°Ô∏è OCHRANA LEVEL 8: Monitoring rental integrity  
    async checkRentalIntegrity() {
        const client = await this.pool.connect();
        try {
            const issues = [];
            // Count total rentals
            const totalResult = await client.query('SELECT COUNT(*) as count FROM rentals');
            const totalRentals = parseInt(totalResult.rows[0].count);
            // Count rentals with missing vehicles
            const missingVehiclesResult = await client.query(`
        SELECT COUNT(*) as count FROM rentals r 
        WHERE r.vehicle_id IS NOT NULL 
        AND r.vehicle_id NOT IN (SELECT id FROM vehicles)
      `);
            const missingVehicles = parseInt(missingVehiclesResult.rows[0].count);
            // Count rentals with missing customers (using customer_name since customer_id doesn't exist)
            const missingCustomersResult = await client.query(`
        SELECT COUNT(*) as count FROM rentals r
        WHERE r.customer_name IS NULL OR r.customer_name = ''
      `);
            const missingCustomers = parseInt(missingCustomersResult.rows[0].count);
            // Count rentals with invalid dates
            const invalidDatesResult = await client.query(`
        SELECT COUNT(*) as count FROM rentals 
        WHERE start_date >= end_date OR start_date IS NULL OR end_date IS NULL
      `);
            const invalidDates = parseInt(invalidDatesResult.rows[0].count);
            // Count available backups
            const backupsResult = await client.query('SELECT COUNT(*) as count FROM rental_backups');
            const backupsAvailable = parseInt(backupsResult.rows[0].count);
            // Identify issues
            if (missingVehicles > 0)
                issues.push(`${missingVehicles} rentals have invalid vehicle_id`);
            if (missingCustomers > 0)
                issues.push(`${missingCustomers} rentals have invalid customer_id`);
            if (invalidDates > 0)
                issues.push(`${invalidDates} rentals have invalid dates`);
            const report = {
                totalRentals,
                missingVehicles,
                missingCustomers,
                invalidDates,
                backupsAvailable,
                issues
            };
            console.log('üõ°Ô∏è RENTAL INTEGRITY CHECK:', report);
            return report;
        }
        finally {
            client.release();
        }
    }
    // Z√≠skanie majiteƒæa vozidla k urƒçit√©mu d√°tumu
    async getVehicleOwnerAtDate(vehicleId, date) {
        const client = await this.pool.connect();
        try {
            const result = await client.query(`
        SELECT 
          owner_company_id,
          owner_company_name
        FROM vehicle_ownership_history
        WHERE vehicle_id = $1
          AND valid_from <= $2
          AND (valid_to IS NULL OR valid_to > $2)
        ORDER BY valid_from DESC
        LIMIT 1
      `, [vehicleId, date]);
            if (result.rows.length === 0) {
                return null;
            }
            const row = result.rows[0];
            return {
                ownerCompanyId: row.owner_company_id,
                ownerCompanyName: row.owner_company_name
            };
        }
        finally {
            client.release();
        }
    }
    // üìù √öprava transferu vlastn√≠ctva
    async updateVehicleOwnershipHistory(historyId, updates) {
        const client = await this.pool.connect();
        try {
            // Najprv z√≠skaj inform√°cie o firme
            const companyResult = await client.query('SELECT name FROM companies WHERE id = $1', [updates.ownerCompanyId]);
            if (companyResult.rows.length === 0) {
                throw new Error(`Company with ID ${updates.ownerCompanyId} not found`);
            }
            const companyName = companyResult.rows[0].name;
            // Aktualizuj ownership history
            const result = await client.query(`
        UPDATE vehicle_ownership_history 
        SET 
          owner_company_id = $1,
          owner_company_name = $2,
          transfer_reason = $3,
          transfer_notes = $4,
          valid_from = $5,
          updated_at = CURRENT_TIMESTAMP
        WHERE id = $6
      `, [
                updates.ownerCompanyId,
                companyName,
                updates.transferReason,
                updates.transferNotes || null,
                updates.validFrom,
                historyId
            ]);
            if (result.rowCount === 0) {
                throw new Error(`Ownership history record ${historyId} not found`);
            }
            console.log(`‚úÖ Updated ownership history ${historyId}`);
        }
        finally {
            client.release();
        }
    }
    // üîç Overenie existencie ownership history z√°znamu
    async checkOwnershipHistoryExists(historyId) {
        const client = await this.pool.connect();
        try {
            const result = await client.query('SELECT 1 FROM vehicle_ownership_history WHERE id = $1', [historyId]);
            return result.rows.length > 0;
        }
        finally {
            client.release();
        }
    }
    // üóëÔ∏è Vymazanie transferu vlastn√≠ctva
    async deleteVehicleOwnershipHistory(historyId) {
        const client = await this.pool.connect();
        try {
            const result = await client.query('DELETE FROM vehicle_ownership_history WHERE id = $1', [historyId]);
            if (result.rowCount === 0) {
                throw new Error(`Ownership history record ${historyId} not found`);
            }
            console.log(`‚úÖ Deleted ownership history ${historyId}`);
        }
        finally {
            client.release();
        }
    }
    // ‚ö° BULK OWNERSHIP CHECKING - pre r√Ωchle filtrovanie rentals/settlements
    async getBulkVehicleOwnersAtTime(vehicleTimeChecks) {
        const client = await this.pool.connect();
        try {
            console.log(`üöÄ BULK: Checking ownership for ${vehicleTimeChecks.length} vehicle-time pairs...`);
            const startTime = Date.now();
            // Build complex query for all checks at once
            const queries = vehicleTimeChecks.map((check, index) => `
        (
          SELECT 
            '${check.vehicleId}' as vehicle_id,
            '${check.timestamp.toISOString()}' as check_timestamp,
            owner_company_id,
            owner_company_name
          FROM vehicle_ownership_history
          WHERE vehicle_id = $${index * 2 + 1}
            AND valid_from <= $${index * 2 + 2}
            AND (valid_to IS NULL OR valid_to > $${index * 2 + 2})
          ORDER BY valid_from DESC
          LIMIT 1
        )`).join(' UNION ALL ');
            // Flatten parameters
            const params = vehicleTimeChecks.flatMap(check => [check.vehicleId, check.timestamp]);
            const result = await client.query(queries, params);
            // Process results back to original format
            const ownershipMap = new Map();
            result.rows.forEach(row => {
                const key = `${row.vehicle_id}-${row.check_timestamp}`;
                ownershipMap.set(key, {
                    ownerCompanyId: row.owner_company_id,
                    ownerCompanyName: row.owner_company_name
                });
            });
            const results = vehicleTimeChecks.map(check => {
                const key = `${check.vehicleId}-${check.timestamp.toISOString()}`;
                return {
                    vehicleId: check.vehicleId,
                    timestamp: check.timestamp,
                    owner: ownershipMap.get(key) || null
                };
            });
            const loadTime = Date.now() - startTime;
            console.log(`‚úÖ BULK: Checked ${vehicleTimeChecks.length} ownership records in ${loadTime}ms`);
            return results;
        }
        finally {
            client.release();
        }
    }
    // ‚ö° BULK CURRENT OWNERSHIP - pre r√Ωchle z√≠skanie s√∫ƒçasn√Ωch vlastn√≠kov
    async getBulkCurrentVehicleOwners(vehicleIds) {
        const client = await this.pool.connect();
        try {
            console.log(`üöÄ BULK: Getting current owners for ${vehicleIds.length} vehicles...`);
            const startTime = Date.now();
            if (vehicleIds.length === 0)
                return [];
            // Single query to get all current owners
            const result = await client.query(`
        SELECT DISTINCT ON (vehicle_id) 
          vehicle_id,
          owner_company_id,
          owner_company_name
        FROM vehicle_ownership_history
        WHERE vehicle_id = ANY($1)
          AND valid_to IS NULL
        ORDER BY vehicle_id, valid_from DESC
      `, [vehicleIds]);
            // Map results
            const ownershipMap = new Map();
            result.rows.forEach(row => {
                ownershipMap.set(row.vehicle_id, {
                    ownerCompanyId: row.owner_company_id,
                    ownerCompanyName: row.owner_company_name
                });
            });
            const results = vehicleIds.map(vehicleId => ({
                vehicleId,
                owner: ownershipMap.get(vehicleId) || null
            }));
            const loadTime = Date.now() - startTime;
            console.log(`‚úÖ BULK: Got current owners for ${vehicleIds.length} vehicles in ${loadTime}ms`);
            return results;
        }
        finally {
            client.release();
        }
    }
    // ‚ö° CACHE HELPER METHODS
    clearPermissionCache(userId) {
        const cacheKey = `permissions:${userId}`;
        this.permissionCache.delete(cacheKey);
        console.log('üßπ Permission cache CLEARED for userId:', userId);
    }
    clearAllPermissionCache() {
        this.permissionCache.clear();
        console.log('üßπ ALL permission cache CLEARED');
    }
    // ‚ö° BULK PROTOCOL STATUS - Z√≠ska protocol status pre v≈°etky rentals naraz
    async getBulkProtocolStatus() {
        const client = await this.pool.connect();
        try {
            console.log('üöÄ BULK: Loading protocol status for all rentals...');
            const startTime = Date.now();
            // Ensure protocol tables exist
            await this.initProtocolTables();
            // Direct query using protocol IDs from rentals table (more efficient)
            const result = await client.query(`
        SELECT 
          r.id as rental_id,
          r.handover_protocol_id,
          r.return_protocol_id,
          hp.created_at as handover_created_at,
          rp.created_at as return_created_at
        FROM rentals r
        LEFT JOIN handover_protocols hp ON r.handover_protocol_id = hp.id
        LEFT JOIN return_protocols rp ON r.return_protocol_id = rp.id
        ORDER BY r.created_at DESC
      `);
            const protocolStatus = result.rows.map(row => ({
                rentalId: row.rental_id,
                hasHandoverProtocol: !!row.handover_protocol_id,
                hasReturnProtocol: !!row.return_protocol_id,
                handoverProtocolId: row.handover_protocol_id || undefined,
                returnProtocolId: row.return_protocol_id || undefined,
                handoverCreatedAt: row.handover_created_at ? new Date(row.handover_created_at) : undefined,
                returnCreatedAt: row.return_created_at ? new Date(row.return_created_at) : undefined
            }));
            const loadTime = Date.now() - startTime;
            console.log(`‚úÖ BULK: Protocol status loaded for ${protocolStatus.length} rentals in ${loadTime}ms`);
            return protocolStatus;
        }
        catch (error) {
            console.error('‚ùå Error fetching bulk protocol status:', error);
            throw error;
        }
        finally {
            client.release();
        }
    }
}
exports.PostgresDatabase = PostgresDatabase;
exports.postgresDatabase = new PostgresDatabase();
//# sourceMappingURL=postgres-database.js.map