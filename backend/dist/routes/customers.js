"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const postgres_database_1 = require("../models/postgres-database");
const auth_1 = require("../middleware/auth");
const permissions_1 = require("../middleware/permissions");
const cache_middleware_1 = require("../middleware/cache-middleware");
const router = (0, express_1.Router)();
// GET /api/customers - Z√≠skanie v≈°etk√Ωch z√°kazn√≠kov s cache
router.get('/', auth_1.authenticateToken, (0, cache_middleware_1.cacheResponse)('customers', {
    cacheKey: cache_middleware_1.userSpecificCache,
    ttl: 5 * 60 * 1000, // 5 minutes
    tags: ['customers']
}), async (req, res) => {
    try {
        let customers = await postgres_database_1.postgresDatabase.getCustomers();
        console.log('üë• Customers GET - user:', {
            role: req.user?.role,
            userId: req.user?.id,
            totalCustomers: customers.length
        });
        // üîê NON-ADMIN USERS - filter podƒæa company permissions
        if (req.user?.role !== 'admin' && req.user) {
            const user = req.user; // TypeScript safe assignment
            const originalCount = customers.length;
            // Z√≠skaj company access pre pou≈æ√≠vateƒæa
            const userCompanyAccess = await postgres_database_1.postgresDatabase.getUserCompanyAccess(user.id);
            const allowedCompanyIds = userCompanyAccess.map(access => access.companyId);
            // Z√≠skaj v≈°etky rentals a vehicles pre mapping
            const rentals = await postgres_database_1.postgresDatabase.getRentals();
            const vehicles = await postgres_database_1.postgresDatabase.getVehicles();
            // Filter z√°kazn√≠kov len t√Ωch, ktor√≠ mali prenajat√© vozidl√° z povolen√Ωch firiem
            const allowedCustomerIds = new Set();
            rentals.forEach(rental => {
                if (!rental.customerId || !rental.vehicleId)
                    return;
                const vehicle = vehicles.find(v => v.id === rental.vehicleId);
                if (!vehicle || !vehicle.ownerCompanyId)
                    return;
                if (allowedCompanyIds.includes(vehicle.ownerCompanyId)) {
                    allowedCustomerIds.add(rental.customerId);
                }
            });
            customers = customers.filter(c => allowedCustomerIds.has(c.id));
            console.log('üîê Customers Company Permission Filter:', {
                userId: user.id,
                allowedCompanyIds,
                originalCount,
                filteredCount: customers.length,
                allowedCustomerIds: Array.from(allowedCustomerIds)
            });
        }
        res.json({
            success: true,
            data: customers
        });
    }
    catch (error) {
        console.error('Get customers error:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri z√≠skavan√≠ z√°kazn√≠kov'
        });
    }
});
// POST /api/customers - Vytvorenie nov√©ho z√°kazn√≠ka
router.post('/', auth_1.authenticateToken, (0, permissions_1.checkPermission)('customers', 'create'), (0, cache_middleware_1.invalidateCache)('customer'), async (req, res) => {
    try {
        console.log('üéØ Customer creation started with data:', req.body);
        const { name, email, phone } = req.body;
        if (!name || typeof name !== 'string' || name.trim() === '') {
            console.log('‚ùå Customer validation failed - missing or invalid name:', name);
            return res.status(400).json({
                success: false,
                error: 'Meno z√°kazn√≠ka je povinn√© a mus√≠ by≈• vyplnen√©'
            });
        }
        console.log('‚úÖ Customer validation passed, creating customer...');
        console.log('üìù Customer data:', {
            name: name.trim(),
            email: email || null,
            phone: phone || null
        });
        const createdCustomer = await postgres_database_1.postgresDatabase.createCustomer({
            name: name.trim(),
            email: email || null,
            phone: phone || null
        });
        console.log('üéâ Customer created successfully:', createdCustomer.id);
        res.status(201).json({
            success: true,
            message: 'Z√°kazn√≠k √∫spe≈°ne vytvoren√Ω',
            data: createdCustomer
        });
    }
    catch (error) {
        console.error('‚ùå DETAILED Create customer error:');
        console.error('   Error name:', error.name);
        console.error('   Error message:', error.message);
        console.error('   Error code:', error.code);
        console.error('   Error detail:', error.detail);
        console.error('   Error stack:', error.stack);
        console.error('   Full error object:', error);
        res.status(500).json({
            success: false,
            error: `Chyba pri vytv√°ran√≠ z√°kazn√≠ka: ${error.message || 'Nezn√°ma chyba'}`
        });
    }
});
// PUT /api/customers/:id - Aktualiz√°cia z√°kazn√≠ka
router.put('/:id', auth_1.authenticateToken, (0, permissions_1.checkPermission)('customers', 'update'), (0, cache_middleware_1.invalidateCache)('customer'), async (req, res) => {
    try {
        const { id } = req.params;
        const { name, email, phone } = req.body;
        if (!name) {
            return res.status(400).json({
                success: false,
                error: 'Meno z√°kazn√≠ka je povinn√©'
            });
        }
        const updatedCustomer = {
            id,
            name,
            email: email || '',
            phone: phone || '',
            createdAt: new Date()
        };
        await postgres_database_1.postgresDatabase.updateCustomer(updatedCustomer);
        res.json({
            success: true,
            message: 'Z√°kazn√≠k √∫spe≈°ne aktualizovan√Ω',
            data: updatedCustomer
        });
    }
    catch (error) {
        console.error('Update customer error:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri aktualiz√°cii z√°kazn√≠ka'
        });
    }
});
// DELETE /api/customers/:id - Vymazanie z√°kazn√≠ka
router.delete('/:id', auth_1.authenticateToken, (0, permissions_1.checkPermission)('customers', 'delete'), (0, cache_middleware_1.invalidateCache)('customer'), async (req, res) => {
    try {
        const { id } = req.params;
        await postgres_database_1.postgresDatabase.deleteCustomer(id);
        res.json({
            success: true,
            message: 'Z√°kazn√≠k √∫spe≈°ne vymazan√Ω'
        });
    }
    catch (error) {
        console.error('Delete customer error:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri vymaz√°van√≠ z√°kazn√≠ka'
        });
    }
});
// üìä CSV EXPORT - Export z√°kazn√≠kov do CSV
router.get('/export/csv', auth_1.authenticateToken, async (req, res) => {
    try {
        let customers = await postgres_database_1.postgresDatabase.getCustomers();
        // üîê NON-ADMIN USERS - filter podƒæa company permissions
        if (req.user?.role !== 'admin' && req.user) {
            const userCompanyAccess = await postgres_database_1.postgresDatabase.getUserCompanyAccess(req.user.id);
            const allowedCompanyIds = userCompanyAccess.map(access => access.companyId);
            const rentals = await postgres_database_1.postgresDatabase.getRentals();
            const vehicles = await postgres_database_1.postgresDatabase.getVehicles();
            const allowedCustomerIds = new Set();
            rentals.forEach(rental => {
                if (!rental.customerId || !rental.vehicleId)
                    return;
                const vehicle = vehicles.find(v => v.id === rental.vehicleId);
                if (!vehicle || !vehicle.ownerCompanyId)
                    return;
                if (allowedCompanyIds.includes(vehicle.ownerCompanyId)) {
                    allowedCustomerIds.add(rental.customerId);
                }
            });
            customers = customers.filter(c => allowedCustomerIds.has(c.id));
        }
        // Vytvor CSV hlaviƒçky
        const csvHeaders = [
            'ID',
            'Meno',
            'Email',
            'Telef√≥n',
            'Vytvoren√©'
        ];
        // Konvertuj z√°kazn√≠kov na CSV riadky
        const csvRows = customers.map(customer => [
            customer.id,
            customer.name,
            customer.email || '',
            customer.phone || '',
            customer.createdAt ? customer.createdAt.toISOString().split('T')[0] : ''
        ]);
        // Vytvor CSV obsah
        const csvContent = [csvHeaders, ...csvRows]
            .map(row => row.map(field => `"${field}"`).join(','))
            .join('\n');
        // Nastav response headers pre CSV download
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="zakaznici-${new Date().toISOString().split('T')[0]}.csv"`);
        res.setHeader('Cache-Control', 'no-cache');
        // Pridaj BOM pre spr√°vne zobrazenie diakritiky v Exceli
        res.send('\ufeff' + csvContent);
        console.log(`üìä CSV Export: ${customers.length} z√°kazn√≠kov exportovan√Ωch pre pou≈æ√≠vateƒæa ${req.user?.username}`);
    }
    catch (error) {
        console.error('CSV export error:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri exporte CSV'
        });
    }
});
// üì• CSV IMPORT - Import z√°kazn√≠kov z CSV
router.post('/import/csv', auth_1.authenticateToken, (0, permissions_1.checkPermission)('customers', 'create'), async (req, res) => {
    try {
        const { csvData } = req.body;
        if (!csvData || typeof csvData !== 'string') {
            return res.status(400).json({
                success: false,
                error: 'CSV d√°ta s√∫ povinn√©'
            });
        }
        // Parsuj CSV
        const lines = csvData.trim().split('\n');
        if (lines.length < 2) {
            return res.status(400).json({
                success: false,
                error: 'CSV mus√≠ obsahova≈• aspo≈à hlaviƒçku a jeden riadok d√°t'
            });
        }
        // Preskoƒç√≠me hlaviƒçku
        const dataLines = lines.slice(1);
        const results = [];
        const errors = [];
        for (let i = 0; i < dataLines.length; i++) {
            try {
                const line = dataLines[i].trim();
                if (!line)
                    continue;
                // Parsuj CSV riadok
                const fields = line.split(',').map(field => field.replace(/^"|"$/g, '').trim());
                if (fields.length < 2) {
                    errors.push({ row: i + 2, error: 'Nedostatok stƒ∫pcov' });
                    continue;
                }
                const [, name, email, phone] = fields;
                if (!name) {
                    errors.push({ row: i + 2, error: 'Meno z√°kazn√≠ka je povinn√©' });
                    continue;
                }
                // Vytvor z√°kazn√≠ka
                const customerData = {
                    name: name.trim(),
                    email: email?.trim() || '',
                    phone: phone?.trim() || ''
                };
                const createdCustomer = await postgres_database_1.postgresDatabase.createCustomer(customerData);
                results.push({ row: i + 2, customer: createdCustomer });
            }
            catch (error) {
                errors.push({
                    row: i + 2,
                    error: error.message || 'Chyba pri vytv√°ran√≠ z√°kazn√≠ka'
                });
            }
        }
        res.json({
            success: true,
            message: `CSV import dokonƒçen√Ω: ${results.length} √∫spe≈°n√Ωch, ${errors.length} ch√Ωb`,
            data: {
                imported: results.length,
                errorsCount: errors.length,
                results,
                errors: errors.slice(0, 10) // Limit na prv√Ωch 10 ch√Ωb
            }
        });
        console.log(`üì• CSV Import: ${results.length} z√°kazn√≠kov importovan√Ωch, ${errors.length} ch√Ωb`);
    }
    catch (error) {
        console.error('CSV import error:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri importe CSV'
        });
    }
});
// üöÄ GMAIL APPROACH: GET /api/customers/paginated - R√Ωchle vyhƒæad√°vanie z√°kazn√≠kov
router.get('/paginated', auth_1.authenticateToken, async (req, res) => {
    try {
        const { page = 1, limit = 50, search = '', city = 'all', country = 'all', hasRentals = 'all' } = req.query;
        console.log('üë• Customers PAGINATED GET - params:', {
            page, limit, search, city, country, hasRentals,
            role: req.user?.role,
            userId: req.user?.id
        });
        const pageNum = parseInt(page);
        const limitNum = parseInt(limit);
        const offset = (pageNum - 1) * limitNum;
        // Z√≠skaj paginated customers s filtrami
        const result = await postgres_database_1.postgresDatabase.getCustomersPaginated({
            limit: limitNum,
            offset,
            search: search,
            city: city,
            country: country,
            hasRentals: hasRentals,
            userId: req.user?.id,
            userRole: req.user?.role
        });
        console.log(`üìä Found ${result.customers.length}/${result.total} customers (page ${pageNum})`);
        res.json({
            success: true,
            data: {
                customers: result.customers,
                pagination: {
                    currentPage: pageNum,
                    totalPages: Math.ceil(result.total / limitNum),
                    totalItems: result.total,
                    hasMore: (pageNum * limitNum) < result.total,
                    itemsPerPage: limitNum
                }
            }
        });
    }
    catch (error) {
        console.error('Get paginated customers error:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri z√≠skavan√≠ z√°kazn√≠kov'
        });
    }
});
exports.default = router;
//# sourceMappingURL=customers.js.map