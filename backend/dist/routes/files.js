"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const multer_1 = __importDefault(require("multer"));
const r2_storage_js_1 = require("../utils/r2-storage.js");
const router = express_1.default.Router();
// Multer konfigur√°cia pre upload s√∫borov
const upload = (0, multer_1.default)({
    storage: multer_1.default.memoryStorage(),
    limits: {
        fileSize: 50 * 1024 * 1024, // 50MB max
    },
    fileFilter: (req, file, cb) => {
        if (r2_storage_js_1.r2Storage.validateFileType(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error('Nepodporovan√Ω typ s√∫boru'));
        }
    },
});
// Upload s√∫boru do R2
router.post('/upload', upload.single('file'), async (req, res) => {
    try {
        console.log('üîÑ Upload request received:', {
            hasFile: !!req.file,
            fileSize: req.file?.size,
            mimetype: req.file?.mimetype,
            type: req.body.type,
            entityId: req.body.entityId
        });
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: '≈Ωiadny s√∫bor nebol nahran√Ω'
            });
        }
        const { type, entityId } = req.body;
        if (!type || !entityId) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωba type alebo entityId'
            });
        }
        console.log('üîç Validating file...');
        // Valid√°cia typu s√∫boru
        if (!r2_storage_js_1.r2Storage.validateFileType(req.file.mimetype)) {
            console.log('‚ùå Invalid file type:', req.file.mimetype);
            return res.status(400).json({
                success: false,
                error: 'Nepodporovan√Ω typ s√∫boru'
            });
        }
        // Valid√°cia veƒækosti s√∫boru
        const fileType = req.file.mimetype.startsWith('image/') ? 'image' : 'document';
        if (!r2_storage_js_1.r2Storage.validateFileSize(req.file.size, fileType)) {
            console.log('‚ùå File too large:', req.file.size);
            return res.status(400).json({
                success: false,
                error: 'S√∫bor je pr√≠li≈° veƒæk√Ω'
            });
        }
        console.log('üîç Generating file key...');
        // Generovanie file key
        const fileKey = r2_storage_js_1.r2Storage.generateFileKey(type, entityId, req.file.originalname);
        console.log('üîç File key generated:', fileKey);
        // Kontrola R2 konfigur√°cie
        if (!r2_storage_js_1.r2Storage.isConfigured()) {
            console.log('‚ùå R2 not configured');
            return res.status(500).json({
                success: false,
                error: 'R2 Storage nie je nakonfigurovan√©'
            });
        }
        console.log('üîç Uploading to R2...');
        // Upload do R2
        const url = await r2_storage_js_1.r2Storage.uploadFile(fileKey, req.file.buffer, req.file.mimetype, {
            original_name: req.file.originalname,
            uploaded_at: new Date().toISOString(),
            entity_id: entityId,
            file_type: type
        });
        console.log('‚úÖ File uploaded to R2:', url);
        res.json({
            success: true,
            url: url,
            key: fileKey,
            filename: req.file.originalname,
            size: req.file.size,
            mimetype: req.file.mimetype
        });
    }
    catch (error) {
        console.error('‚ùå Error uploading file:', error);
        // Detailnej≈°ie error logging
        if (error instanceof Error) {
            console.error('Error details:', {
                message: error.message,
                stack: error.stack,
                name: error.name
            });
        }
        res.status(500).json({
            success: false,
            error: 'Chyba pri nahr√°van√≠ s√∫boru',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});
// Vytvorenie presigned URL pre direct upload
router.post('/presigned-url', async (req, res) => {
    try {
        const { type, entityId, filename, contentType } = req.body;
        if (!type || !entityId || !filename || !contentType) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωbaj√∫ povinn√© parametre'
            });
        }
        // Valid√°cia typu s√∫boru
        if (!r2_storage_js_1.r2Storage.validateFileType(contentType)) {
            return res.status(400).json({
                success: false,
                error: 'Nepodporovan√Ω typ s√∫boru'
            });
        }
        // Generovanie file key
        const fileKey = r2_storage_js_1.r2Storage.generateFileKey(type, entityId, filename);
        // Vytvorenie presigned URL
        const presignedUrl = await r2_storage_js_1.r2Storage.createPresignedUploadUrl(fileKey, contentType, 3600 // 1 hodina
        );
        res.json({
            success: true,
            presignedUrl: presignedUrl,
            key: fileKey,
            publicUrl: r2_storage_js_1.r2Storage.getPublicUrl(fileKey)
        });
    }
    catch (error) {
        console.error('‚ùå Error creating presigned URL:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri vytv√°ran√≠ presigned URL'
        });
    }
});
// Zmazanie s√∫boru z R2
router.delete('/:key', async (req, res) => {
    try {
        const { key } = req.params;
        if (!key) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωba file key'
            });
        }
        await r2_storage_js_1.r2Storage.deleteFile(key);
        console.log('‚úÖ File deleted from R2:', key);
        res.json({
            success: true,
            message: 'S√∫bor bol √∫spe≈°ne vymazan√Ω'
        });
    }
    catch (error) {
        console.error('‚ùå Error deleting file:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri mazan√≠ s√∫boru'
        });
    }
});
// Proxy endpoint pre naƒç√≠tanie obr√°zkov z R2 (pre PDF generovanie)
router.get('/proxy/:key', async (req, res) => {
    try {
        const { key } = req.params;
        if (!key) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωba file key'
            });
        }
        console.log('üîÑ Loading image from R2 via proxy:', key);
        // Naƒç√≠tanie s√∫boru z R2
        const fileBuffer = await r2_storage_js_1.r2Storage.getFile(key);
        if (!fileBuffer) {
            return res.status(404).json({
                success: false,
                error: 'S√∫bor nebol n√°jden√Ω'
            });
        }
        // Zistenie MIME typu z file key
        const mimeType = r2_storage_js_1.r2Storage.getMimeTypeFromKey(key);
        // Nastavenie headers pre obr√°zok
        res.setHeader('Content-Type', mimeType);
        res.setHeader('Content-Length', fileBuffer.length);
        res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache na 1 hodinu
        res.setHeader('Access-Control-Allow-Origin', '*'); // Povoli≈• CORS
        // Odoslanie s√∫boru
        res.send(fileBuffer);
        console.log('‚úÖ Image served via proxy:', key);
    }
    catch (error) {
        console.error('‚ùå Error serving image via proxy:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri naƒç√≠tan√≠ obr√°zka'
        });
    }
});
// Z√≠skanie public URL pre s√∫bor
router.get('/:key/url', async (req, res) => {
    try {
        const { key } = req.params;
        if (!key) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωba file key'
            });
        }
        const publicUrl = r2_storage_js_1.r2Storage.getPublicUrl(key);
        res.json({
            success: true,
            url: publicUrl,
            key: key
        });
    }
    catch (error) {
        console.error('‚ùå Error getting file URL:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri z√≠skavan√≠ URL'
        });
    }
});
// Kontrola R2 konfigur√°cie
router.get('/status', async (req, res) => {
    try {
        const isConfigured = r2_storage_js_1.r2Storage.isConfigured();
        res.json({
            success: true,
            configured: isConfigured,
            message: isConfigured ? 'R2 Storage je nakonfigurovan√©' : 'R2 Storage nie je nakonfigurovan√©'
        });
    }
    catch (error) {
        console.error('‚ùå Error checking R2 status:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri kontrole R2 stavu'
        });
    }
});
// üöÄ NOV√ù ENDPOINT: Upload obr√°zkov pre protokol (origin√°l + thumbnail)
router.post('/protocol-upload', upload.single('file'), async (req, res) => {
    try {
        console.log('üîÑ Protocol upload request received:', {
            hasFile: !!req.file,
            fileSize: req.file?.size,
            mimetype: req.file?.mimetype,
            protocolId: req.body.protocolId,
            type: req.body.type
        });
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: '≈Ωiadny s√∫bor nebol nahran√Ω'
            });
        }
        const { protocolId, type } = req.body;
        if (!protocolId || !type) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωba protocolId alebo type'
            });
        }
        // Valid√°cia typu s√∫boru
        if (!r2_storage_js_1.r2Storage.validateFileType(req.file.mimetype)) {
            return res.status(400).json({
                success: false,
                error: 'Nepodporovan√Ω typ s√∫boru'
            });
        }
        // Valid√°cia veƒækosti s√∫boru
        if (!r2_storage_js_1.r2Storage.validateFileSize(req.file.size, 'image')) {
            return res.status(400).json({
                success: false,
                error: 'S√∫bor je pr√≠li≈° veƒæk√Ω'
            });
        }
        // Generovanie file key podƒæa typu
        let fileKey;
        if (type === 'original') {
            fileKey = `protocols/${protocolId}/original-images/${req.file.originalname}`;
        }
        else if (type === 'thumbnail') {
            fileKey = `protocols/${protocolId}/thumbnails/${req.file.originalname}`;
        }
        else {
            return res.status(400).json({
                success: false,
                error: 'Neplatn√Ω typ (mus√≠ by≈• original alebo thumbnail)'
            });
        }
        // Upload do R2
        const url = await r2_storage_js_1.r2Storage.uploadFile(fileKey, req.file.buffer, req.file.mimetype, {
            original_name: req.file.originalname,
            uploaded_at: new Date().toISOString(),
            protocol_id: protocolId,
            file_type: type
        });
        console.log('‚úÖ Protocol file uploaded to R2:', url);
        res.json({
            success: true,
            url: url,
            key: fileKey,
            filename: req.file.originalname,
            size: req.file.size,
            mimetype: req.file.mimetype,
            type: type
        });
    }
    catch (error) {
        console.error('‚ùå Error uploading protocol file:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri nahr√°van√≠ s√∫boru protokolu',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});
// üöÄ NOV√ù ENDPOINT: Upload PDF protokolu
router.post('/protocol-pdf', upload.single('file'), async (req, res) => {
    try {
        console.log('üîÑ Protocol PDF upload request received:', {
            hasFile: !!req.file,
            fileSize: req.file?.size,
            protocolId: req.body.protocolId
        });
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: '≈Ωiadny PDF s√∫bor nebol nahran√Ω'
            });
        }
        const { protocolId } = req.body;
        if (!protocolId) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωba protocolId'
            });
        }
        // Valid√°cia - len PDF s√∫bory
        if (req.file.mimetype !== 'application/pdf') {
            return res.status(400).json({
                success: false,
                error: 'Len PDF s√∫bory s√∫ povolen√©'
            });
        }
        // Generovanie file key pre PDF
        const fileKey = `protocols/${protocolId}/customer-protocol.pdf`;
        // Upload do R2
        const url = await r2_storage_js_1.r2Storage.uploadFile(fileKey, req.file.buffer, req.file.mimetype, {
            original_name: 'customer-protocol.pdf',
            uploaded_at: new Date().toISOString(),
            protocol_id: protocolId,
            file_type: 'pdf'
        });
        console.log('‚úÖ Protocol PDF uploaded to R2:', url);
        res.json({
            success: true,
            url: url,
            key: fileKey,
            filename: 'customer-protocol.pdf',
            size: req.file.size,
            mimetype: req.file.mimetype
        });
    }
    catch (error) {
        console.error('‚ùå Error uploading protocol PDF:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri nahr√°van√≠ PDF protokolu',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});
// üöÄ NOV√ù ENDPOINT: Z√≠skanie obr√°zkov protokolu
router.get('/protocol/:protocolId/images', async (req, res) => {
    try {
        const { protocolId } = req.params;
        if (!protocolId) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωba protocolId'
            });
        }
        // TODO: Implementova≈• naƒç√≠tanie obr√°zkov z datab√°zy
        // Pre teraz vr√°time pr√°zdny array
        res.json({
            success: true,
            images: []
        });
    }
    catch (error) {
        console.error('‚ùå Error loading protocol images:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri naƒç√≠tan√≠ obr√°zkov protokolu'
        });
    }
});
exports.default = router;
//# sourceMappingURL=files.js.map