"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const multer_1 = __importDefault(require("multer"));
const auth_1 = require("../middleware/auth");
const permissions_1 = require("../middleware/permissions");
const postgres_database_1 = require("../models/postgres-database");
const r2_storage_1 = require("../utils/r2-storage");
const router = express_1.default.Router();
// Multer konfigur√°cia pre upload s√∫borov
const upload = (0, multer_1.default)({
    storage: multer_1.default.memoryStorage(),
    limits: {
        fileSize: 50 * 1024 * 1024, // 50MB max
    },
    fileFilter: (req, file, cb) => {
        if (r2_storage_1.r2Storage.validateFileType(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error('Nepodporovan√Ω typ s√∫boru'));
        }
    },
});
// üìÑ Upload dokumentu majiteƒæa
router.post('/upload', auth_1.authenticateToken, (0, permissions_1.checkPermission)('companies', 'update'), upload.single('file'), async (req, res) => {
    try {
        console.log('üìÑ Company document upload request:', {
            hasFile: !!req.file,
            fileSize: req.file?.size,
            mimetype: req.file?.mimetype,
            body: req.body
        });
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: '≈Ωiadny s√∫bor nebol nahran√Ω'
            });
        }
        const { companyId, documentType, documentName, description, documentMonth, documentYear } = req.body;
        if (!companyId || !documentType || !documentName) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωbaj√∫ povinn√© parametre: companyId, documentType, documentName'
            });
        }
        // Valid√°cia typu dokumentu
        if (!['contract', 'invoice'].includes(documentType)) {
            return res.status(400).json({
                success: false,
                error: 'Neplatn√Ω typ dokumentu. Povolen√©: contract, invoice'
            });
        }
        // Pre fakt√∫ry vy≈æaduj mesiac a rok
        if (documentType === 'invoice') {
            if (!documentMonth || !documentYear) {
                return res.status(400).json({
                    success: false,
                    error: 'Pre fakt√∫ry s√∫ povinn√© parametre: documentMonth, documentYear'
                });
            }
        }
        // Valid√°cia typu s√∫boru
        if (!r2_storage_1.r2Storage.validateFileType(req.file.mimetype)) {
            return res.status(400).json({
                success: false,
                error: 'Nepodporovan√Ω typ s√∫boru'
            });
        }
        // Valid√°cia veƒækosti s√∫boru
        const fileType = req.file.mimetype.startsWith('image/') ? 'image' : 'document';
        if (!r2_storage_1.r2Storage.validateFileSize(req.file.size, fileType)) {
            return res.status(400).json({
                success: false,
                error: 'S√∫bor je pr√≠li≈° veƒæk√Ω'
            });
        }
        // Generovanie file key
        const mediaType = documentType === 'contract' ? 'contract' : 'invoice';
        const fileKey = r2_storage_1.r2Storage.generateFileKey('company-document', companyId, req.file.originalname, mediaType);
        console.log('üìÑ Generated file key:', fileKey);
        // Upload do R2
        const fileUrl = await r2_storage_1.r2Storage.uploadFile(fileKey, req.file.buffer, req.file.mimetype, {
            original_name: req.file.originalname,
            uploaded_at: new Date().toISOString(),
            company_id: companyId,
            document_type: documentType,
            document_name: documentName
        });
        console.log('‚úÖ File uploaded to R2:', fileUrl);
        // Ulo≈æenie do datab√°zy
        const documentData = {
            companyId: parseInt(companyId),
            documentType: documentType,
            documentName,
            description,
            filePath: fileUrl,
            fileSize: req.file.size,
            fileType: req.file.mimetype,
            originalFilename: req.file.originalname,
            createdBy: req.user?.id
        };
        // Pridaj mesiac a rok pre fakt√∫ry
        if (documentType === 'invoice') {
            documentData.documentMonth = parseInt(documentMonth);
            documentData.documentYear = parseInt(documentYear);
        }
        const savedDocument = await postgres_database_1.postgresDatabase.createCompanyDocument(documentData);
        console.log('‚úÖ Document saved to database:', savedDocument.id);
        res.json({
            success: true,
            data: savedDocument,
            message: 'Dokument √∫spe≈°ne nahran√Ω'
        });
    }
    catch (error) {
        console.error('‚ùå Error uploading company document:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri nahr√°van√≠ dokumentu',
            ...(process.env.NODE_ENV === 'development' && { details: error.message })
        });
    }
});
// üìÑ Z√≠skanie dokumentov firmy
router.get('/:companyId', auth_1.authenticateToken, (0, permissions_1.checkPermission)('companies', 'read'), async (req, res) => {
    try {
        const { companyId } = req.params;
        const { documentType, year, month } = req.query;
        console.log('üìÑ Getting company documents:', { companyId, documentType, year, month });
        const documents = await postgres_database_1.postgresDatabase.getCompanyDocuments(parseInt(companyId), documentType, year ? parseInt(year) : undefined, month ? parseInt(month) : undefined);
        console.log(`‚úÖ Found ${documents.length} documents for company ${companyId}`);
        res.json({
            success: true,
            data: documents
        });
    }
    catch (error) {
        console.error('‚ùå Error getting company documents:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri naƒç√≠tan√≠ dokumentov',
            ...(process.env.NODE_ENV === 'development' && { details: error.message })
        });
    }
});
// üìÑ Zmazanie dokumentu
router.delete('/:documentId', auth_1.authenticateToken, (0, permissions_1.checkPermission)('companies', 'delete'), async (req, res) => {
    try {
        const { documentId } = req.params;
        console.log('üìÑ Deleting company document:', documentId);
        // Z√≠skaj dokument pre file path
        const document = await postgres_database_1.postgresDatabase.getCompanyDocumentById(documentId);
        if (!document) {
            return res.status(404).json({
                success: false,
                error: 'Dokument nen√°jden√Ω'
            });
        }
        // Zma≈æ s√∫bor z R2 (ak nie je lok√°lny)
        if (document.filePath && !document.filePath.startsWith('http://localhost')) {
            try {
                const fileKey = document.filePath.replace(r2_storage_1.r2Storage.getPublicUrl(''), '');
                await r2_storage_1.r2Storage.deleteFile(fileKey);
                console.log('‚úÖ File deleted from R2:', fileKey);
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Could not delete file from R2:', error);
            }
        }
        // Zma≈æ z√°znam z datab√°zy
        await postgres_database_1.postgresDatabase.deleteCompanyDocument(documentId);
        console.log('‚úÖ Company document deleted:', documentId);
        res.json({
            success: true,
            message: 'Dokument √∫spe≈°ne zmazan√Ω'
        });
    }
    catch (error) {
        console.error('‚ùå Error deleting company document:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri mazan√≠ dokumentu',
            ...(process.env.NODE_ENV === 'development' && { details: error.message })
        });
    }
});
// üìÑ Ulo≈æenie metadata pre u≈æ nahran√Ω s√∫bor
router.post('/save-metadata', auth_1.authenticateToken, (0, permissions_1.checkPermission)('companies', 'update'), async (req, res) => {
    try {
        console.log('üìÑ Save document metadata request:', req.body);
        const { companyId, documentType, documentName, description, documentMonth, documentYear, filePath } = req.body;
        if (!companyId || !documentType || !documentName || !filePath) {
            return res.status(400).json({
                success: false,
                error: 'Ch√Ωbaj√∫ povinn√© parametre: companyId, documentType, documentName, filePath'
            });
        }
        // Valid√°cia typu dokumentu
        if (!['contract', 'invoice'].includes(documentType)) {
            return res.status(400).json({
                success: false,
                error: 'Neplatn√Ω typ dokumentu. Povolen√©: contract, invoice'
            });
        }
        // Pre fakt√∫ry vy≈æaduj mesiac a rok
        if (documentType === 'invoice') {
            if (!documentMonth || !documentYear) {
                return res.status(400).json({
                    success: false,
                    error: 'Pre fakt√∫ry s√∫ povinn√© parametre: documentMonth, documentYear'
                });
            }
        }
        // Ulo≈æenie do datab√°zy
        const documentData = {
            companyId: parseInt(companyId),
            documentType: documentType,
            documentName,
            description,
            filePath,
            createdBy: req.user?.id
        };
        // Pridaj mesiac a rok pre fakt√∫ry
        if (documentType === 'invoice') {
            documentData.documentMonth = parseInt(documentMonth);
            documentData.documentYear = parseInt(documentYear);
        }
        const savedDocument = await postgres_database_1.postgresDatabase.createCompanyDocument(documentData);
        console.log('‚úÖ Document metadata saved to database:', savedDocument.id);
        res.json({
            success: true,
            data: savedDocument,
            message: 'Dokument √∫spe≈°ne ulo≈æen√Ω'
        });
    }
    catch (error) {
        console.error('‚ùå Error saving document metadata:', error);
        res.status(500).json({
            success: false,
            error: 'Chyba pri ukladan√≠ dokumentu',
            ...(process.env.NODE_ENV === 'development' && { details: error.message })
        });
    }
});
exports.default = router;
//# sourceMappingURL=company-documents.js.map