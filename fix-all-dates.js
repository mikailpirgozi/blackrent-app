#!/usr/bin/env node

/**
 * üö® DRASTICK√Å OPRAVA V≈†ETK√ùCH TIMEZONE PROBL√âMOV
 * 
 * Tento script automaticky nahrad√≠ v≈°etky problematick√© new Date() volania
 * v celej aplik√°cii timezone-safe verziami.
 */

const fs = require('fs');
const path = require('path');

// S√∫bory ktor√© treba opravi≈• (najd√¥le≈æitej≈°ie)
const CRITICAL_FILES = [
  'src/components/rentals/EditRentalDialog.tsx',
  'src/components/rentals/RentalForm.tsx', 
  'src/components/rentals/RentalList.tsx',
  'src/components/rentals/components/RentalTable.tsx',
  'src/components/rentals/MobileRentalRow.tsx',
  'src/utils/formatters.ts'
];

// Patterns na nahradenie
const REPLACEMENTS = [
  // DateTimePicker value props
  {
    pattern: /value=\{formData\.(\w+) \? new Date\(formData\.\1\) : null\}/g,
    replacement: 'value={formData.$1 ? parseTimezoneFreeDateString(formData.$1) : null}'
  },
  {
    pattern: /value=\{\s*formData\.(\w+)\s*\?\s*new Date\(formData\.\1\)\s*:\s*null\s*\}/g,
    replacement: 'value={formData.$1 ? parseTimezoneFreeDateString(formData.$1) : null}'
  },
  // Multiline DateTimePicker values
  {
    pattern: /value=\{\s*formData\.(\w+)\s*\?\s*new Date\(formData\.\1\)\s*:\s*null\s*\}/gm,
    replacement: 'value={formData.$1 ? parseTimezoneFreeDateString(formData.$1) : null}'
  },
  // Calculation contexts
  {
    pattern: /const (\w+) = formData\.(\w+) instanceof Date \? formData\.\2 : new Date\(formData\.\2 \|\| ''\);/g,
    replacement: 'const $1 = formData.$2 instanceof Date ? formData.$2 : parseTimezoneFreeDateString(formData.$2) || new Date();'
  }
];

function addImportIfNeeded(content, filePath) {
  // Ak u≈æ m√° import, niƒç nerob√≠me
  if (content.includes('parseTimezoneFreeDateString')) {
    return content;
  }
  
  // N√°jdi existuj√∫ci import z formatters
  const formattersImportMatch = content.match(/import\s*\{([^}]+)\}\s*from\s*['"]\.\.?\/\.\.?\/utils\/formatters['"];?/);
  
  if (formattersImportMatch) {
    // Pridaj do existuj√∫ceho importu
    const existingImports = formattersImportMatch[1];
    const newImports = existingImports.includes('parseTimezoneFreeDateString') 
      ? existingImports 
      : existingImports + ', parseTimezoneFreeDateString';
    
    return content.replace(formattersImportMatch[0], 
      `import { ${newImports} } from '../../utils/formatters';`);
  }
  
  // Pridaj nov√Ω import
  const importLines = content.split('\\n');
  let insertIndex = 0;
  
  // N√°jdi posledn√Ω import
  for (let i = 0; i < importLines.length; i++) {
    if (importLines[i].startsWith('import ')) {
      insertIndex = i + 1;
    }
  }
  
  importLines.splice(insertIndex, 0, "import { parseTimezoneFreeDateString } from '../../utils/formatters';");
  return importLines.join('\\n');
}

function fixFile(filePath) {
  console.log(`üîß Opravujem ${filePath}...`);
  
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  S√∫bor ${filePath} neexistuje`);
    return;
  }
  
  let content = fs.readFileSync(filePath, 'utf8');
  let changed = false;
  
  // Aplikuj v≈°etky n√°hrady
  REPLACEMENTS.forEach(({ pattern, replacement }) => {
    const newContent = content.replace(pattern, replacement);
    if (newContent !== content) {
      content = newContent;
      changed = true;
    }
  });
  
  // Pridaj import ak je potrebn√Ω
  if (changed) {
    content = addImportIfNeeded(content, filePath);
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ ${filePath} opraven√Ω`);
  } else {
    console.log(`‚ÑπÔ∏è  ${filePath} nepotrebuje opravu`);
  }
}

// Spusti opravu
console.log('üö® SP√ö≈†≈§AM DRASTICK√ö OPRAVU TIMEZONE PROBL√âMOV...');
console.log('');

CRITICAL_FILES.forEach(fixFile);

console.log('');
console.log('‚úÖ OPRAVA DOKONƒåEN√Å!');
console.log('');
console.log('üîÑ Teraz spusti:');
console.log('npm run build');
console.log('git add .');
console.log('git commit -m "üïê Automatick√° oprava v≈°etk√Ωch timezone probl√©mov"');
console.log('git push');
