#!/usr/bin/env node

/**
 * Script na anal√Ωzu a nap√°rovanie emailov s pren√°jmami
 */

const fs = require('fs');
const path = require('path');

class EmailRentalAnalyzer {
  constructor() {
    this.emails = [];
    this.rentals = [];
    this.matches = [];
  }

  // Naƒç√≠taj v≈°etky emaily z all-emails prieƒçinka
  loadEmails() {
    console.log('üìß Naƒç√≠tavam emaily...');
    const emailDir = 'all-emails';
    
    if (!fs.existsSync(emailDir)) {
      console.error('‚ùå Prieƒçinok all-emails neexistuje');
      return;
    }

    const files = fs.readdirSync(emailDir).filter(f => f.endsWith('.html'));
    
    for (const file of files) {
      try {
        const content = fs.readFileSync(path.join(emailDir, file), 'utf8');
        const emailData = this.parseEmailContent(content, file);
        if (emailData) {
          this.emails.push(emailData);
        }
      } catch (error) {
        console.error(`‚ùå Chyba pri naƒç√≠tan√≠ ${file}:`, error.message);
      }
    }

    console.log(`‚úÖ Naƒç√≠tan√Ωch ${this.emails.length} emailov`);
  }

  // Parsuj obsah emailu a extrahuj d√¥le≈æit√© inform√°cie
  parseEmailContent(content, filename) {
    try {
      // Extrahuj seqno z n√°zvu s√∫boru
      const seqnoMatch = filename.match(/email-(\d+)-/);
      const seqno = seqnoMatch ? seqnoMatch[1] : 'unknown';

      // Extrahuj ƒç√≠slo objedn√°vky
      const orderMatch = content.match(/ƒå√≠slo objedn√°vky<\/td>\s*<td[^>]*>([^<]+)<\/td>/);
      const orderNumber = orderMatch ? orderMatch[1].trim() : null;

      // Extrahuj meno z√°kazn√≠ka
      const customerMatch = content.match(/Odoberateƒæ<\/td>\s*<td[^>]*>([^<]+)<\/td>/);
      const customerName = customerMatch ? customerMatch[1].trim() : null;

      // Extrahuj email
      const emailMatch = content.match(/E-mail<\/td>\s*<td[^>]*>([^<]+)<\/td>/);
      const email = emailMatch ? emailMatch[1].trim() : null;

      // Extrahuj telef√≥n
      const phoneMatch = content.match(/Telefon<\/td>\s*<td[^>]*>([^<]+)<\/td>/);
      const phone = phoneMatch ? phoneMatch[1].trim() : null;

      // Extrahuj ƒças rezerv√°cie
      const timeMatch = content.match(/ƒåas rezervacie<\/td>\s*<td[^>]*>([^<]+)<\/td>/);
      const reservationTime = timeMatch ? timeMatch[1].trim() : null;

      // Extrahuj sumu
      const priceMatch = content.match(/Suma k √∫hrade<\/td>\s*<td[^>]*>([^<]+)<\/td>/);
      const totalPrice = priceMatch ? priceMatch[1].replace(/[^\d,]/g, '').replace(',', '.') : null;

      // Extrahuj d√°tum prijatia
      const dateMatch = content.match(/Objedn√°vka prijat√°<\/td>\s*<td[^>]*>([^<]+)<\/td>/);
      const orderDate = dateMatch ? dateMatch[1].trim() : null;

      // Parsuj ƒças rezerv√°cie na start a end d√°tumy
      let startDate = null, endDate = null;
      if (reservationTime) {
        const timeParseMatch = reservationTime.match(/(\d{4}-\d{2}-\d{2}) (\d{2}:\d{2}:\d{2}) - (\d{4}-\d{2}-\d{2}) (\d{2}:\d{2}:\d{2})/);
        if (timeParseMatch) {
          startDate = `${timeParseMatch[1]} ${timeParseMatch[2]}`;
          endDate = `${timeParseMatch[3]} ${timeParseMatch[4]}`;
        }
      }

      if (!orderNumber || !customerName) {
        return null; // Preskoƒçi≈• ne√∫pln√© emaily
      }

      return {
        seqno,
        orderNumber,
        customerName,
        email,
        phone,
        reservationTime,
        startDate,
        endDate,
        totalPrice: totalPrice ? parseFloat(totalPrice) : null,
        orderDate,
        filename
      };
    } catch (error) {
      console.error(`‚ùå Chyba pri parsovan√≠ ${filename}:`, error.message);
      return null;
    }
  }

  // Naƒç√≠taj pren√°jmy z datab√°zy (simul√°cia - v re√°lnosti by to bolo z DB)
  loadRentals() {
    // Tieto d√°ta by sa naƒç√≠tali z datab√°zy
    this.rentals = [
      { id: 9, customer_name: 'Tromex house s.r.o.', order_number: null, start_date: '2025-09-04 08:00:00', end_date: '2025-09-07 08:00:00', total_price: 960.00, customer_email: null, customer_phone: null },
      { id: 50, customer_name: 'Valko', order_number: null, start_date: '2025-09-05 08:00:00', end_date: '2025-10-03 08:00:00', total_price: 700.00, customer_email: null, customer_phone: null },
      { id: 11, customer_name: 'Luculus', order_number: null, start_date: '2025-09-05 08:00:00', end_date: '2025-10-05 08:00:00', total_price: 2926.83, customer_email: null, customer_phone: null },
      { id: 49, customer_name: 'Zurbola', order_number: null, start_date: '2025-09-05 08:00:00', end_date: '2025-09-08 08:00:00', total_price: 900.00, customer_email: null, customer_phone: null },
      { id: 10, customer_name: 'Daniel Mutnansky', order_number: null, start_date: '2025-09-04 08:00:00', end_date: '2025-09-05 08:00:00', total_price: 100.00, customer_email: null, customer_phone: null },
      { id: 17, customer_name: 'EUROCOVER Slovakia, s.r.o.', order_number: null, start_date: '2025-09-04 08:00:00', end_date: '2025-09-08 08:00:00', total_price: 1080.00, customer_email: null, customer_phone: null },
      { id: 51, customer_name: 'Ba≈•a', order_number: null, start_date: '2025-09-03 08:00:00', end_date: '2025-09-07 08:00:00', total_price: 1000.00, customer_email: null, customer_phone: null },
      { id: 14, customer_name: 'Lucas Trans Group s. r. o.', order_number: null, start_date: '2025-09-03 08:00:00', end_date: '2025-09-08 08:00:00', total_price: 225.00, customer_email: null, customer_phone: null },
      { id: 15, customer_name: 'Tom√°≈° Horv√°th', order_number: null, start_date: '2025-09-03 08:00:00', end_date: '2025-09-05 08:00:00', total_price: 360.00, customer_email: null, customer_phone: null },
      { id: 21, customer_name: 'Vladimir Brodzianovsky', order_number: null, start_date: '2025-09-03 08:00:00', end_date: '2025-09-12 08:00:00', total_price: 315.00, customer_email: null, customer_phone: null },
      { id: 13, customer_name: 'Luk√°≈° Sl√°vka', order_number: null, start_date: '2025-09-03 08:00:00', end_date: '2025-09-05 08:00:00', total_price: 150.00, customer_email: null, customer_phone: null },
      { id: 18, customer_name: 'Michal Rakovan', order_number: null, start_date: '2025-09-02 08:00:00', end_date: '2025-09-05 08:00:00', total_price: 585.00, customer_email: null, customer_phone: null },
      { id: 16, customer_name: 'Tom√°≈° Horv√°th', order_number: null, start_date: '2025-09-02 08:00:00', end_date: '2025-09-03 08:00:00', total_price: 150.00, customer_email: null, customer_phone: null },
      { id: 22, customer_name: 'Vladimir Brodzianovsky', order_number: null, start_date: '2025-09-01 08:00:00', end_date: '2025-09-03 08:00:00', total_price: 126.00, customer_email: null, customer_phone: null },
      { id: 24, customer_name: 'David Hano', order_number: null, start_date: '2025-08-31 08:00:00', end_date: '2025-09-04 08:00:00', total_price: 380.00, customer_email: null, customer_phone: null },
      { id: 23, customer_name: 'Mikail Pirgozi', order_number: null, start_date: '2025-08-31 08:00:00', end_date: '2025-08-31 08:00:00', total_price: 100.00, customer_email: null, customer_phone: null },
      { id: 25, customer_name: 'Dami√°n Min√°rik', order_number: null, start_date: '2025-08-30 08:00:00', end_date: '2025-08-31 08:00:00', total_price: 310.00, customer_email: null, customer_phone: null }
    ];
    
    console.log(`‚úÖ Naƒç√≠tan√Ωch ${this.rentals.length} pren√°jmov bez order_number`);
  }

  // Nap√°ruj emaily s pren√°jmami
  matchEmailsWithRentals() {
    console.log('\nüîç Zaƒç√≠nam nap√°rovanie...\n');

    for (const email of this.emails) {
      console.log(`üìß Analyzujem email ${email.seqno}: ${email.orderNumber} - ${email.customerName}`);
      
      // Hƒæadaj presn√© nap√°rovanie podƒæa mena
      const exactMatches = this.rentals.filter(rental => 
        this.normalizeString(rental.customer_name) === this.normalizeString(email.customerName)
      );

      if (exactMatches.length === 1) {
        const rental = exactMatches[0];
        const match = this.createMatch(email, rental, 'exact_name');
        this.matches.push(match);
        console.log(`   ‚úÖ PRESN√â NAP√ÅROVANIE: Rental ID ${rental.id}`);
        continue;
      }

      // Hƒæadaj nap√°rovanie podƒæa podobn√©ho mena
      const similarMatches = this.rentals.filter(rental => 
        this.isSimilarName(rental.customer_name, email.customerName)
      );

      if (similarMatches.length === 1) {
        const rental = similarMatches[0];
        const match = this.createMatch(email, rental, 'similar_name');
        this.matches.push(match);
        console.log(`   üî∂ PODOBN√â NAP√ÅROVANIE: Rental ID ${rental.id} (${rental.customer_name})`);
        continue;
      }

      // Hƒæadaj nap√°rovanie podƒæa sumy a d√°tumu
      const priceMatches = this.rentals.filter(rental => {
        const emailStartDate = email.startDate ? email.startDate.split(' ')[0] : null;
        const rentalStartDate = rental.start_date ? rental.start_date.split(' ')[0] : null;
        
        return Math.abs(rental.total_price - email.totalPrice) < 0.01 && 
               emailStartDate === rentalStartDate;
      });

      if (priceMatches.length === 1) {
        const rental = priceMatches[0];
        const match = this.createMatch(email, rental, 'price_date');
        this.matches.push(match);
        console.log(`   üî∑ NAP√ÅROVANIE PODƒΩA SUMY A D√ÅTUMU: Rental ID ${rental.id} (${rental.customer_name})`);
        continue;
      }

      console.log(`   ‚ùå Nena≈°lo sa nap√°rovanie pre ${email.customerName}`);
    }
  }

  // Vytvor match objekt
  createMatch(email, rental, matchType) {
    return {
      email,
      rental,
      matchType,
      confidence: this.calculateConfidence(email, rental, matchType),
      missingData: this.identifyMissingData(email, rental)
    };
  }

  // Vypoƒç√≠taj confidence score
  calculateConfidence(email, rental, matchType) {
    let score = 0;
    
    switch (matchType) {
      case 'exact_name': score = 90; break;
      case 'similar_name': score = 70; break;
      case 'price_date': score = 60; break;
    }

    // Bonus za zhodn√© sumy
    if (Math.abs(rental.total_price - email.totalPrice) < 0.01) {
      score += 10;
    }

    // Bonus za zhodn√© d√°tumy
    const emailStartDate = email.startDate ? email.startDate.split(' ')[0] : null;
    const rentalStartDate = rental.start_date ? rental.start_date.split(' ')[0] : null;
    if (emailStartDate === rentalStartDate) {
      score += 10;
    }

    return Math.min(score, 100);
  }

  // Identifikuj ch√Ωbaj√∫ce d√°ta
  identifyMissingData(email, rental) {
    const missing = [];
    
    if (!rental.order_number) missing.push('order_number');
    if (!rental.customer_email) missing.push('customer_email');
    if (!rental.customer_phone) missing.push('customer_phone');
    
    // Kontrola ƒçasu
    const emailTime = email.startDate ? email.startDate.split(' ')[1] : null;
    const rentalTime = rental.start_date ? rental.start_date.split(' ')[1] : null;
    if (emailTime && rentalTime && emailTime !== rentalTime) {
      missing.push('start_time');
    }

    return missing;
  }

  // Normalizuj string pre porovnanie
  normalizeString(str) {
    return str.toLowerCase()
      .replace(/[√°√§√¢√†]/g, 'a')
      .replace(/[√©√´√™√®]/g, 'e')
      .replace(/[√≠√Ø√Æ√¨]/g, 'i')
      .replace(/[√≥√∂√¥√≤]/g, 'o')
      .replace(/[√∫√º√ª√π]/g, 'u')
      .replace(/[√Ω√ø]/g, 'y')
      .replace(/[≈à]/g, 'n')
      .replace(/[≈°]/g, 's')
      .replace(/[ƒç]/g, 'c')
      .replace(/[≈•]/g, 't')
      .replace(/[≈æ]/g, 'z')
      .replace(/[ƒæ]/g, 'l')
      .replace(/[≈ô]/g, 'r')
      .replace(/[ƒè]/g, 'd')
      .replace(/\s+/g, ' ')
      .trim();
  }

  // Kontrola podobnosti mien
  isSimilarName(name1, name2) {
    const norm1 = this.normalizeString(name1);
    const norm2 = this.normalizeString(name2);
    
    // Kontrola ƒçi jedno meno obsahuje druh√©
    return norm1.includes(norm2) || norm2.includes(norm1);
  }

  // Vygeneruj report
  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä REPORT: NAP√ÅROVANIE EMAILOV S PREN√ÅJMAMI');
    console.log('='.repeat(80));
    
    console.log(`‚úÖ Celkovo n√°jden√Ωch nap√°rovan√≠: ${this.matches.length}`);
    console.log(`üìß Analyzovan√Ωch emailov: ${this.emails.length}`);
    console.log(`üè¢ Pren√°jmov bez order_number: ${this.rentals.length}`);
    
    console.log('\nüìã DETAILN√â NAP√ÅROVANIA:\n');
    
    this.matches.forEach((match, index) => {
      console.log(`${index + 1}. üìß Email ${match.email.seqno}: ${match.email.orderNumber}`);
      console.log(`   üë§ Z√°kazn√≠k: ${match.email.customerName}`);
      console.log(`   üè¢ Rental ID: ${match.rental.id} (${match.rental.customer_name})`);
      console.log(`   üéØ Match Type: ${match.matchType} (${match.confidence}% confidence)`);
      console.log(`   üí∞ Suma: Email ${match.email.totalPrice}‚Ç¨ | Rental ${match.rental.total_price}‚Ç¨`);
      console.log(`   üìÖ D√°tum: Email ${match.email.startDate} | Rental ${match.rental.start_date}`);
      console.log(`   ‚ùå Ch√Ωbaj√∫ce d√°ta: ${match.missingData.join(', ') || '≈æiadne'}`);
      
      if (match.missingData.length > 0) {
        console.log(`   üîß POTREBN√â OPRAVY:`);
        if (match.missingData.includes('order_number')) {
          console.log(`      - Prida≈• order_number: ${match.email.orderNumber}`);
        }
        if (match.missingData.includes('customer_email')) {
          console.log(`      - Prida≈• email: ${match.email.email}`);
        }
        if (match.missingData.includes('customer_phone')) {
          console.log(`      - Prida≈• telef√≥n: ${match.email.phone}`);
        }
        if (match.missingData.includes('start_time')) {
          console.log(`      - Opravi≈• ƒças: z ${match.rental.start_date} na ${match.email.startDate}`);
        }
      }
      
      console.log('-'.repeat(60));
    });

    // Nen√°jden√© emaily
    const unmatchedEmails = this.emails.filter(email => 
      !this.matches.some(match => match.email.seqno === email.seqno)
    );

    if (unmatchedEmails.length > 0) {
      console.log('\n‚ùå NEN√ÅJDEN√â NAP√ÅROVANIA:\n');
      unmatchedEmails.forEach(email => {
        console.log(`üìß Email ${email.seqno}: ${email.orderNumber} - ${email.customerName}`);
        console.log(`   üí∞ Suma: ${email.totalPrice}‚Ç¨`);
        console.log(`   üìÖ D√°tum: ${email.startDate}`);
      });
    }
  }

  // Hlavn√° met√≥da
  async analyze() {
    console.log('üöÄ Zaƒç√≠nam anal√Ωzu emailov a pren√°jmov...\n');
    
    this.loadEmails();
    this.loadRentals();
    this.matchEmailsWithRentals();
    this.generateReport();
    
    console.log('\n‚úÖ Anal√Ωza dokonƒçen√°!');
  }
}

// Spustenie
async function main() {
  const analyzer = new EmailRentalAnalyzer();
  
  try {
    await analyzer.analyze();
  } catch (error) {
    console.error('‚ùå Chyba:', error);
    process.exit(1);
  }
}

main();
