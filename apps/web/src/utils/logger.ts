/**
 * üöÄ OPTIMALIZOVAN√ù LOGGER SYST√âM
 *
 * Zn√≠≈æen√© logovanie pre lep≈°√≠ performance a ƒçist≈°iu konzolu
 * - Development: Len kritick√© logy
 * - Production: Len chyby
 */

import { env } from '@/lib/env';

const isDevelopment = process.env.NODE_ENV === 'development';

// Throttling pre periodick√© logy
const throttledLogs = new Map<string, number>();
const THROTTLE_INTERVAL = 5000; // 5 sek√∫nd

function shouldThrottle(key: string): boolean {
  const now = Date.now();
  const lastLog = throttledLogs.get(key);
  
  if (!lastLog || now - lastLog > THROTTLE_INTERVAL) {
    throttledLogs.set(key, now);
    return false;
  }
  return true;
}

export const logger = {
  // üêõ Debug logy - len kritick√© v development
  debug: (...args: unknown[]) => {
    if (isDevelopment && env.DEBUG) {
      // Throttle debug logy
      const key = args[0] as string;
      if (shouldThrottle(key)) return;
      
      console.log(...args);
    }
  },

  // ‚ÑπÔ∏è Info logy - len d√¥le≈æit√©
  info: (...args: unknown[]) => {
    if (isDevelopment && env.DEBUG) {
      // Throttle info logy
      const key = args[0] as string;
      if (shouldThrottle(key)) return;
      
      console.log(...args);
    }
  },

  // ‚ö†Ô∏è Warning logy - v≈ædy (d√¥le≈æit√©)
  warn: (...args: unknown[]) => {
    console.warn(...args);
  },

  // üö® Error logy - v≈ædy (kritick√©)
  error: (...args: unknown[]) => {
    console.error(...args);
  },

  // üìä Performance logy - len v development, throttled
  perf: (...args: unknown[]) => {
    if (isDevelopment) {
      const key = args[0] as string;
      if (shouldThrottle(key)) return;
      
      console.log(...args);
    }
  },

  // üîê Auth logy - len kritick√© auth oper√°cie
  auth: (...args: unknown[]) => {
    if (isDevelopment && env.DEBUG) {
      // Throttle auth logy
      const key = args[0] as string;
      if (shouldThrottle(key)) return;
      
      console.log(...args);
    }
  },
};

export default logger;
