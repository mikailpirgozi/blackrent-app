/**
 * üí∞ COMMISSION CALCULATOR UTILITY
 * Centr√°lna logika pre poƒç√≠tanie prov√≠zi√≠ pren√°jmov
 * 
 * BUSINESS RULES:
 * - Percentu√°lna prov√≠zia: poƒç√≠ta sa z totalPrice (z√°kladn√° cena + extra km)
 * - Fixn√° prov√≠zia: OST√ÅVA FIXN√Å bez ohƒæadu na extra km poplatky
 * - Custom commission m√° prioritu pred vehicle commission
 */

import type { Rental, Vehicle, Commission } from '../types';

export interface CommissionConfig {
  type: 'percentage' | 'fixed';
  value: number;
}

export interface CommissionResult {
  commission: number;
  type: 'percentage' | 'fixed';
  rate: number;
  basePrice: number;
  calculatedFrom: 'custom' | 'vehicle' | 'default';
}

/**
 * üéØ HLAVN√Å FUNKCIA: Vypoƒç√≠ta prov√≠ziu pre pren√°jom
 * 
 * @param totalPrice - Celkov√° cena pren√°jmu (z√°kladn√° cena + extra km)
 * @param customCommission - Custom prov√≠zia z pren√°jmu (m√° prioritu)
 * @param vehicleCommission - Prov√≠zia z vozidla (fallback)
 * @returns CommissionResult s detailn√Ωm rozpisom
 */
export function calculateCommission(
  totalPrice: number,
  customCommission?: CommissionConfig | null,
  vehicleCommission?: CommissionConfig | null
): CommissionResult {
  // Priority: custom > vehicle > 0
  let commissionConfig: CommissionConfig | null = null;
  let calculatedFrom: 'custom' | 'vehicle' | 'default' = 'default';

  if (customCommission?.value && customCommission.value > 0) {
    commissionConfig = customCommission;
    calculatedFrom = 'custom';
  } else if (vehicleCommission?.value && vehicleCommission.value > 0) {
    commissionConfig = vehicleCommission;
    calculatedFrom = 'vehicle';
  }

  // Ak nie je ≈æiadna prov√≠zia, vr√°≈• 0
  if (!commissionConfig) {
    return {
      commission: 0,
      type: 'fixed',
      rate: 0,
      basePrice: totalPrice,
      calculatedFrom: 'default',
    };
  }

  let commission = 0;

  if (commissionConfig.type === 'percentage') {
    // üìä PERCENTU√ÅLNA PROV√çZIA: poƒç√≠ta sa z totalPrice
    commission = (totalPrice * commissionConfig.value) / 100;
  } else {
    // üí∞ FIXN√Å PROV√çZIA: ost√°va fixn√° bez ohƒæadu na extra km
    commission = commissionConfig.value;
  }

  return {
    commission: Math.round(commission * 100) / 100,
    type: commissionConfig.type,
    rate: commissionConfig.value,
    basePrice: totalPrice,
    calculatedFrom,
  };
}

/**
 * üîÑ HELPER: Vypoƒç√≠ta komisiu z rental objektu
 */
export function calculateCommissionFromRental(rental: Rental): CommissionResult {
  return calculateCommission(
    rental.totalPrice || 0,
    rental.customCommission,
    rental.vehicle?.commission
  );
}

/**
 * üîÑ HELPER: Vypoƒç√≠ta nov√∫ prov√≠ziu po pridan√≠ extra km poplatku
 * 
 * @param currentRental - Aktu√°lny pren√°jom
 * @param extraKmCharge - Doplatok za extra km
 * @returns Nov√° prov√≠zia a totalPrice
 */
export function calculateCommissionWithExtraKm(
  currentRental: Rental,
  extraKmCharge: number
): { newTotalPrice: number; newCommission: number } {
  const newTotalPrice = currentRental.totalPrice + extraKmCharge;

  // Zisti ktor√° prov√≠zia sa pou≈æ√≠va
  const commissionConfig = currentRental.customCommission?.value
    ? currentRental.customCommission
    : currentRental.vehicle?.commission;

  if (!commissionConfig) {
    return {
      newTotalPrice,
      newCommission: currentRental.commission || 0,
    };
  }

  let newCommission = currentRental.commission || 0;

  if (commissionConfig.type === 'percentage') {
    // üìä PERCENTU√ÅLNA: prepoƒç√≠taj z novej ceny
    newCommission = (newTotalPrice * commissionConfig.value) / 100;
  }
  // üí∞ FIXN√Å: ost√°va rovnak√° (nerob√≠me niƒç)

  return {
    newTotalPrice,
    newCommission: Math.round(newCommission * 100) / 100,
  };
}

/**
 * üîÑ HELPER: Valid√°cia ≈æe prov√≠zia je spr√°vne vypoƒç√≠tan√°
 * Pou≈æ√≠va sa pre debugging a kontrolu d√°t
 */
export function validateCommission(rental: Rental): {
  isValid: boolean;
  expectedCommission: number;
  actualCommission: number;
  difference: number;
  message?: string;
} {
  const result = calculateCommissionFromRental(rental);
  const actualCommission = rental.commission || 0;
  const difference = Math.abs(result.commission - actualCommission);

  // Tolerancia 0.01 EUR kv√¥li zaokr√∫hƒæovaniu
  const isValid = difference < 0.01;

  return {
    isValid,
    expectedCommission: result.commission,
    actualCommission,
    difference,
    message: isValid
      ? 'Prov√≠zia je spr√°vna'
      : `Prov√≠zia nesed√≠! Oƒçak√°van√©: ${result.commission}‚Ç¨, Aktu√°lne: ${actualCommission}‚Ç¨ (rozdiel: ${difference}‚Ç¨)`,
  };
}

/**
 * üìä FORMAT: Form√°tuje prov√≠ziu pre zobrazenie
 */
export function formatCommission(commission: number): string {
  return new Intl.NumberFormat('sk-SK', {
    style: 'currency',
    currency: 'EUR',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(commission);
}

