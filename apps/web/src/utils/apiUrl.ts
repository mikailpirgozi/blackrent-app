import { env } from '@/lib/env';
import { logger } from './logger';

// Extend Window interface for API URL logging
declare global {
  interface Window {
    __API_URL_LOGGED__?: boolean;
  }
}

/**
 * Centralizovan√° funkcia pre z√≠skanie spr√°vnej API URL
 * na z√°klade prostredia v ktorom aplik√°cia be≈æ√≠
 */
export const getApiBaseUrl = (): string => {
  // PRIORITA 1: Pre development ignoruj .env a pou≈æ√≠vaj Vite proxy
  if (
    typeof window !== 'undefined' &&
    (window.location.hostname === 'localhost' ||
      window.location.hostname === '127.0.0.1')
  ) {
    logger.debug('üåê Localhost detekovan√©, pou≈æ√≠vam Vite proxy: /api');
    return '/api';
  }

  // PRIORITA 2: Ak je nastaven√° custom API URL v environment - V≈ΩDY pou≈æi≈• t√∫to
  if (env.API_URL) {
    logger.debug('üåê Pou≈æ√≠vam API URL z .env (PRIORITY):', env.API_URL);
    return env.API_URL;
  }


  // PRIORITA 3: Pre Vercel deployment pou≈æ√≠vaj Railway API
  if (
    typeof window !== 'undefined' &&
    window.location.hostname.includes('vercel.app')
  ) {
    const railwayUrl =
      'https://blackrent-app-production-4d6f.up.railway.app/api';
    logger.debug('üåê Vercel detekovan√©, pou≈æ√≠vam Railway API:', railwayUrl);
    return railwayUrl;
  }

  // PRIORITA 4: Pre Railway deployment (cel√° aplik√°cia na Railway)
  if (
    typeof window !== 'undefined' &&
    window.location.hostname.includes('railway.app')
  ) {
    const apiUrl = `${window.location.origin}/api`;
    logger.debug('üåê Railway detekovan√©, pou≈æ√≠vam relat√≠vnu API URL:', apiUrl);
    return apiUrl;
  }

  // PRIORITA 5: V produkcii pou≈æ√≠vame Railway URL
  if (process.env.NODE_ENV === 'production') {
    const railwayUrl =
      'https://blackrent-app-production-4d6f.up.railway.app/api';
    logger.debug('üåê Production mode, pou≈æ√≠vam Railway API:', railwayUrl);
    return railwayUrl;
  }

  // Fallback pre development - pou≈æ√≠vaj relat√≠vne /api (Vite proxy)
  logger.debug('üåê Fallback: pou≈æ√≠vam Vite proxy');
  return '/api';
};

/**
 * Z√≠ska base URL bez /api pre websocket pripojenia a in√© √∫ƒçely
 */
export const getBaseUrl = (): string => {
  const apiUrl = getApiBaseUrl();

  // FIXED: Pre development mode, ak je API URL relat√≠vna /api, vr√°≈• localhost:3001
  if (apiUrl === '/api') {
    return 'http://localhost:3001';
  }

  return apiUrl.replace('/api', '');
};

/**
 * Pre kompatibilitu s existuj√∫cim k√≥dom - teraz dynamick√©
 */
export const API_BASE_URL = () => getApiBaseUrl();

// Debug log - len v browseri a len raz
if (typeof window !== 'undefined' && !window.__API_URL_LOGGED__) {
  logger.debug('üîó API_BASE_URL nastaven√© na:', getApiBaseUrl());
  logger.debug('üåç Environment:', {
    NODE_ENV: process.env.NODE_ENV,
    hostname: window.location.hostname,
    origin: window.location.origin,
  });
  window.__API_URL_LOGGED__ = true;
}
