-- üöÄ FIN√ÅLNE ƒåISTENIE BLACKRENT DATAB√ÅZY
-- Optimaliz√°cia na z√°klade pou≈æ√≠vateƒæsk√Ωch po≈æiadaviek

BEGIN;

-- ========================================
-- 1Ô∏è‚É£ OPRAVA STATUSOV PREN√ÅJMOV
-- ========================================

SELECT 'KROK 1: Oprava statusov pren√°jmov...' as info;

-- Zobrazenie PRED opravou
SELECT 
  'PRED OPRAVOU' as faza,
  status,
  COUNT(*) as pocet
FROM rentals 
GROUP BY status
ORDER BY pocet DESC;

-- ƒåAK√Å NA PREN√ÅJOM (start_date > dnes)
UPDATE rentals 
SET status = 'pending', confirmed = false
WHERE start_date > CURRENT_DATE 
  AND return_protocol_id IS NULL;

-- V PREN√ÅJME (dnes medzi start_date a end_date)
UPDATE rentals 
SET status = 'active', confirmed = true
WHERE start_date <= CURRENT_DATE 
  AND end_date >= CURRENT_DATE
  AND return_protocol_id IS NULL;

-- PREN√ÅJOM UKONƒåEN√ù (end_date < dnes ale bez protokolu)
UPDATE rentals 
SET status = 'finished', confirmed = false
WHERE end_date < CURRENT_DATE 
  AND return_protocol_id IS NULL;

-- PREN√ÅJOM UKONƒåEN√ù A POTVRDEN√ù (m√° return protokol)
UPDATE rentals 
SET status = 'completed', confirmed = true
WHERE return_protocol_id IS NOT NULL;

-- Zobrazenie PO oprave
SELECT 
  'PO OPRAVE' as faza,
  status,
  COUNT(*) as pocet
FROM rentals 
GROUP BY status
ORDER BY pocet DESC;

-- ========================================
-- 2Ô∏è‚É£ SYNCHRONIZ√ÅCIA FLEXIBILN√ùCH PREN√ÅJMOV  
-- ========================================

SELECT 'KROK 2: Synchroniz√°cia flexibiln√Ωch pren√°jmov...' as info;

-- Zobrazenie nekonzistenci√≠ PRED opravou
SELECT 
  'PRED SYNC' as faza,
  rental_type,
  is_flexible,
  COUNT(*) as pocet
FROM rentals 
GROUP BY rental_type, is_flexible;

-- Synchroniz√°cia: rental_type -> is_flexible
UPDATE rentals 
SET is_flexible = true
WHERE rental_type = 'flexible' AND is_flexible = false;

UPDATE rentals 
SET is_flexible = false  
WHERE rental_type = 'standard' AND is_flexible = true;

-- Zobrazenie PO synchroniz√°cii
SELECT 
  'PO SYNC' as faza,
  rental_type,
  is_flexible,
  COUNT(*) as pocet
FROM rentals 
GROUP BY rental_type, is_flexible;

-- ========================================
-- 3Ô∏è‚É£ ZMAZANIE DUPLICITN√ùCH STƒπPCOV
-- ========================================

SELECT 'KROK 3: Zmazanie duplicitn√Ωch stƒ∫pcov...' as info;

-- Zobrazenie ƒço ideme zmaza≈•
SELECT 
  COUNT(CASE WHEN customer_id IS NOT NULL THEN 1 END) as customer_id_filled,
  COUNT(CASE WHEN company IS NOT NULL THEN 1 END) as company_filled,
  COUNT(CASE WHEN rental_type IS NOT NULL THEN 1 END) as rental_type_filled,
  COUNT(*) as total_rentals
FROM rentals;

-- ZMAZANIE DUPLICITN√ùCH STƒπPCOV
ALTER TABLE rentals DROP COLUMN IF EXISTS customer_id;     -- duplik√°t customer_name
ALTER TABLE rentals DROP COLUMN IF EXISTS company;         -- duplik√°t vehicles.company  
ALTER TABLE rentals DROP COLUMN IF EXISTS rental_type;     -- duplik√°t is_flexible

-- ========================================
-- 4Ô∏è‚É£ VYTVORENIE AUTOMATICK√âHO TRIGGERA
-- ========================================

SELECT 'KROK 4: Vytvorenie triggera pre statusy...' as info;

-- Trigger funkcia pre automatick√© nastavovanie statusov
CREATE OR REPLACE FUNCTION update_rental_status()
RETURNS TRIGGER AS $$
BEGIN
  -- Automaticky nastav status na z√°klade d√°tumov
  IF NEW.return_protocol_id IS NOT NULL THEN
    NEW.status := 'completed';
    NEW.confirmed := true;
  ELSIF NEW.end_date < CURRENT_DATE THEN
    NEW.status := 'finished'; 
    NEW.confirmed := false;
  ELSIF NEW.start_date <= CURRENT_DATE AND NEW.end_date >= CURRENT_DATE THEN
    NEW.status := 'active';
    NEW.confirmed := true;
  ELSIF NEW.start_date > CURRENT_DATE THEN
    NEW.status := 'pending';
    NEW.confirmed := false;  
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Vytvorenie triggera
DROP TRIGGER IF EXISTS rental_status_trigger ON rentals;
CREATE TRIGGER rental_status_trigger
  BEFORE INSERT OR UPDATE ON rentals
  FOR EACH ROW EXECUTE FUNCTION update_rental_status();

-- ========================================
-- 5Ô∏è‚É£ FIN√ÅLNE ≈†TATISTIKY
-- ========================================

SELECT 'KROK 5: Fin√°lne ≈°tatistiky...' as info;

-- Poƒçet stƒ∫pcov PO ƒçisten√≠
SELECT 
  'RENTALS TABUƒΩKA PO ƒåISTEN√ç' as info,
  COUNT(*) as pocet_stlpcov
FROM information_schema.columns 
WHERE table_name = 'rentals' AND table_schema = 'public';

-- Rozdelenie statusov
SELECT 
  'STATUS ROZDELENIE' as kategoria,
  status,
  COUNT(*) as pocet,
  ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM rentals), 1) as percento
FROM rentals 
GROUP BY status 
ORDER BY pocet DESC;

-- Flexibiln√© vs ≈°tandardn√© pren√°jmy
SELECT 
  'FLEXIBILN√â PREN√ÅJMY' as kategoria,
  CASE WHEN is_flexible THEN 'Flexibiln√©' ELSE '≈†tandardn√©' END as typ,
  COUNT(*) as pocet,
  ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM rentals), 1) as percento
FROM rentals 
GROUP BY is_flexible;

-- Reindex pre v√Ωkon
REINDEX TABLE rentals;
ANALYZE rentals;

SELECT 'üéâ DATAB√ÅZA √öSPE≈†NE VYƒåISTEN√Å!' as vysledok;

COMMIT; 