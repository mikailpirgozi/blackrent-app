/**
 * 游녻 CUSTOMER CARD COMPONENT
 *
 * Optimalizovan칳 customer card s React.memo pre lep코칤 performance
 */

import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  Phone as PhoneIcon,
  Email as EmailIcon,
  // Business as BusinessIcon, // TODO: Implement business icon
} from '@mui/icons-material';
import React, { memo, useCallback } from 'react';
import { Typography } from '../ui/typography';
import { Badge } from '../ui/badge';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '../ui/tooltip';

import type { Customer } from '../../types';

interface CustomerCardProps {
  customer: Customer;
  index: number;
  totalCustomers: number;
  onEdit: (customer: Customer) => void;
  onDelete: (id: string) => void;
  getCustomerRentalCount: (customerId: string) => number;
  isMobile?: boolean;
}

const CustomerCard = memo<CustomerCardProps>(
  ({
    customer,
    index,
    totalCustomers,
    onEdit,
    onDelete,
    getCustomerRentalCount,
    // isMobile = false, // TODO: Implement mobile-specific layout
  }) => {
    // const theme = useTheme(); // TODO: Implement theme-based styling

    // Memoized handlers
    const handleEdit = useCallback(() => onEdit(customer), [onEdit, customer]);
    const handleDelete = useCallback(
      () => onDelete(customer.id),
      [onDelete, customer.id]
    );

    const rentalCount = getCustomerRentalCount(customer.id);

    return (
      <div
        className={`flex min-h-[80px] cursor-pointer hover:bg-[#f8f9fa] ${
          index < totalCustomers - 1 ? 'border-b border-[#e0e0e0]' : ''
        }`}
        onClick={handleEdit}
      >
        {/* Customer Info - sticky left */}
        <div
          className="w-[140px] sm:w-[160px] max-w-[140px] sm:max-w-[160px] p-2 sm:p-3 border-r-2 border-[#e0e0e0] flex flex-col justify-center bg-white sticky left-0 z-10 overflow-hidden"
        >
          <Typography
            variant="subtitle2"
            className="font-semibold text-[0.75rem] sm:text-[0.8rem] text-[#1976d2] leading-tight break-words mb-0.5 sm:mb-1"
          >
            {customer.name}
          </Typography>
          <Typography
            variant="caption"
            className="text-muted-foreground text-[0.65rem] sm:text-[0.7rem] leading-tight"
          >
            {customer.email
              ? customer.email.substring(0, 20) +
                (customer.email.length > 20 ? '...' : '')
              : 'Bez emailu'}
          </Typography>
        </div>

        {/* Contact Info */}
        <div
          className="flex-1 p-2 sm:p-3 flex flex-col justify-center overflow-hidden"
        >
          <div className="flex items-center gap-2 mb-1">
            {customer.phone && (
              <div className="flex items-center gap-1">
                <PhoneIcon
                  className="text-[14px] sm:text-[16px] text-muted-foreground"
                />
                <Typography
                  variant="body2"
                  className="text-[0.7rem] sm:text-[0.75rem] text-foreground"
                >
                  {customer.phone}
                </Typography>
              </div>
            )}
            {customer.email && (
              <div className="flex items-center gap-1">
                <EmailIcon
                  className="text-[14px] sm:text-[16px] text-muted-foreground"
                />
                <Typography
                  variant="body2"
                  className="text-[0.7rem] sm:text-[0.75rem] text-foreground max-w-[120px] overflow-hidden text-ellipsis whitespace-nowrap"
                >
                  {customer.email}
                </Typography>
              </div>
            )}
          </div>

          {/* Company field removed - not in Customer type */}
        </div>

        {/* Rental Count */}
        <div
          className="w-[60px] sm:w-[80px] flex items-center justify-center border-r border-[#e0e0e0]"
        >
          <Badge
            className={`h-6 text-[0.7rem] sm:text-[0.75rem] font-semibold min-w-[28px] sm:min-w-[32px] ${
              rentalCount > 0 ? 'bg-blue-50 text-blue-700' : 'bg-gray-100 text-gray-600'
            }`}
            variant={rentalCount > 0 ? 'secondary' : 'outline'}
          >
            {rentalCount}
          </Badge>
        </div>

        {/* Actions */}
        <div
          className="w-[80px] sm:w-[100px] flex items-center justify-center gap-1"
        >
          <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
            <button
              className="w-8 h-8 sm:w-9 sm:h-9 flex items-center justify-center text-[#1976d2] hover:bg-blue-50 rounded-full transition-colors"
              onClick={e => {
                e.stopPropagation();
                handleEdit();
              }}
            >
              <EditIcon className="text-[20px]" />
            </button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Upravi콘 z치kazn칤ka</p>
            </TooltipContent>
          </Tooltip>
          </TooltipProvider>
          
          <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
            <button
              className="w-8 h-8 sm:w-9 sm:h-9 flex items-center justify-center text-[#d32f2f] hover:bg-red-50 rounded-full transition-colors"
              onClick={e => {
                e.stopPropagation();
                handleDelete();
              }}
            >
              <DeleteIcon className="text-[20px]" />
            </button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Zmaza콘 z치kazn칤ka</p>
            </TooltipContent>
          </Tooltip>
          </TooltipProvider>
        </div>
      </div>
    );
  }
);

CustomerCard.displayName = 'CustomerCard';

export default CustomerCard;