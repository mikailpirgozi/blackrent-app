import {
/* Tailwind classes used for styling */
  Add as AddIcon,
  Delete as DeleteIcon,
  Download as DownloadIcon,
  Edit as EditIcon,
  Email as EmailIcon,
  FilterList as FilterListIcon,
  History as HistoryIcon,
  Phone as PhoneIcon,
  Search as SearchIcon,
  Upload as UploadIcon,
} from '@mui/icons-material';
import { Button,
  Checkbox,
  Chip,
  CircularProgress,
  Collapse,
  Dialog,
  DialogContent,
  DialogTitle,
  Divider,
  FormControlLabel,
  FormGroup,
  Grid,
  IconButton,
  TextField,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import { format } from 'date-fns';
import { saveAs } from 'file-saver';
import Papa from 'papaparse';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';

// import { useApp } from '../../context/AppContext'; // ‚ùå REMOVED - migrated to React Query
import {
  useCreateCustomer,
  useCustomers,
  useDeleteCustomer,
  useUpdateCustomer,
} from '@/lib/react-query/hooks/useCustomers';
import {
  useRentals,
  useUpdateRental,
} from '@/lib/react-query/hooks/useRentals';
import { useVehicles } from '@/lib/react-query/hooks/useVehicles';
import type { Customer, Rental } from '../../types';
import { textContains } from '../../utils/textNormalization';
import { DefaultCard, PrimaryButton, SecondaryButton } from '../ui';

import CustomerForm from './CustomerForm';
import CustomerRentalHistory from './CustomerRentalHistory';

export default function CustomerListNew() {
  // ‚úÖ MIGRATED: React Query hooks instead of AppContext
  const { data: customers = [] } = useCustomers();
  const { data: rentals = [] } = useRentals();
  const { data: vehicles = [] } = useVehicles();
  const createCustomerMutation = useCreateCustomer();
  const updateCustomerMutation = useUpdateCustomer();
  const deleteCustomerMutation = useDeleteCustomer();
  const updateRentalMutation = useUpdateRental();

  // Helper functions for compatibility
  const createCustomer = async (customer: Customer) => {
    return createCustomerMutation.mutateAsync(customer);
  };
  const updateCustomer = async (customer: Customer) => {
    return updateCustomerMutation.mutateAsync(customer);
  };
  const deleteCustomer = async (id: string) => {
    return deleteCustomerMutation.mutateAsync(id);
  };
  const updateRental = async (rental: Rental) => {
    return updateRentalMutation.mutateAsync(rental);
  };
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // States
  const [searchQuery, setSearchQuery] = useState('');
  const [filtersOpen, setFiltersOpen] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [selectedCustomerForHistory, setSelectedCustomerForHistory] =
    useState<Customer | null>(null);
  const [loading, setLoading] = useState(false);

  // Filters
  const [filterName, setFilterName] = useState('');
  const [filterEmail, setFilterEmail] = useState('');
  const [filterPhone, setFilterPhone] = useState('');
  const [showWithEmail, setShowWithEmail] = useState(true);
  const [showWithoutEmail, setShowWithoutEmail] = useState(true);
  const [showWithPhone, setShowWithPhone] = useState(true);
  const [showWithoutPhone, setShowWithoutPhone] = useState(true);

  // üöÄ INFINITE SCROLL STATES
  const [displayedCustomers, setDisplayedCustomers] = useState(20); // Start with 20 items
  const [isLoadingMore, setIsLoadingMore] = useState(false);

  // Handlers
  const handleEdit = (customer: Customer) => {
    setEditingCustomer(customer);
    setOpenDialog(true);
  };

  const handleDelete = async (customerId: string) => {
    if (window.confirm('Naozaj chcete vymaza≈• tohto z√°kazn√≠ka?')) {
      try {
        setLoading(true);
        await deleteCustomer(customerId);
      } catch (error) {
        console.error('Error deleting customer:', error);
      } finally {
        setLoading(false);
      }
    }
  };

  const handleShowHistory = (customer: Customer) => {
    setSelectedCustomerForHistory(customer);
  };

  const handleCall = (phone: string) => {
    if (phone) {
      window.open(`tel:${phone}`, '_self');
    }
  };

  const handleEmail = (email: string) => {
    if (email) {
      window.open(`mailto:${email}`, '_self');
    }
  };

  // CSV funkcionalita
  const handleExportCSV = async () => {
    try {
      const { apiService } = await import('../../services/api');
      const blob = await apiService.exportCustomersCSV();
      const filename = `zakaznici-${new Date().toISOString().split('T')[0]}.csv`;
      saveAs(blob, filename);

      alert('CSV export √∫spe≈°n√Ω');
    } catch (error) {
      console.error('CSV export error:', error);
      alert('Chyba pri CSV exporte');
    }
  };

  const handleImportCSV = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    Papa.parse(file, {
      complete: async (results: { data: unknown[][] }) => {
        try {
          // Konvertuj parsovan√© d√°ta sp√§≈• na CSV string
          const csvString = Papa.unparse(results.data);

          const { apiService } = await import('../../services/api');
          const result = (await apiService.importCustomersCSV(csvString)) as {
            success: boolean;
            message?: string;
            error?: string;
          };

          if (result.success) {
            alert(result.message);
            // Refresh customer list - force reload
            window.location.reload();
          } else {
            alert(result.error || 'Chyba pri importe');
          }
        } catch (error) {
          console.error('CSV import error:', error);
          alert('Chyba pri CSV importe');
        }
      },
      header: false,
      skipEmptyLines: true,
    });

    // Reset input
    event.target.value = '';
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setEditingCustomer(null);
  };

  const handleSubmit = async (customerData: Customer) => {
    try {
      setLoading(true);
      if (editingCustomer) {
        await updateCustomer(customerData);
      } else {
        await createCustomer(customerData);
      }
      handleCloseDialog();
    } catch (error) {
      console.error('Error saving customer:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleImportExistingCustomers = async () => {
    try {
      setLoading(true);
      // Z√≠skam v≈°etk√Ωch unik√°tnych z√°kazn√≠kov z pren√°jmov
      const existingCustomerNames = Array.from(
        new Set(rentals.map(r => r.customerName).filter(Boolean))
      );

      // Filtrujem len tie, ktor√© e≈°te neexistuj√∫ v customers
      const newCustomerNames = existingCustomerNames.filter(
        name => !customers?.some(c => c.name === name)
      );

      if (newCustomerNames.length === 0) {
        alert('V≈°etci z√°kazn√≠ci z pren√°jmov u≈æ existuj√∫ v zozname z√°kazn√≠kov.');
        return;
      }

      // Vytvor√≠m nov√Ωch z√°kazn√≠kov
      const newCustomers = newCustomerNames.map(name => ({
        id: uuidv4(),
        name: name,
        email: '',
        phone: '',
        createdAt: new Date(),
      }));

      // Ulo≈æ√≠m ich do datab√°zy pomocou API
      for (const customer of newCustomers) {
        await createCustomer(customer);
      }

      // Prepoj√≠m existuj√∫ce pren√°jmy so z√°kazn√≠kmi
      for (const rental of rentals) {
        if (rental.customerName && !rental.customerId) {
          const customer =
            newCustomers.find(c => c.name === rental.customerName) ||
            (customers || []).find(c => c.name === rental.customerName);
          if (customer) {
            await updateRental({
              ...rental,
              customerId: customer.id,
              customer: customer,
            });
          }
        }
      }

      alert(
        `Pridan√Ωch ${newCustomers.length} z√°kazn√≠kov z existuj√∫cich pren√°jmov a prepojen√Ωch s pren√°jmi.`
      );
    } catch (error) {
      console.error('Chyba pri importe z√°kazn√≠kov:', error);
      alert('Chyba pri importe z√°kazn√≠kov');
    } finally {
      setLoading(false);
    }
  };

  // Filtered customers
  const filteredCustomers = useMemo(() => {
    return customers.filter(customer => {
      // Search filter
      if (searchQuery) {
        if (
          !textContains(customer.name, searchQuery) &&
          !textContains(customer.email, searchQuery) &&
          !textContains(customer.phone, searchQuery)
        ) {
          return false;
        }
      }

      // Name filter
      if (filterName && !textContains(customer.name, filterName)) {
        return false;
      }

      // Email filter
      if (filterEmail && !textContains(customer.email, filterEmail)) {
        return false;
      }

      // Phone filter
      if (filterPhone && !textContains(customer.phone, filterPhone)) {
        return false;
      }

      // Email/Phone existence filters
      const hasEmail = !!customer.email;
      const hasPhone = !!customer.phone;

      if (!showWithEmail && hasEmail) return false;
      if (!showWithoutEmail && !hasEmail) return false;
      if (!showWithPhone && hasPhone) return false;
      if (!showWithoutPhone && !hasPhone) return false;

      return true;
    });
  }, [
    customers,
    searchQuery,
    filterName,
    filterEmail,
    filterPhone,
    showWithEmail,
    showWithoutEmail,
    showWithPhone,
    showWithoutPhone,
  ]);

  // üöÄ INFINITE SCROLL LOGIC (after filteredCustomers definition)
  const loadMoreCustomers = useCallback(() => {
    if (isLoadingMore || displayedCustomers >= filteredCustomers.length) return;

    setIsLoadingMore(true);

    // Simulate loading delay for better UX
    setTimeout(() => {
      setDisplayedCustomers(prev =>
        Math.min(prev + 20, filteredCustomers.length)
      );
      setIsLoadingMore(false);
    }, 300);
  }, [isLoadingMore, displayedCustomers, filteredCustomers.length]);

  // Reset displayed count when filters change
  useEffect(() => {
    setDisplayedCustomers(20);
  }, [
    searchQuery,
    filterName,
    filterEmail,
    filterPhone,
    showWithEmail,
    showWithoutEmail,
    showWithPhone,
    showWithoutPhone,
  ]);

  // Infinite scroll event handler
  const handleScroll = useCallback(
    (e: React.UIEvent<HTMLDivElement>) => {
      const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;

      // Load more when user scrolls to 80% of the content
      if (scrollTop + clientHeight >= scrollHeight * 0.8) {
        loadMoreCustomers();
      }
    },
    [loadMoreCustomers]
  );

  // Get customers to display (limited by infinite scroll)
  const customersToDisplay = useMemo(() => {
    return filteredCustomers.slice(0, displayedCustomers);
  }, [filteredCustomers, displayedCustomers]);

  const hasMore = displayedCustomers < filteredCustomers.length;

  // Get customer rental count
  const getCustomerRentalCount = (customerId: string) => {
    return rentals.filter(rental => rental.customerId === customerId).length;
  };

  return (
    <div sx={{ p: { xs: 1, sm: 2, md: 3 } }}>
      {/* Header */}
      <div
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          mb: 3,
          flexDirection: { xs: 'column', sm: 'row' },
          gap: { xs: 2, sm: 0 },
        }}
      >
        <Typography
          variant="h4"
          sx={{
            fontWeight: 700,
            color: '#1976d2',
            fontSize: { xs: '1.5rem', sm: '2rem' },
          }}
        >
          üë• Datab√°za z√°kazn√≠kov
        </Typography>
        <div className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert flexWrap: wrap */">
          <SecondaryButton
            startIcon={<UploadIcon />}
            onClick={handleImportExistingCustomers}
            size="small"
            disabled={loading}
          >
            Import z pren√°jmov
          </SecondaryButton>
          {/* CSV tlaƒçidl√° - len na desktope */}
          {!isMobile && (
            <>
              <SecondaryButton
                startIcon={<DownloadIcon />}
                onClick={handleExportCSV}
                size="small"
              >
                üìä Export CSV
              </SecondaryButton>

              <SecondaryButton
                component="label"
                startIcon={<UploadIcon />}
                size="small"
                sx={{
                  borderColor: '#1976d2',
                  color: '#1976d2',
                  '&:hover': {
                    borderColor: '#1565c0',
                    bgcolor: 'rgba(25, 118, 210, 0.04)',
                  },
                }}
              >
                üì• Import CSV
                <input
                  type="file"
                  accept=".csv"
                  onChange={handleImportCSV}
                  style={{ display: 'none' }}
                />
              </SecondaryButton>
            </>
          )}

          <PrimaryButton
            startIcon={<AddIcon />}
            onClick={() => setOpenDialog(true)}
            className="/* TODO: Convert px: 3 */ /* TODO: Convert py: 1 */"
          >
            Nov√Ω z√°kazn√≠k
          </PrimaryButton>
        </div>
      </div>

      {/* Search and Filters */}
      <DefaultCard className="/* TODO: Convert mb: 3 */">
        {/* Search Bar */}
        <div className="/* TODO: Convert display: flex */ gap-4 /* TODO: Convert mb: 2 */ /* TODO: Convert alignItems: center */">
          <TextField
            fullWidth
            placeholder="Hƒæada≈• z√°kazn√≠kov..."
            value={searchQuery}
            onChange={e => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: <SearchIcon className="/* TODO: Convert color: #666 */ /* TODO: Convert mr: 1 */" />,
            }}
            className="/* TODO: Convert flex: 1 */"
          />
          <IconButton
            onClick={() => setFiltersOpen(!filtersOpen)}
            sx={{
              bgcolor: filtersOpen ? '#1976d2' : '#f5f5f5',
              color: filtersOpen ? 'white' : '#666',
              '&:hover': {
                bgcolor: filtersOpen ? '#1565c0' : '#e0e0e0',
              },
            }}
          >
            <FilterListIcon />
          </IconButton>
        </div>

        {/* Filters */}
        <Collapse in={filtersOpen}>
          <Divider className="/* TODO: Convert mb: 2 */" />
          <Grid container spacing={2}>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                size="small"
                label="Filter meno"
                value={filterName}
                onChange={e => setFilterName(e.target.value)}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                size="small"
                label="Filter email"
                value={filterEmail}
                onChange={e => setFilterEmail(e.target.value)}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                size="small"
                label="Filter telef√≥n"
                value={filterPhone}
                onChange={e => setFilterPhone(e.target.value)}
              />
            </Grid>
          </Grid>

          {/* Contact Info Checkboxes */}
          <div className="/* TODO: Convert mt: 2 */">
            <Typography variant="subtitle2" className="/* TODO: Convert mb: 1 */ /* TODO: Convert color: #666 */">
              Zobrazi≈• z√°kazn√≠kov:
            </Typography>
            <FormGroup row>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={showWithEmail}
                    onChange={e => setShowWithEmail(e.target.checked)}
                  />
                }
                label="S emailom"
              />
              <FormControlLabel
                control={
                  <Checkbox
                    checked={showWithoutEmail}
                    onChange={e => setShowWithoutEmail(e.target.checked)}
                  />
                }
                label="Bez emailu"
              />
              <FormControlLabel
                control={
                  <Checkbox
                    checked={showWithPhone}
                    onChange={e => setShowWithPhone(e.target.checked)}
                  />
                }
                label="S telef√≥nom"
              />
              <FormControlLabel
                control={
                  <Checkbox
                    checked={showWithoutPhone}
                    onChange={e => setShowWithoutPhone(e.target.checked)}
                  />
                }
                label="Bez telef√≥nu"
              />
            </FormGroup>
          </div>
        </Collapse>
      </DefaultCard>

      {/* Results Count */}
      <div className="/* TODO: Convert mb: 2 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4">
        <Typography variant="body2" color="text.secondary">
          Zobrazen√Ωch {customersToDisplay.length} z {filteredCustomers.length}{' '}
          z√°kazn√≠kov
          {filteredCustomers.length !== customers.length &&
            ` (filtrovan√Ωch z ${customers.length})`}
        </Typography>
        {isLoadingMore && (
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
            <CircularProgress size={16} />
            <Typography variant="body2" color="text.secondary">
              Naƒç√≠tavam ƒèal≈°√≠ch...
            </Typography>
          </div>
        )}
        {loading && <CircularProgress size={16} />}
      </div>

      {/* Customer List */}
      {isMobile ? (
        /* MOBILE CARDS VIEW */
        <DefaultCard
          padding="none"
          className="/* TODO: Convert overflow: hidden */ /* TODO: Convert boxShadow: 0 6px 20px rgba(0 */"
        >
          <div
            className="/* TODO: Convert maxHeight: 70vh */ /* TODO: Convert overflowY: auto */"
            onScroll={handleScroll}
          >
            {customersToDisplay.map((customer, index) => (
              <div
                key={customer.id}
                sx={{
                  display: 'flex',
                  borderBottom:
                    index < customersToDisplay.length - 1
                      ? '1px solid #e0e0e0'
                      : 'none',
                  '&:hover': { backgroundColor: '#f8f9fa' },
                  minHeight: 80,
                  cursor: 'pointer',
                }}
                onClick={() => handleEdit(customer)}
              >
                {/* Customer Info - sticky left */}
                <div
                  sx={{
                    width: { xs: 140, sm: 160 },
                    maxWidth: { xs: 140, sm: 160 },
                    p: { xs: 1, sm: 1.5 },
                    borderRight: '2px solid #e0e0e0',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    backgroundColor: '#ffffff',
                    position: 'sticky',
                    left: 0,
                    zIndex: 10,
                    overflow: 'hidden',
                  }}
                >
                  <Typography
                    variant="subtitle2"
                    sx={{
                      fontWeight: 600,
                      fontSize: { xs: '0.75rem', sm: '0.8rem' },
                      color: '#1976d2',
                      lineHeight: 1.2,
                      wordWrap: 'break-word',
                      mb: { xs: 0.25, sm: 0.5 },
                    }}
                  >
                    {customer.name}
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{
                      color: '#666',
                      fontSize: { xs: '0.6rem', sm: '0.65rem' },
                      mb: { xs: 0.25, sm: 0.5 },
                      fontWeight: 600,
                    }}
                  >
                    {getCustomerRentalCount(customer.id)} pren√°jmov
                  </Typography>
                  <Chip
                    size="small"
                    label={format(new Date(customer.createdAt), 'dd.MM.yyyy')}
                    sx={{
                      height: { xs: 18, sm: 20 },
                      fontSize: { xs: '0.55rem', sm: '0.6rem' },
                      bgcolor: '#e3f2fd',
                      color: '#1976d2',
                      fontWeight: 700,
                      minWidth: 'auto',
                      maxWidth: '100%',
                      overflow: 'hidden',
                    }}
                  />
                </div>

                {/* Customer Details - scrollable right */}
                <div
                  sx={{
                    flex: 1,
                    p: { xs: 1, sm: 1.5 },
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-between',
                    overflow: 'hidden',
                    minWidth: 0,
                  }}
                >
                  <div className="/* TODO: Convert overflow: hidden */">
                    <Typography
                      variant="subtitle2"
                      sx={{
                        fontWeight: 600,
                        fontSize: { xs: '0.75rem', sm: '0.8rem' },
                        color: '#333',
                        mb: { xs: 0.25, sm: 0.5 },
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap',
                      }}
                    >
                      üìß {customer.email || 'Nezadan√©'}
                    </Typography>
                    <Typography
                      variant="caption"
                      sx={{
                        color: '#666',
                        fontSize: { xs: '0.6rem', sm: '0.65rem' },
                        display: 'block',
                        mb: { xs: 0.25, sm: 0.5 },
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap',
                      }}
                    >
                      üì± {customer.phone || 'Nezadan√©'}
                    </Typography>
                  </div>

                  {/* Mobile Action Buttons */}
                  <div
                    sx={{
                      display: 'flex',
                      gap: { xs: 0.5, sm: 0.75 },
                      mt: { xs: 1, sm: 1.5 },
                      justifyContent: 'flex-start',
                      flexWrap: 'wrap',
                    }}
                  >
                    {/* Edit Button */}
                    <IconButton
                      size="small"
                      title="Upravi≈• z√°kazn√≠ka"
                      onClick={e => {
                        e.stopPropagation();
                        handleEdit(customer);
                      }}
                      sx={{
                        bgcolor: '#2196f3',
                        color: 'white',
                        width: { xs: 36, sm: 32 },
                        height: { xs: 36, sm: 32 },
                        '&:hover': {
                          bgcolor: '#1976d2',
                          transform: 'scale(1.1)',
                          boxShadow: '0 4px 12px rgba(33,150,243,0.4)',
                        },
                        transition: 'all 0.2s ease',
                      }}
                    >
                      <EditIcon fontSize="small" />
                    </IconButton>

                    {/* History Button */}
                    <IconButton
                      size="small"
                      title="Hist√≥ria pren√°jmov"
                      onClick={e => {
                        e.stopPropagation();
                        handleShowHistory(customer);
                      }}
                      sx={{
                        bgcolor: '#9c27b0',
                        color: 'white',
                        width: { xs: 36, sm: 32 },
                        height: { xs: 36, sm: 32 },
                        '&:hover': {
                          bgcolor: '#7b1fa2',
                          transform: 'scale(1.1)',
                          boxShadow: '0 4px 12px rgba(156,39,176,0.4)',
                        },
                        transition: 'all 0.2s ease',
                      }}
                    >
                      <HistoryIcon fontSize="small" />
                    </IconButton>

                    {/* Phone Button */}
                    {customer.phone && (
                      <IconButton
                        size="small"
                        title="Zavola≈•"
                        onClick={e => {
                          e.stopPropagation();
                          handleCall(customer.phone);
                        }}
                        sx={{
                          bgcolor: '#4caf50',
                          color: 'white',
                          width: { xs: 36, sm: 32 },
                          height: { xs: 36, sm: 32 },
                          '&:hover': {
                            bgcolor: '#388e3c',
                            transform: 'scale(1.1)',
                            boxShadow: '0 4px 12px rgba(76,175,80,0.4)',
                          },
                          transition: 'all 0.2s ease',
                        }}
                      >
                        <PhoneIcon fontSize="small" />
                      </IconButton>
                    )}

                    {/* Email Button */}
                    {customer.email && (
                      <IconButton
                        size="small"
                        title="Posla≈• email"
                        onClick={e => {
                          e.stopPropagation();
                          handleEmail(customer.email);
                        }}
                        sx={{
                          bgcolor: '#ff9800',
                          color: 'white',
                          width: { xs: 36, sm: 32 },
                          height: { xs: 36, sm: 32 },
                          '&:hover': {
                            bgcolor: '#f57c00',
                            transform: 'scale(1.1)',
                            boxShadow: '0 4px 12px rgba(255,152,0,0.4)',
                          },
                          transition: 'all 0.2s ease',
                        }}
                      >
                        <EmailIcon fontSize="small" />
                      </IconButton>
                    )}

                    {/* Delete Button */}
                    <IconButton
                      size="small"
                      title="Zmaza≈• z√°kazn√≠ka"
                      onClick={e => {
                        e.stopPropagation();
                        handleDelete(customer.id);
                      }}
                      sx={{
                        bgcolor: '#f44336',
                        color: 'white',
                        width: { xs: 36, sm: 32 },
                        height: { xs: 36, sm: 32 },
                        '&:hover': {
                          bgcolor: '#d32f2f',
                          transform: 'scale(1.1)',
                          boxShadow: '0 4px 12px rgba(244,67,54,0.4)',
                        },
                        transition: 'all 0.2s ease',
                      }}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </div>
                </div>
              </div>
            ))}

            {/* üöÄ INFINITE SCROLL: Load More Button */}
            {hasMore && (
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ p-6 /* TODO: Convert borderTop: 1px solid #e0e0e0 */"
              >
                <Button
                  variant="outlined"
                  onClick={loadMoreCustomers}
                  disabled={isLoadingMore}
                  className="/* TODO: Convert minWidth: 200 */ /* TODO: Convert py: 1.5 */ /* TODO: Convert borderRadius: 3 */ /* TODO: Convert textTransform: none */ /* TODO: Convert fontSize: 1rem */ /* TODO: Convert fontWeight: 600 */"
                >
                  {isLoadingMore
                    ? 'Naƒç√≠tavam...'
                    : `Naƒç√≠ta≈• ƒèal≈°√≠ch (${filteredCustomers.length - displayedCustomers} zost√°va)`}
                </Button>
              </div>
            )}
          </div>
        </DefaultCard>
      ) : (
        /* DESKTOP TABLE VIEW */
        <DefaultCard
          padding="none"
          className="/* TODO: Convert overflow: hidden */ /* TODO: Convert boxShadow: 0 6px 20px rgba(0 */"
        >
          {/* Desktop Header */}
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert bgcolor: #f8f9fa */ /* TODO: Convert borderBottom: 2px solid #e0e0e0 */ /* TODO: Convert position: sticky */ /* TODO: Convert top: 0 */ /* TODO: Convert zIndex: 100 */ /* TODO: Convert minHeight: 56 */"
          >
            {/* Z√°kazn√≠k column */}
            <div
              className="/* TODO: Convert width: 200 */ /* TODO: Convert minWidth: 200 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
            >
              <Typography
                variant="subtitle2"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #333 */"
              >
                üë§ Z√°kazn√≠k
              </Typography>
            </div>

            {/* Email column */}
            <div
              className="/* TODO: Convert width: 220 */ /* TODO: Convert minWidth: 220 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
            >
              <Typography
                variant="subtitle2"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #333 */"
              >
                üìß Email
              </Typography>
            </div>

            {/* Telef√≥n column */}
            <div
              className="/* TODO: Convert width: 140 */ /* TODO: Convert minWidth: 140 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
            >
              <Typography
                variant="subtitle2"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #333 */"
              >
                üì± Telef√≥n
              </Typography>
            </div>

            {/* Pren√°jmy column */}
            <div
              className="/* TODO: Convert width: 120 */ /* TODO: Convert minWidth: 120 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
            >
              <Typography
                variant="subtitle2"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #333 */"
              >
                üöó Pren√°jmy
              </Typography>
            </div>

            {/* Vytvoren√Ω column */}
            <div
              className="/* TODO: Convert width: 140 */ /* TODO: Convert minWidth: 140 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
            >
              <Typography
                variant="subtitle2"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #333 */"
              >
                üìÖ Vytvoren√Ω
              </Typography>
            </div>

            {/* Akcie column */}
            <div
              className="/* TODO: Convert width: 180 */ /* TODO: Convert minWidth: 180 */ p-4 /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */"
            >
              <Typography
                variant="subtitle2"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #333 */"
              >
                ‚ö° Akcie
              </Typography>
            </div>
          </div>

          {/* Desktop Customer Rows */}
          <div
            className="/* TODO: Convert maxHeight: 70vh */ /* TODO: Convert overflowY: auto */"
            onScroll={handleScroll}
          >
            {customersToDisplay.map((customer, index) => (
              <div
                key={customer.id}
                sx={{
                  display: 'flex',
                  borderBottom:
                    index < customersToDisplay.length - 1
                      ? '1px solid #e0e0e0'
                      : 'none',
                  '&:hover': { backgroundColor: '#f8f9fa' },
                  minHeight: 72,
                  cursor: 'pointer',
                }}
                onClick={() => handleEdit(customer)}
              >
                {/* Z√°kazn√≠k column */}
                <div
                  className="/* TODO: Convert width: 200 */ /* TODO: Convert minWidth: 200 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ /* TODO: Convert justifyContent: center */"
                >
                  <Typography
                    variant="subtitle2"
                    className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #1976d2 */ /* TODO: Convert mb: 0.5 */"
                  >
                    {customer.name}
                  </Typography>
                  <Typography
                    variant="caption"
                    className="/* TODO: Convert color: #666 */ /* TODO: Convert fontSize: 0.7rem */"
                  >
                    ID: {customer.id.slice(0, 8)}...
                  </Typography>
                </div>

                {/* Email column */}
                <div
                  className="/* TODO: Convert width: 220 */ /* TODO: Convert minWidth: 220 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                >
                  <Typography
                    variant="body2"
                    className="/* TODO: Convert color: customer.email ? #333 : #999 */ /* TODO: Convert overflow: hidden */ /* TODO: Convert textOverflow: ellipsis */ /* TODO: Convert whiteSpace: nowrap */ /* TODO: Convert fontStyle: customer.email ? normal : italic */"
                  >
                    {customer.email || 'Nezadan√©'}
                  </Typography>
                </div>

                {/* Telef√≥n column */}
                <div
                  className="/* TODO: Convert width: 140 */ /* TODO: Convert minWidth: 140 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                >
                  <Typography
                    variant="body2"
                    className="/* TODO: Convert color: customer.phone ? #333 : #999 */ /* TODO: Convert fontFamily: customer.phone ? monospace : inherit */ /* TODO: Convert fontStyle: customer.phone ? normal : italic */"
                  >
                    {customer.phone || 'Nezadan√©'}
                  </Typography>
                </div>

                {/* Pren√°jmy column */}
                <div
                  className="/* TODO: Convert width: 120 */ /* TODO: Convert minWidth: 120 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */"
                >
                  <Chip
                    size="small"
                    label={getCustomerRentalCount(customer.id)}
                    className="/* TODO: Convert height: 24 */ /* TODO: Convert fontSize: 0.7rem */ /* TODO: Convert bgcolor:
                        getCustomerRentalCount(customer.id) > 0
                          ? #4caf50
                          : #e0e0e0 */ /* TODO: Convert color:
                        getCustomerRentalCount(customer.id) > 0
                          ? white
                          : #666 */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert minWidth: 40 */"
                  />
                </div>

                {/* Vytvoren√Ω column */}
                <div
                  className="/* TODO: Convert width: 140 */ /* TODO: Convert minWidth: 140 */ p-4 /* TODO: Convert borderRight: 1px solid #e0e0e0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                >
                  <Typography
                    variant="body2"
                    className="/* TODO: Convert color: #666 */ /* TODO: Convert fontSize: 0.8rem */"
                  >
                    {format(new Date(customer.createdAt), 'dd.MM.yyyy')}
                  </Typography>
                </div>

                {/* Akcie column */}
                <div
                  className="/* TODO: Convert width: 180 */ /* TODO: Convert minWidth: 180 */ p-4 /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ gap-1"
                >
                  {/* Edit Button */}
                  <IconButton
                    size="small"
                    title="Upravi≈• z√°kazn√≠ka"
                    onClick={e => {
                      e.stopPropagation();
                      handleEdit(customer);
                    }}
                    sx={{
                      bgcolor: '#2196f3',
                      color: 'white',
                      width: 28,
                      height: 28,
                      '&:hover': {
                        bgcolor: '#1976d2',
                        transform: 'scale(1.1)',
                        boxShadow: '0 4px 12px rgba(33,150,243,0.4)',
                      },
                      transition: 'all 0.2s ease',
                    }}
                  >
                    <EditIcon fontSize="small" />
                  </IconButton>

                  {/* History Button */}
                  <IconButton
                    size="small"
                    title="Hist√≥ria pren√°jmov"
                    onClick={e => {
                      e.stopPropagation();
                      handleShowHistory(customer);
                    }}
                    sx={{
                      bgcolor: '#9c27b0',
                      color: 'white',
                      width: 28,
                      height: 28,
                      '&:hover': {
                        bgcolor: '#7b1fa2',
                        transform: 'scale(1.1)',
                        boxShadow: '0 4px 12px rgba(156,39,176,0.4)',
                      },
                      transition: 'all 0.2s ease',
                    }}
                  >
                    <HistoryIcon fontSize="small" />
                  </IconButton>

                  {/* Phone Button */}
                  {customer.phone && (
                    <IconButton
                      size="small"
                      title="Zavola≈•"
                      onClick={e => {
                        e.stopPropagation();
                        handleCall(customer.phone);
                      }}
                      sx={{
                        bgcolor: '#4caf50',
                        color: 'white',
                        width: 28,
                        height: 28,
                        '&:hover': {
                          bgcolor: '#388e3c',
                          transform: 'scale(1.1)',
                          boxShadow: '0 4px 12px rgba(76,175,80,0.4)',
                        },
                        transition: 'all 0.2s ease',
                      }}
                    >
                      <PhoneIcon fontSize="small" />
                    </IconButton>
                  )}

                  {/* Email Button */}
                  {customer.email && (
                    <IconButton
                      size="small"
                      title="Posla≈• email"
                      onClick={e => {
                        e.stopPropagation();
                        handleEmail(customer.email);
                      }}
                      sx={{
                        bgcolor: '#ff9800',
                        color: 'white',
                        width: 28,
                        height: 28,
                        '&:hover': {
                          bgcolor: '#f57c00',
                          transform: 'scale(1.1)',
                          boxShadow: '0 4px 12px rgba(255,152,0,0.4)',
                        },
                        transition: 'all 0.2s ease',
                      }}
                    >
                      <EmailIcon fontSize="small" />
                    </IconButton>
                  )}

                  {/* Delete Button */}
                  <IconButton
                    size="small"
                    title="Zmaza≈• z√°kazn√≠ka"
                    onClick={e => {
                      e.stopPropagation();
                      handleDelete(customer.id);
                    }}
                    sx={{
                      bgcolor: '#f44336',
                      color: 'white',
                      width: 28,
                      height: 28,
                      '&:hover': {
                        bgcolor: '#d32f2f',
                        transform: 'scale(1.1)',
                        boxShadow: '0 4px 12px rgba(244,67,54,0.4)',
                      },
                      transition: 'all 0.2s ease',
                    }}
                  >
                    <DeleteIcon fontSize="small" />
                  </IconButton>
                </div>
              </div>
            ))}

            {/* üöÄ INFINITE SCROLL: Load More Button */}
            {hasMore && (
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ p-6 /* TODO: Convert borderTop: 1px solid #e0e0e0 */"
              >
                <Button
                  variant="outlined"
                  onClick={loadMoreCustomers}
                  disabled={isLoadingMore}
                  className="/* TODO: Convert minWidth: 200 */ /* TODO: Convert py: 1.5 */ /* TODO: Convert borderRadius: 3 */ /* TODO: Convert textTransform: none */ /* TODO: Convert fontSize: 1rem */ /* TODO: Convert fontWeight: 600 */"
                >
                  {isLoadingMore
                    ? 'Naƒç√≠tavam...'
                    : `Naƒç√≠ta≈• ƒèal≈°√≠ch (${filteredCustomers.length - displayedCustomers} zost√°va)`}
                </Button>
              </div>
            )}
          </div>
        </DefaultCard>
      )}

      {/* Customer Form Dialog */}
      <Dialog
        open={openDialog}
        onClose={handleCloseDialog}
        maxWidth="md"
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle>
          {editingCustomer ? 'Upravi≈• z√°kazn√≠ka' : 'Nov√Ω z√°kazn√≠k'}
        </DialogTitle>
        <DialogContent>
          <CustomerForm
            customer={editingCustomer}
            onSave={handleSubmit}
            onCancel={handleCloseDialog}
          />
        </DialogContent>
      </Dialog>

      {/* Customer History Dialog */}
      {selectedCustomerForHistory && (
        <CustomerRentalHistory
          open={!!selectedCustomerForHistory}
          customer={selectedCustomerForHistory}
          rentals={rentals}
          vehicles={vehicles}
          onClose={() => setSelectedCustomerForHistory(null)}
        />
      )}
    </div>
  );
}
