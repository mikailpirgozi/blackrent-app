import {
/* Tailwind classes used for styling */
  Calculate,
  Cancel,
  Check,
  Close,
  DirectionsCar,
  Edit,
  LocationOn,
  Person,
  PhotoCamera,
  Save,
  SpeedOutlined,
} from '@mui/icons-material';
import { Alert, Button,
  Card,
  CardContent,
  Chip,
  // CircularProgress, // REMOVED - not needed with React Query
  Grid,
  IconButton,
  LinearProgress,
  TextField,
  Typography, } from '@mui/material';
import { useCallback, useEffect, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';

import { useAuth } from '../../context/AuthContext';
import { useCreateReturnProtocol } from '../../lib/react-query/hooks/useProtocols';
import type {
  Customer,
  HandoverProtocol,
  ProtocolImage,
  ProtocolSignature,
  ProtocolVideo,
  Rental,
  ReturnProtocol,
  Vehicle,
} from '../../types';
// import { getApiBaseUrl } from '../../utils/apiUrl'; // REMOVED - React Query handles API calls
import SerialPhotoCapture from '../common/SerialPhotoCapture';
import SignaturePad from '../common/SignaturePad';

interface ReturnProtocolFormProps {
  open: boolean;
  onClose: () => void;
  rental: Rental;
  handoverProtocol: HandoverProtocol;
  onSave: (protocol: ReturnProtocol) => void;
}

export default function ReturnProtocolForm({
  open,
  onClose,
  rental,
  handoverProtocol,
  onSave,
}: ReturnProtocolFormProps) {
  const { state } = useAuth();
  const createReturnProtocol = useCreateReturnProtocol();

  // Loading state z React Query
  const isLoading = createReturnProtocol.isPending;
  const [emailStatus, setEmailStatus] = useState<{
    status: 'pending' | 'success' | 'error' | 'warning';
    message?: string;
  } | null>(null);
  const [activePhotoCapture, setActivePhotoCapture] = useState<string | null>(
    null
  );
  const [showSignaturePad, setShowSignaturePad] = useState(false);
  const [currentSigner, setCurrentSigner] = useState<{
    name: string;
    role: 'customer' | 'employee';
  } | null>(null);

  // Retry mechanism state - REMOVED (React Query handles retries automatically)

  // üîß NOV√â: Edit√°cia ceny za km
  const [isEditingKmRate, setIsEditingKmRate] = useState(false);
  const [customKmRate, setCustomKmRate] = useState<number | null>(null);
  const [originalKmRate, setOriginalKmRate] = useState<number>(0);

  // Zjednodu≈°en√Ω state s bezpeƒçn√Ωm pr√≠stupom k handoverProtocol
  const [formData, setFormData] = useState({
    location: '',
    odometer: handoverProtocol?.vehicleCondition?.odometer || undefined,
    fuelLevel: 100,
    fuelType: handoverProtocol?.vehicleCondition?.fuelType || 'gasoline',
    exteriorCondition: 'Dobr√Ω',
    interiorCondition: 'Dobr√Ω',
    notes: '',
    vehicleImages: [] as ProtocolImage[],
    documentImages: [] as ProtocolImage[],
    damageImages: [] as ProtocolImage[],
    vehicleVideos: [] as ProtocolVideo[],
    documentVideos: [] as ProtocolVideo[],
    damageVideos: [] as ProtocolVideo[],
    signatures: [] as ProtocolSignature[],
  });

  // Automatick√© v√Ωpoƒçty
  const [fees, setFees] = useState({
    kilometersUsed: 0,
    kilometerOverage: 0,
    kilometerFee: 0,
    fuelUsed: 0,
    fuelFee: 0,
    totalExtraFees: 0,
    depositRefund: 0,
    additionalCharges: 0,
    finalRefund: 0,
  });

  const calculateFees = useCallback(() => {
    const currentOdometer = formData.odometer || 0;
    const startingOdometer = handoverProtocol?.vehicleCondition?.odometer || 0;
    const allowedKm = rental.allowedKilometers || 0;
    const baseExtraKmRate = rental.extraKilometerRate || 0.5;
    const depositAmount = rental.deposit || 0;

    // üîß NOV√â: Pou≈æi≈• vlastn√∫ cenu za km ak je nastaven√°, inak cenn√≠kov√∫
    const extraKmRate = customKmRate !== null ? customKmRate : baseExtraKmRate;

    // Ulo≈æi≈• p√¥vodn√∫ cenn√≠kov√∫ sadzbu pri prvom naƒç√≠tan√≠
    if (originalKmRate === 0 && baseExtraKmRate > 0) {
      setOriginalKmRate(baseExtraKmRate);
    }

    // V√Ωpoƒçet najazden√Ωch km
    const kilometersUsed = Math.max(0, currentOdometer - startingOdometer);

    // V√Ωpoƒçet prekroƒçenia km
    const kilometerOverage =
      allowedKm > 0 ? Math.max(0, kilometersUsed - allowedKm) : 0;
    const kilometerFee = kilometerOverage * extraKmRate;

    // V√Ωpoƒçet spotreby paliva
    const startingFuel = handoverProtocol?.vehicleCondition?.fuelLevel || 100;
    const currentFuel = formData.fuelLevel;
    const fuelUsed = Math.max(0, startingFuel - currentFuel);
    const fuelFee = fuelUsed * 0.02; // 2 centy za %

    // Celkov√© poplatky
    const totalExtraFees = kilometerFee + fuelFee;

    // V√Ωpoƒçet refundu
    const depositRefund = Math.max(0, depositAmount - totalExtraFees);
    const additionalCharges = Math.max(0, totalExtraFees - depositAmount);
    const finalRefund = depositRefund;

    setFees({
      kilometersUsed,
      kilometerOverage,
      kilometerFee,
      fuelUsed,
      fuelFee,
      totalExtraFees,
      depositRefund,
      additionalCharges,
      finalRefund,
    });
  }, [
    formData.odometer,
    formData.fuelLevel,
    handoverProtocol?.vehicleCondition?.odometer,
    handoverProtocol?.vehicleCondition?.fuelLevel,
    rental.allowedKilometers,
    rental.extraKilometerRate,
    rental.deposit,
    customKmRate,
    originalKmRate,
  ]);

  // Prepoƒç√≠taj poplatky pri zmene
  useEffect(() => {
    calculateFees();
  }, [calculateFees]);

  // üîß NOV√â: Funkcie pre edit√°ciu ceny za km
  const handleStartEditKmRate = () => {
    setIsEditingKmRate(true);
    setCustomKmRate(
      customKmRate !== null ? customKmRate : rental.extraKilometerRate || 0.5
    );
  };

  const handleSaveKmRate = () => {
    setIsEditingKmRate(false);
    // customKmRate zostane nastaven√© a pou≈æije sa v calculateFees
  };

  const handleCancelEditKmRate = () => {
    setIsEditingKmRate(false);
    setCustomKmRate(null); // Vr√°ti sa na cenn√≠kov√∫ sadzbu
  };

  const handleKmRateChange = (value: string) => {
    const numValue = parseFloat(value);
    if (!isNaN(numValue) && numValue >= 0) {
      setCustomKmRate(numValue);
    }
  };

  // üîß NOV√â: Parsovanie sp√¥sobu √∫hrady depozitu z handoverProtocol notes
  const getDepositPaymentMethod = useCallback(() => {
    if (!handoverProtocol?.notes) return null;

    const notes = handoverProtocol.notes;
    const depositMatch = notes.match(/Sp√¥sob √∫hrady depozitu:\s*(.+)/);

    if (depositMatch) {
      const method = depositMatch[1].trim();
      switch (method) {
        case 'Hotovos≈•':
          return 'cash';
        case 'Bankov√Ω prevod':
          return 'bank_transfer';
        case 'Kartov√° z√°bezpeka':
          return 'card';
        default:
          return null;
      }
    }

    return null;
  }, [handoverProtocol?.notes]);

  // üîß NOV√â: Form√°tovanie sp√¥sobu √∫hrady depozitu pre zobrazenie
  const formatDepositPaymentMethod = useCallback((method: string | null) => {
    if (!method) return 'Neuveden√©';

    switch (method) {
      case 'cash':
        return 'Hotovos≈•';
      case 'bank_transfer':
        return 'Bankov√Ω prevod';
      case 'card':
        return 'Kartov√° z√°bezpeka';
      default:
        return 'Neuveden√©';
    }
  }, []);

  if (!open) return null;

  // Valid√°cia handoverProtocol
  if (!handoverProtocol) {
    console.error('‚ùå ReturnProtocolForm: handoverProtocol is undefined');
    return (
      <div className="p-6">
        <Alert severity="error">
          Chyba: Odovzd√°vac√≠ protokol nebol n√°jden√Ω. Pros√≠m, zatvorte a sk√∫ste
          to znovu.
        </Alert>
        <Button onClick={onClose} className="/* TODO: Convert mt: 2 */">
          Zatvori≈•
        </Button>
      </div>
    );
  }

  const handleInputChange = (field: string, value: unknown) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handlePhotoCaptureSuccess = (
    mediaType: string,
    images: ProtocolImage[],
    videos: ProtocolVideo[]
  ) => {
    setFormData(prev => ({
      ...prev,
      [`${mediaType}Images`]: images,
      [`${mediaType}Videos`]: videos,
    }));
    setActivePhotoCapture(null);
  };

  const handleAddSignature = (
    signerName: string,
    signerRole: 'customer' | 'employee'
  ) => {
    const isDevelopment = process.env.NODE_ENV === 'development';

    if (isDevelopment) {
      console.log('Adding signature:', { signerName, signerRole });
    }

    setCurrentSigner({ name: signerName, role: signerRole });
    setShowSignaturePad(true);
  };

  const handleSignatureSave = (signatureData: ProtocolSignature) => {
    setFormData(prev => ({
      ...prev,
      signatures: [...prev.signatures, signatureData],
    }));
    setShowSignaturePad(false);
    setCurrentSigner(null);
  };

  const handleRemoveSignature = (signatureId: string) => {
    setFormData(prev => ({
      ...prev,
      signatures: prev.signatures.filter(sig => sig.id !== signatureId),
    }));
  };

  // performSave funkcia bola nahraden√° React Query mutation v handleSave

  // Retry mechanism for failed requests

  const handleSave = async () => {
    // Valid√°cia
    if (!formData.location) {
      setEmailStatus({
        status: 'error',
        message: '‚ùå Miesto vr√°tenia nie je vyplnen√©',
      });
      return;
    }

    try {
      setEmailStatus({
        status: 'pending',
        message: 'Odosielam protokol a email...',
      });

      // Vytvorenie protokolu podƒæa spr√°vnej ReturnProtocol ≈°trukt√∫ry
      const protocol: ReturnProtocol = {
        id: uuidv4(),
        rentalId: rental.id,
        rental: rental,
        handoverProtocolId: handoverProtocol.id,
        handoverProtocol: handoverProtocol,
        type: 'return',
        status: 'completed',
        createdAt: new Date(),
        completedAt: new Date(),
        location: formData.location,
        vehicleCondition: {
          odometer: formData.odometer || 0,
          fuelLevel: formData.fuelLevel,
          fuelType: formData.fuelType,
          exteriorCondition: formData.exteriorCondition,
          interiorCondition: formData.interiorCondition,
          notes: formData.notes,
        },
        vehicleImages: formData.vehicleImages,
        documentImages: formData.documentImages,
        damageImages: formData.damageImages,
        vehicleVideos: formData.vehicleVideos,
        documentVideos: formData.documentVideos,
        damageVideos: formData.damageVideos,
        signatures: formData.signatures,
        damages: [],
        newDamages: [],
        // Kilometer calculations
        kilometersUsed: Math.max(
          0,
          (formData.odometer || 0) -
            (handoverProtocol?.vehicleCondition?.odometer || 0)
        ),
        kilometerOverage: Math.max(
          0,
          (formData.odometer || 0) -
            (handoverProtocol?.vehicleCondition?.odometer || 0) -
            (rental.allowedKilometers || 0)
        ),
        kilometerFee:
          (customKmRate || originalKmRate) *
          Math.max(
            0,
            (formData.odometer || 0) -
              (handoverProtocol?.vehicleCondition?.odometer || 0) -
              (rental.allowedKilometers || 0)
          ),
        // Fuel calculations
        fuelUsed: Math.max(
          0,
          (handoverProtocol?.vehicleCondition?.fuelLevel || 100) -
            formData.fuelLevel
        ),
        fuelFee: 0, // Bude vypoƒç√≠tan√© nesk√¥r
        totalExtraFees:
          (customKmRate || originalKmRate) *
          Math.max(
            0,
            (formData.odometer || 0) -
              (handoverProtocol?.vehicleCondition?.odometer || 0) -
              (rental.allowedKilometers || 0)
          ),
        // Refund calculations
        depositRefund: rental.deposit || 0,
        additionalCharges: 0,
        finalRefund: rental.deposit || 0,
        // Rental data snapshot
        rentalData: {
          orderNumber: rental.orderNumber || '',
          vehicle: rental.vehicle || ({} as Vehicle),
          vehicleVin: rental.vehicleVin,
          customer: rental.customer || ({} as Customer),
          startDate: rental.startDate as Date,
          endDate: rental.endDate as Date,
          totalPrice: rental.totalPrice,
          deposit: rental.deposit || 0,
          currency: 'EUR',
          allowedKilometers: rental.allowedKilometers || 0,
          extraKilometerRate: rental.extraKilometerRate || 0,
          returnConditions: rental.returnConditions,
        },
        // Creator info
        createdBy: state.user
          ? `${state.user.firstName || ''} ${state.user.lastName || ''}`.trim() ||
            state.user.username
          : 'admin',
      };

      // Pou≈æitie React Query mutation
      await createReturnProtocol.mutateAsync(protocol);

      // Automatick√Ω refresh - NETREBA! React Query to sprav√≠ automaticky

      // Success callback
      onSave(protocol);

      setEmailStatus({
        status: 'success',
        message: '‚úÖ Protokol bol √∫spe≈°ne ulo≈æen√Ω',
      });

      // Poƒçk√°me 2 sekundy pred zatvoren√≠m
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (error) {
      console.error('‚ùå Error saving return protocol:', error);
      setEmailStatus({
        status: 'error',
        message: `‚ùå Chyba pri ukladan√≠ protokolu: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
    }
  };

  return (
    <div
      className="/* TODO: Convert width: 100% */ /* TODO: Convert maxWidth: 100% */"
    >
      {/* Email Status */}
      {(isLoading || emailStatus?.status === 'pending') && (
        <div className="/* TODO: Convert mb: 2 */">
          <LinearProgress />
          <Typography variant="body2" className="/* TODO: Convert mt: 1 */ /* TODO: Convert textAlign: center */">
            {isLoading ? '‚ö° Uklad√°m protokol...' : emailStatus?.message}
          </Typography>
        </div>
      )}

      {emailStatus && emailStatus.status !== 'pending' && (
        <Alert
          severity={
            emailStatus.status === 'success'
              ? 'success'
              : emailStatus.status === 'warning'
                ? 'warning'
                : 'error'
          }
          className="/* TODO: Convert mb: 2 */ /* TODO: Convert position: sticky */ /* TODO: Convert top: 0 */ /* TODO: Convert zIndex: 1000 */ /* TODO: Convert animation: fadeIn 0.3s ease-in */"
        >
          {emailStatus.message}
        </Alert>
      )}

      {/* React Query handles retries automatically */}

      {/* Header */}
      <div
        className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ /* TODO: Convert mb: 3 */"
      >
        <div>
          <Typography variant="h5" color="text.primary">
            Preberac√≠ protokol - {rental.vehicle?.licensePlate || 'Vozidlo'}
          </Typography>
          {(rental.vehicleVin || rental.vehicle?.vin) && (
            <Typography
              variant="caption"
              className="/* TODO: Convert color: #888 */ /* TODO: Convert fontFamily: monospace */ /* TODO: Convert display: block */"
            >
              VIN: {rental.vehicleVin || rental.vehicle?.vin}
            </Typography>
          )}
        </div>
        <IconButton onClick={onClose} size="large">
          <Close />
        </IconButton>
      </div>

      {isLoading && (
        <div className="/* TODO: Convert mb: 2 */">
          <LinearProgress />
          <Typography variant="body2" color="text.secondary" className="/* TODO: Convert mt: 1 */">
            Uklad√°m protokol...
          </Typography>
        </div>
      )}

      {/* Info o preberacom protokole */}
      {handoverProtocol && (
        <Alert severity="info" className="/* TODO: Convert mb: 3 */">
          Navz√§uje na odovzd√°vac√≠ protokol #
          {handoverProtocol.id?.slice(-8) || 'N/A'} z{' '}
          {handoverProtocol.createdAt
            ? new Date(handoverProtocol.createdAt).toLocaleString('sk-SK')
            : 'N/A'}
        </Alert>
      )}

      {/* Inform√°cie o vozidle */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert backgroundColor: background.paper */">
        <CardContent>
          <Typography variant="h6" color="text.primary" className="/* TODO: Convert mb: 2 */">
            <DirectionsCar className="/* TODO: Convert mr: 1 */ /* TODO: Convert verticalAlign: middle */" />
            Inform√°cie o vozidle
          </Typography>

          <Grid container spacing={2}>
            <Grid item xs={12} sm={6} md={6}>
              <Typography variant="subtitle2" color="text.secondary">
                Znaƒçka a model
              </Typography>
              <Typography
                variant="body1"
                color="text.primary"
                className="/* TODO: Convert fontWeight: bold */"
              >
                {rental.vehicle?.brand} {rental.vehicle?.model}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6} md={6}>
              <Typography variant="subtitle2" color="text.secondary">
                ≈†PZ
              </Typography>
              <Chip
                label={rental.vehicle?.licensePlate || 'Neuveden√©'}
                color="secondary"
                variant="outlined"
                className="/* TODO: Convert fontWeight: bold */"
              />
            </Grid>
            {(rental.vehicleVin || rental.vehicle?.vin) && (
              <Grid item xs={12} sm={6} md={6}>
                <Typography variant="subtitle2" color="text.secondary">
                  VIN ƒç√≠slo
                </Typography>
                <Chip
                  label={
                    rental.vehicleVin || rental.vehicle?.vin || 'Neuveden√©'
                  }
                  color="default"
                  variant="outlined"
                  className="/* TODO: Convert fontWeight: bold */ /* TODO: Convert fontFamily: monospace */ /* TODO: Convert fontSize: 0.75rem */"
                />
              </Grid>
            )}
            <Grid item xs={12} sm={6} md={6}>
              <Typography variant="subtitle2" color="text.secondary">
                Stav vozidla
              </Typography>
              <Chip
                label={rental.vehicle?.status || 'available'}
                color={
                  rental.vehicle?.status === 'available' ? 'success' : 'warning'
                }
                variant="outlined"
              />
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Z√°kladn√© inform√°cie */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert backgroundColor: background.paper */">
        <CardContent>
          <Typography variant="h6" color="text.primary" className="/* TODO: Convert mb: 2 */">
            <LocationOn className="/* TODO: Convert mr: 1 */ /* TODO: Convert verticalAlign: middle */" />
            Z√°kladn√© inform√°cie
          </Typography>

          <div
            className="/* TODO: Convert display: grid */ /* TODO: Convert gridTemplateColumns: repeat(auto-fit */ gap-4"
          >
            <TextField
              label="Miesto vr√°tenia *"
              value={formData.location}
              onChange={e => handleInputChange('location', e.target.value)}
              fullWidth
              required
            />
            <TextField
              label="Pozn√°mky"
              value={formData.notes}
              onChange={e => handleInputChange('notes', e.target.value)}
              fullWidth
              multiline
              rows={2}
            />
          </div>
        </CardContent>
      </Card>

      {/* Stav vozidla */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert backgroundColor: background.paper */">
        <CardContent>
          <Typography variant="h6" color="text.primary" className="/* TODO: Convert mb: 2 */">
            <SpeedOutlined className="/* TODO: Convert mr: 1 */ /* TODO: Convert verticalAlign: middle */" />
            Stav vozidla pri vr√°ten√≠
          </Typography>

          {handoverProtocol?.vehicleCondition && (
            <Alert severity="info" className="/* TODO: Convert mb: 2 */">
              Pri preberan√≠:{' '}
              {handoverProtocol.vehicleCondition.odometer || 'N/A'} km,{' '}
              {handoverProtocol.vehicleCondition.fuelLevel || 'N/A'}% paliva
            </Alert>
          )}

          <div
            className="/* TODO: Convert display: grid */ /* TODO: Convert gridTemplateColumns: repeat(auto-fit */ gap-4"
          >
            <TextField
              label="Aktu√°lny stav tachometra (km)"
              type="number"
              value={formData.odometer || ''}
              onChange={e =>
                handleInputChange(
                  'odometer',
                  e.target.value ? parseInt(e.target.value) : undefined
                )
              }
              fullWidth
            />
            <TextField
              label="√örove≈à paliva (%)"
              type="number"
              value={formData.fuelLevel}
              onChange={e =>
                handleInputChange('fuelLevel', parseInt(e.target.value) || 100)
              }
              inputProps={{ min: 0, max: 100 }}
              fullWidth
            />
            <TextField
              label="Stav exteri√©ru"
              value={formData.exteriorCondition}
              onChange={e =>
                handleInputChange('exteriorCondition', e.target.value)
              }
              fullWidth
            />
            <TextField
              label="Stav interi√©ru"
              value={formData.interiorCondition}
              onChange={e =>
                handleInputChange('interiorCondition', e.target.value)
              }
              fullWidth
            />
          </div>
        </CardContent>
      </Card>

      {/* üîß NOV√â: Modern√Ω prepoƒçet poplatkov s inform√°ciami o depozite */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert backgroundColor: background.paper */">
        <CardContent>
          <Typography variant="h6" color="text.primary" className="/* TODO: Convert mb: 3 */">
            <Calculate className="/* TODO: Convert mr: 1 */ /* TODO: Convert verticalAlign: middle */" />
            Finanƒçn√© vy√∫ƒçtovanie
          </Typography>

          {/* Inform√°cie o depozite */}
          <div
            className="p-4 /* TODO: Convert mb: 3 */ /* TODO: Convert bgcolor: primary.light */ rounded-md /* TODO: Convert border: 1px solid */ /* TODO: Convert borderColor: primary.main */"
          >
            <Typography
              variant="subtitle1"
              className="/* TODO: Convert mb: 2 */ /* TODO: Convert fontWeight: bold */ /* TODO: Convert color: text.primary */"
            >
              üí∞ Inform√°cie o depozite
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <Typography variant="body2" color="text.primary">
                    V√Ω≈°ka depozitu:
                  </Typography>
                  <Typography
                    variant="h6"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {rental.deposit
                      ? `${rental.deposit.toFixed(2)} ‚Ç¨`
                      : '0,00 ‚Ç¨'}
                  </Typography>
                </div>
              </Grid>
              <Grid item xs={12} sm={6}>
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <Typography variant="body2" color="text.primary">
                    Sp√¥sob √∫hrady:
                  </Typography>
                  <Chip
                    label={formatDepositPaymentMethod(
                      getDepositPaymentMethod()
                    )}
                    color={
                      getDepositPaymentMethod() === 'cash'
                        ? 'success'
                        : getDepositPaymentMethod() === 'bank_transfer'
                          ? 'primary'
                          : 'secondary'
                    }
                    size="small"
                    sx={{
                      fontWeight: 'bold',
                      color: 'text.primary',
                      '& .MuiChip-label': {
                        color: 'text.primary',
                      },
                    }}
                  />
                </div>
              </Grid>
            </Grid>
          </div>

          {/* Kilometre a palivo */}
          <div className="/* TODO: Convert mb: 3 */">
            <Typography
              variant="subtitle1"
              className="/* TODO: Convert mb: 2 */ /* TODO: Convert fontWeight: bold */ /* TODO: Convert color: text.primary */"
            >
              üöó Kilometre a palivo
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={6} sm={3}>
                <div
                  className="/* TODO: Convert textAlign: center */ p-2 /* TODO: Convert bgcolor: grey.50 */ rounded"
                >
                  <Typography variant="caption" color="text.secondary">
                    Povolen√© km
                  </Typography>
                  <Typography
                    variant="h6"
                    color="info.main"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {rental.allowedKilometers || 0}
                  </Typography>
                </div>
              </Grid>
              <Grid item xs={6} sm={3}>
                <div
                  className="/* TODO: Convert textAlign: center */ p-2 /* TODO: Convert bgcolor: grey.50 */ rounded"
                >
                  <Typography variant="caption" color="text.secondary">
                    Najazden√© km
                  </Typography>
                  <Typography
                    variant="h6"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.kilometersUsed}
                  </Typography>
                </div>
              </Grid>
              <Grid item xs={6} sm={3}>
                <div
                  className="/* TODO: Convert textAlign: center */ p-2 /* TODO: Convert bgcolor:
                      fees.kilometerOverage > 0
                        ? warning.light
                        : success.light */ rounded"
                >
                  <Typography variant="caption" color="text.secondary">
                    Prekroƒçenie km
                  </Typography>
                  <Typography
                    variant="h6"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.kilometerOverage}
                  </Typography>
                </div>
              </Grid>
              <Grid item xs={6} sm={3}>
                <div
                  className="/* TODO: Convert textAlign: center */ p-2 /* TODO: Convert bgcolor: grey.50 */ rounded"
                >
                  <Typography variant="caption" color="text.secondary">
                    Spotrebovan√© palivo
                  </Typography>
                  <Typography
                    variant="h6"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.fuelUsed}%
                  </Typography>
                </div>
              </Grid>
            </Grid>
          </div>

          {/* Poplatky */}
          <div className="/* TODO: Convert mb: 3 */">
            <Typography
              variant="subtitle1"
              className="/* TODO: Convert mb: 2 */ /* TODO: Convert fontWeight: bold */ /* TODO: Convert color: text.primary */"
            >
              üí∏ Poplatky
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <div
                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ p-4 /* TODO: Convert bgcolor: grey.50 */ rounded"
                >
                  <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                    <Typography variant="body2" color="text.secondary">
                      Poplatok za km
                    </Typography>
                    <IconButton
                      onClick={handleStartEditKmRate}
                      size="small"
                      color="primary"
                      title="Upravi≈• cenu za km"
                      sx={{
                        minWidth: 24,
                        height: 24,
                        bgcolor:
                          customKmRate !== null
                            ? 'warning.light'
                            : 'transparent',
                        '&:hover': { bgcolor: 'primary.light' },
                      }}
                    >
                      <Edit fontSize="small" />
                    </IconButton>
                  </div>
                  <Typography
                    variant="h6"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.kilometerFee.toFixed(2)} ‚Ç¨
                  </Typography>
                </div>
              </Grid>
              <Grid item xs={12} sm={6}>
                <div
                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ p-4 /* TODO: Convert bgcolor: grey.50 */ rounded"
                >
                  <Typography variant="body2" color="text.secondary">
                    Poplatok za palivo
                  </Typography>
                  <Typography
                    variant="h6"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.fuelFee.toFixed(2)} ‚Ç¨
                  </Typography>
                </div>
              </Grid>
            </Grid>

            {/* Editaƒçn√© pole pre cenu za km */}
            {isEditingKmRate && (
              <div
                className="p-4 /* TODO: Convert mt: 2 */ /* TODO: Convert border: 2px solid */ /* TODO: Convert borderColor: warning.main */ rounded-md /* TODO: Convert bgcolor: warning.light */"
              >
                <Typography
                  variant="subtitle2"
                  className="/* TODO: Convert mb: 1 */ /* TODO: Convert fontWeight: bold */"
                >
                  ‚ö†Ô∏è √öprava ceny za prekroƒçen√© km
                </Typography>
                <Typography
                  variant="body2"
                  className="/* TODO: Convert mb: 2 */ /* TODO: Convert color: text.secondary */"
                >
                  Cenn√≠kov√° sadzba:{' '}
                  <strong>{originalKmRate.toFixed(2)} ‚Ç¨/km</strong> ‚Ä¢ Prekroƒçen√©
                  km: <strong>{fees.kilometerOverage} km</strong>
                </Typography>
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <TextField
                    label="Nov√° cena za km (‚Ç¨)"
                    type="number"
                    value={customKmRate || ''}
                    onChange={e => handleKmRateChange(e.target.value)}
                    inputProps={{
                      min: 0,
                      step: 0.01,
                      style: { textAlign: 'center' },
                    }}
                    size="small"
                    className="/* TODO: Convert width: 150 */"
                  />
                  <IconButton
                    onClick={handleSaveKmRate}
                    size="small"
                    color="success"
                    title="Ulo≈æi≈•"
                  >
                    <Check fontSize="small" />
                  </IconButton>
                  <IconButton
                    onClick={handleCancelEditKmRate}
                    size="small"
                    color="error"
                    title="Zru≈°i≈•"
                  >
                    <Cancel fontSize="small" />
                  </IconButton>
                </div>
              </div>
            )}
          </div>

          {/* Fin√°lne vy√∫ƒçtovanie */}
          <div>
            <Typography
              variant="subtitle1"
              className="/* TODO: Convert mb: 2 */ /* TODO: Convert fontWeight: bold */ /* TODO: Convert color: text.primary */"
            >
              üèÅ Fin√°lne vy√∫ƒçtovanie
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={4}>
                <div
                  className="/* TODO: Convert textAlign: center */ p-4 /* TODO: Convert bgcolor: error.light */ rounded-md /* TODO: Convert border: 2px solid */ /* TODO: Convert borderColor: error.main */"
                >
                  <Typography variant="caption" color="text.secondary">
                    Celkov√© poplatky
                  </Typography>
                  <Typography
                    variant="h5"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.totalExtraFees.toFixed(2)} ‚Ç¨
                  </Typography>
                </div>
              </Grid>
              <Grid item xs={12} sm={4}>
                <div
                  className="/* TODO: Convert textAlign: center */ p-4 /* TODO: Convert bgcolor: success.light */ rounded-md /* TODO: Convert border: 2px solid */ /* TODO: Convert borderColor: success.main */"
                >
                  <Typography variant="caption" color="text.secondary">
                    Vratenie z depozitu
                  </Typography>
                  <Typography
                    variant="h5"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.depositRefund.toFixed(2)} ‚Ç¨
                  </Typography>
                </div>
              </Grid>
              <Grid item xs={12} sm={4}>
                <div
                  className="/* TODO: Convert textAlign: center */ p-4 /* TODO: Convert bgcolor:
                      fees.finalRefund > 0
                        ? success.light
                        : fees.additionalCharges > 0
                          ? error.light
                          : grey.100 */ rounded-md /* TODO: Convert border: 2px solid */ /* TODO: Convert borderColor:
                      fees.finalRefund > 0
                        ? success.main
                        : fees.additionalCharges > 0
                          ? error.main
                          : grey.300 */"
                >
                  <Typography variant="caption" color="text.secondary">
                    {fees.finalRefund > 0 ? 'Fin√°lny refund' : 'Doplatok'}
                  </Typography>
                  <Typography
                    variant="h5"
                    color="text.primary"
                    className="/* TODO: Convert fontWeight: bold */"
                  >
                    {fees.finalRefund > 0
                      ? fees.finalRefund.toFixed(2)
                      : fees.additionalCharges.toFixed(2)}{' '}
                    ‚Ç¨
                  </Typography>
                </div>
              </Grid>
            </Grid>
          </div>
        </CardContent>
      </Card>

      {/* Fotky */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert backgroundColor: background.paper */">
        <CardContent>
          <Typography variant="h6" color="text.primary" className="/* TODO: Convert mb: 2 */">
            <PhotoCamera className="/* TODO: Convert mr: 1 */ /* TODO: Convert verticalAlign: middle */" />
            Fotodokument√°cia
          </Typography>

          <div
            className="/* TODO: Convert display: grid */ /* TODO: Convert gridTemplateColumns: repeat(auto-fit */ gap-4"
          >
            <Button
              variant="outlined"
              startIcon={<PhotoCamera />}
              onClick={() => setActivePhotoCapture('vehicle')}
              size="large"
            >
              Fotky vozidla ({formData.vehicleImages.length})
            </Button>
            <Button
              variant="outlined"
              startIcon={<PhotoCamera />}
              onClick={() => setActivePhotoCapture('document')}
              size="large"
            >
              Dokumenty ({formData.documentImages.length})
            </Button>
            <Button
              variant="outlined"
              startIcon={<PhotoCamera />}
              onClick={() => setActivePhotoCapture('damage')}
              size="large"
            >
              Po≈°kodenia ({formData.damageImages.length})
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* ‚úçÔ∏è ELEKTRONICK√â PODPISY */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert backgroundColor: background.paper */">
        <CardContent>
          <Typography variant="h6" color="text.primary" className="/* TODO: Convert mb: 2 */">
            ‚úçÔ∏è Elektronick√© podpisy s ƒçasovou peƒçiatkou
          </Typography>

          {/* Existuj√∫ce podpisy */}
          {formData.signatures.length > 0 && (
            <div className="/* TODO: Convert mb: 2 */">
              {formData.signatures.map(signature => (
                <Card
                  key={signature.id}
                  variant="outlined"
                  className="/* TODO: Convert mb: 1 */ p-4"
                >
                  <div
                    className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
                  >
                    <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4">
                      <div
                        component="img"
                        src={signature.signature}
                        alt={`Podpis ${signature.signerName}`}
                        className="/* TODO: Convert width: 120 */ /* TODO: Convert height: 60 */ /* TODO: Convert border: 1px solid #ddd */ rounded /* TODO: Convert objectFit: contain */"
                      />
                      <div>
                        <Typography variant="subtitle2" fontWeight="bold">
                          {signature.signerName}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          {signature.signerRole === 'customer'
                            ? 'Z√°kazn√≠k'
                            : 'Zamestnanec'}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          üìÖ{' '}
                          {new Date(signature.timestamp).toLocaleString(
                            'sk-SK'
                          )}
                        </Typography>
                        <Typography
                          variant="caption"
                          color="text.secondary"
                          className="/* TODO: Convert display: block */"
                        >
                          üìç {signature.location}
                        </Typography>
                      </div>
                    </div>
                    <IconButton
                      onClick={() => handleRemoveSignature(signature.id)}
                      color="error"
                      size="small"
                    >
                      <Close />
                    </IconButton>
                  </div>
                </Card>
              ))}
            </div>
          )}

          {/* Tlaƒçidl√° pre pridanie podpisov */}
          <div className="/* TODO: Convert display: flex */ gap-4 /* TODO: Convert flexWrap: wrap */">
            <Button
              variant="outlined"
              onClick={() =>
                handleAddSignature(
                  rental.customer?.name || rental.customerName || 'Z√°kazn√≠k',
                  'customer'
                )
              }
              startIcon={<Person />}
            >
              Podpis z√°kazn√≠ka
            </Button>
            <Button
              variant="outlined"
              onClick={() =>
                handleAddSignature(
                  `${state.user?.firstName || ''} ${state.user?.lastName || ''}`.trim() ||
                    'Zamestnanec',
                  'employee'
                )
              }
              startIcon={<Person />}
            >
              Podpis zamestnanca
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Tlaƒçidl√° */}
      <div className="/* TODO: Convert display: flex */ gap-4 /* TODO: Convert justifyContent: flex-end */ /* TODO: Convert mt: 3 */">
        <Button variant="outlined" onClick={onClose} disabled={isLoading}>
          Zru≈°i≈•
        </Button>
        <Button
          variant="contained"
          startIcon={<Save />}
          onClick={handleSave}
          disabled={isLoading}
        >
          {isLoading ? 'Uklad√°m...' : 'Ulo≈æi≈• protokol'}
        </Button>
      </div>

      {/* Photo capture modal */}
      {activePhotoCapture && (
        <SerialPhotoCapture
          open={true}
          onClose={() => setActivePhotoCapture(null)}
          onSave={(images, videos) =>
            handlePhotoCaptureSuccess(activePhotoCapture, images, videos)
          }
          title={`Fotky - ${activePhotoCapture}`}
          allowedTypes={['vehicle', 'document', 'damage']}
          entityId={rental.id}
          protocolType="return"
          mediaType={activePhotoCapture as 'vehicle' | 'document' | 'damage'}
          category={(() => {
            // Mapovanie mediaType na R2 kateg√≥rie
            const mediaTypeToCategory = {
              vehicle: 'vehicle_photos',
              document: 'documents',
              damage: 'damages',
            } as const;
            return (
              mediaTypeToCategory[
                activePhotoCapture as keyof typeof mediaTypeToCategory
              ] || 'other'
            );
          })()}
        />
      )}

      {/* SignaturePad modal */}
      {showSignaturePad && currentSigner && (
        <div
          className="/* TODO: Convert position: fixed */ /* TODO: Convert top: 0 */ /* TODO: Convert left: 0 */ /* TODO: Convert right: 0 */ /* TODO: Convert bottom: 0 */ /* TODO: Convert backgroundColor: rgba(0 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert zIndex: 9999 */ p-4"
        >
          <div
            className="/* TODO: Convert backgroundColor: white */ rounded-md /* TODO: Convert maxWidth: 600 */ /* TODO: Convert width: 100% */ /* TODO: Convert maxHeight: 90vh */ /* TODO: Convert overflow: auto */"
          >
            <SignaturePad
              onSave={handleSignatureSave}
              onCancel={() => setShowSignaturePad(false)}
              signerName={currentSigner.name}
              signerRole={currentSigner.role}
              location={formData.location}
            />
          </div>
        </div>
      )}
    </div>
  );
}
