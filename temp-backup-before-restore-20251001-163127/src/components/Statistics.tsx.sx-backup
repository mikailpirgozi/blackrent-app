import { useExpenses } from '@/lib/react-query/hooks/useExpenses';
import { useAllProtocols } from '@/lib/react-query/hooks/useProtocols';
import { useRentals } from '@/lib/react-query/hooks/useRentals';
import { useVehicles } from '@/lib/react-query/hooks/useVehicles';
import {
/* Tailwind classes used for styling */
  AccountBalance as AccountBalanceIcon,
  Assessment as AssessmentIcon,
  Business as BusinessIcon,
  CalendarToday as CalendarIcon,
  DirectionsCar as CarIcon,
  CheckCircle as CheckCircleIcon,
  CreditCard as CreditCardIcon,
  Dashboard as DashboardIcon,
  Euro as EuroIcon,
  AttachMoney as MoneyIcon,
  Payment as PaymentIcon,
  Percent as PercentIcon,
  Person as PersonIcon,
  Refresh as RefreshIcon,
  ShowChart as ShowChartIcon,
  Speed as SpeedIcon,
  Star as StarIcon,
  AccessTime as TimeIcon,
  TrendingDown as TrendingDownIcon,
  TrendingUp as TrendingUpIcon,
  EmojiEvents as TrophyIcon,
  Warning as WarningIcon,
} from '@mui/icons-material';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import { Alert,
  Avatar, Button,
  Card,
  CardContent,
  Chip,
  Divider,
  FormControl,
  Grid,
  InputLabel,
  LinearProgress,
  MenuItem,
  Select,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tabs,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import {
  differenceInDays,
  endOfMonth,
  endOfYear,
  format,
  getDaysInMonth,
  isAfter,
  isBefore,
  startOfMonth,
  startOfYear,
  subMonths,
} from 'date-fns';
import { sk } from 'date-fns/locale';
import React, { useMemo, useState } from 'react';
import {
  Area,
  AreaChart,
  Bar,
  BarChart,
  CartesianGrid,
  Cell,
  Legend,
  Line,
  LineChart,
  Pie,
  PieChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from 'recharts';
import { logger } from '../utils/smartLogger';
import StatisticsMobile from './statistics/StatisticsMobile';

// Type definitions
interface VehicleStatistic extends Record<string, unknown> {
  vehicle: {
    id: string;
    brand: string;
    model: string;
    licensePlate: string;
    company?: string;
  };
  totalRevenue: number;
  rentalCount: number;
  totalDaysRented: number;
  utilizationPercentage: number;
  avgRevenuePerRental: number;
}

interface CustomerStatistic extends Record<string, unknown> {
  customerName: string;
  customer?: Record<string, unknown>;
  totalRevenue: number;
  rentalCount: number;
  totalDaysRented: number;
  lastRentalDate: Date;
  avgRentalDuration: number;
}

interface EmployeeStatistic extends Record<string, unknown> {
  employeeName: string;
  handoverCount: number;
  returnCount: number;
  totalProtocols: number;
  handoverRevenue: number;
  returnRevenue: number;
  totalRevenue: number;
  uniqueRentals: number;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`stats-tabpanel-${index}`}
      aria-labelledby={`stats-tab-${index}`}
      {...other}
    >
      {value === index && <div className="p-6">{children}</div>}
    </div>
  );
}

const COLORS = [
  '#667eea',
  '#764ba2',
  '#f093fb',
  '#f5576c',
  '#4facfe',
  '#00f2fe',
];

const Statistics: React.FC = () => {
  // React Query hooks
  const { data: rentals = [] } = useRentals();
  const { data: expenses = [] } = useExpenses();
  const { data: protocols = [] } = useAllProtocols();
  const { data: vehicles = [] } = useVehicles();

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // Loading state
  // const isLoading =
  //   rentalsLoading || expensesLoading || protocolsLoading || vehiclesLoading;

  const [selectedYear] = useState(new Date().getFullYear());
  const [selectedMonth] = useState(new Date().getMonth());
  const [tabValue, setTabValue] = useState(0);
  // const [expandedMonth, setExpandedMonth] = useState<string | null>(null);
  const [timeRange, setTimeRange] = useState<'month' | 'year' | 'all'>('month');

  // Nové state pre filtrovanie
  const [filterYear, setFilterYear] = useState(new Date().getFullYear());
  const [filterMonth, setFilterMonth] = useState(new Date().getMonth());

  // State pre pagination Top štatistík
  const [showVehiclesByUtilization, setShowVehiclesByUtilization] =
    useState(10);
  const [showVehiclesByRevenue, setShowVehiclesByRevenue] = useState(10);
  const [showVehiclesByRentals, setShowVehiclesByRentals] = useState(10);
  const [showCustomersByRentals, setShowCustomersByRentals] = useState(10);
  const [showCustomersByRevenue, setShowCustomersByRevenue] = useState(10);
  const [showCustomersByDays, setShowCustomersByDays] = useState(10);

  // Reálne dáta z aplikácie s novými metrikami
  const stats = useMemo(() => {
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();

    // Definícia filtrovacieho obdobia
    let filterStartDate: Date;
    let filterEndDate: Date;

    if (timeRange === 'month') {
      filterStartDate = startOfMonth(new Date(filterYear, filterMonth));
      filterEndDate = endOfMonth(new Date(filterYear, filterMonth));
    } else if (timeRange === 'year') {
      filterStartDate = startOfYear(new Date(filterYear, 0));
      filterEndDate = endOfYear(new Date(filterYear, 0));
    } else {
      // 'all'
      filterStartDate = new Date(2020, 0, 1); // Začiatok BlackRent
      filterEndDate = new Date();
    }

    logger.debug('Statistics filter period', {
      timeRange,
      filterYear,
      filterMonth,
      filterStartDate: format(filterStartDate, 'yyyy-MM-dd'),
      filterEndDate: format(filterEndDate, 'yyyy-MM-dd'),
    });

    // Filtrované prenájmy pre vybrané obdobie
    const filteredRentals = rentals.filter(rental => {
      const rentalDate = new Date(rental.startDate);
      return rentalDate >= filterStartDate && rentalDate <= filterEndDate;
    });

    // Filtrované náklady pre vybrané obdobie a iba Black Holding
    const filteredExpenses = expenses.filter(expense => {
      const expenseDate = new Date(expense.date);
      const isInPeriod =
        expenseDate >= filterStartDate && expenseDate <= filterEndDate;
      const isBlackHolding = expense.company
        ?.toLowerCase()
        .includes('black holding');
      return isInPeriod && isBlackHolding;
    });

    logger.performance('Statistics data processed', {
      rentals: filteredRentals.length,
      expenses: filteredExpenses.length,
      totalExpenseAmount: filteredExpenses.reduce(
        (sum, exp) => sum + exp.amount,
        0
      ),
      timeRange,
    });

    // NOVÉ METRIKY
    // 1. Celkové tržby za obdobie
    const totalRevenuePeriod = filteredRentals.reduce(
      (sum, rental) => sum + (rental.totalPrice || 0),
      0
    );

    // 2. Náklady Black Holding za obdobie
    const blackHoldingExpenses = filteredExpenses.reduce(
      (sum, expense) => sum + expense.amount,
      0
    );

    // 3. Celkové provízie za obdobie
    const totalCommissionPeriod = filteredRentals.reduce(
      (sum, rental) => sum + (rental.commission || 0),
      0
    );

    // POKROČILÉ AUTO ŠTATISTIKY - používame vozidlá s definovanou kategóriou
    const filteredVehicles = vehicles.filter(
      vehicle => vehicle.category !== undefined
    );
    const vehicleStats = filteredVehicles
      .map(vehicle => {
        const vehicleRentals = filteredRentals.filter(
          rental => rental.vehicleId === vehicle.id
        );

        // Celkové príjmy z auta
        const totalRevenue = vehicleRentals.reduce(
          (sum, rental) => sum + (rental.totalPrice || 0),
          0
        );

        // Počet prenájmov
        const rentalCount = vehicleRentals.length;

        // Celkové dni prenájmu
        const totalDaysRented = vehicleRentals.reduce((sum, rental) => {
          return (
            sum +
            differenceInDays(
              new Date(rental.endDate),
              new Date(rental.startDate)
            ) +
            1
          );
        }, 0);

        // Výpočet % vyťaženosti
        let utilizationPercentage = 0;
        if (timeRange === 'month') {
          const daysInMonth = getDaysInMonth(new Date(filterYear, filterMonth));
          utilizationPercentage = (totalDaysRented / daysInMonth) * 100;
        } else if (timeRange === 'year') {
          const daysInYear = 365; // Zjednodušene
          utilizationPercentage = (totalDaysRented / daysInYear) * 100;
        } else {
          // Pre 'all' - vypočítame od začiatku BlackRent
          const daysSinceStart = differenceInDays(
            new Date(),
            new Date(2020, 0, 1)
          );
          utilizationPercentage = (totalDaysRented / daysSinceStart) * 100;
        }

        return {
          vehicle,
          totalRevenue,
          rentalCount,
          totalDaysRented,
          utilizationPercentage: Math.min(utilizationPercentage, 100), // Max 100%
          avgRevenuePerRental: rentalCount > 0 ? totalRevenue / rentalCount : 0,
        };
      })
      .filter(stat => stat.rentalCount > 0); // Iba autá s prenájmami

    // POKROČILÉ ZÁKAZNÍK ŠTATISTIKY
    const customerStats = filteredRentals.reduce(
      (acc, rental) => {
        const customerId = rental.customerId || rental.customerName;
        if (!customerId) return acc;

        if (!acc[customerId]) {
          acc[customerId] = {
            customerName: rental.customerName,
            customer: rental.customer as Record<string, unknown> | undefined,
            totalRevenue: 0,
            rentalCount: 0,
            totalDaysRented: 0,
            lastRentalDate: new Date(rental.startDate),
            avgRentalDuration: 0,
          };
        }

        acc[customerId].totalRevenue += rental.totalPrice || 0;
        acc[customerId].rentalCount += 1;

        const rentalDays =
          differenceInDays(
            new Date(rental.endDate),
            new Date(rental.startDate)
          ) + 1;
        acc[customerId].totalDaysRented += rentalDays;

        // Aktualizácia posledného prenájmu
        if (new Date(rental.startDate) > acc[customerId].lastRentalDate) {
          acc[customerId].lastRentalDate = new Date(rental.startDate);
        }

        return acc;
      },
      {} as Record<string, CustomerStatistic>
    );

    // Výpočet priemernej dĺžky prenájmu pre každého zákazníka
    Object.values(customerStats).forEach(customer => {
      customer.avgRentalDuration =
        customer.rentalCount > 0
          ? customer.totalDaysRented / customer.rentalCount
          : 0;
    });

    const customerStatsArray = Object.values(customerStats);

    // TOP AUTO ŠTATISTIKY
    const topVehicleByUtilization =
      vehicleStats.length > 0
        ? vehicleStats.reduce(
            (prev, current) =>
              prev.utilizationPercentage > current.utilizationPercentage
                ? prev
                : current,
            vehicleStats[0]
          )
        : null;

    const topVehicleByRevenue =
      vehicleStats.length > 0
        ? vehicleStats.reduce(
            (prev, current) =>
              prev.totalRevenue > current.totalRevenue ? prev : current,
            vehicleStats[0]
          )
        : null;

    const topVehicleByRentals =
      vehicleStats.length > 0
        ? vehicleStats.reduce(
            (prev, current) =>
              prev.rentalCount > current.rentalCount ? prev : current,
            vehicleStats[0]
          )
        : null;

    // TOP ZÁKAZNÍK ŠTATISTIKY
    const topCustomerByRentals =
      customerStatsArray.length > 0
        ? customerStatsArray.reduce(
            (prev, current) =>
              prev.rentalCount > current.rentalCount ? prev : current,
            customerStatsArray[0]
          )
        : null;

    const topCustomerByRevenue =
      customerStatsArray.length > 0
        ? customerStatsArray.reduce(
            (prev, current) =>
              prev.totalRevenue > current.totalRevenue ? prev : current,
            customerStatsArray[0]
          )
        : null;

    const topCustomerByDays =
      customerStatsArray.length > 0
        ? customerStatsArray.reduce(
            (prev, current) =>
              prev.totalDaysRented > current.totalDaysRented ? prev : current,
            customerStatsArray[0]
          )
        : null;

    // Existujúce výpočty (pre všetky časy)
    const currentMonthRentals = rentals.filter(rental => {
      const rentalDate = new Date(rental.startDate);
      return (
        rentalDate.getMonth() === currentMonth &&
        rentalDate.getFullYear() === currentYear
      );
    });

    const currentYearRentals = rentals.filter(rental => {
      const rentalDate = new Date(rental.startDate);
      return rentalDate.getFullYear() === currentYear;
    });

    const selectedMonthRentals = rentals.filter(rental => {
      const rentalDate = new Date(rental.startDate);
      return (
        rentalDate.getMonth() === selectedMonth &&
        rentalDate.getFullYear() === selectedYear
      );
    });

    const selectedYearRentals = rentals.filter(rental => {
      const rentalDate = new Date(rental.startDate);
      return rentalDate.getFullYear() === selectedYear;
    });

    // Aktívne prenájmy
    const activeRentals = rentals.filter(rental => {
      const now = new Date();
      const startDate = new Date(rental.startDate);
      const endDate = new Date(rental.endDate);
      return isAfter(now, startDate) && isBefore(now, endDate);
    });

    // Dnešné vrátenia
    const todayReturns = rentals.filter(rental => {
      const today = new Date();
      const endDate = new Date(rental.endDate);
      return format(today, 'yyyy-MM-dd') === format(endDate, 'yyyy-MM-dd');
    });

    // Zajtrajšie vrátenia
    const tomorrowReturns = rentals.filter(rental => {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      const endDate = new Date(rental.endDate);
      return format(tomorrow, 'yyyy-MM-dd') === format(endDate, 'yyyy-MM-dd');
    });

    // Nezaplatené prenájmy
    const unpaidRentals = rentals.filter(rental => !rental.paid);

    // Výpočet celkových príjmov (všetky časy)
    const totalRevenue = rentals.reduce(
      (sum, rental) => sum + (rental.totalPrice || 0),
      0
    );
    const totalCommission = rentals.reduce(
      (sum, rental) => sum + (rental.commission || 0),
      0
    );

    // Výpočet priemerných hodnôt
    const avgRentalPrice =
      rentals.length > 0 ? totalRevenue / rentals.length : 0;
    const avgRentalDuration =
      rentals.length > 0
        ? rentals.reduce((sum, rental) => {
            const days =
              differenceInDays(
                new Date(rental.endDate),
                new Date(rental.startDate)
              ) + 1;
            return sum + days;
          }, 0) / rentals.length
        : 0;

    // Štatistiky podľa spôsobu platby
    const paymentMethodStats = rentals.reduce(
      (acc, rental) => {
        const method = rental.paymentMethod || 'unknown';
        if (!acc[method]) {
          acc[method] = { count: 0, revenue: 0 };
        }
        acc[method].count++;
        acc[method].revenue += rental.totalPrice || 0;
        return acc;
      },
      {} as Record<string, { count: number; revenue: number }>
    );

    // Štatistiky podľa firiem
    const companyStats = rentals.reduce(
      (acc, rental) => {
        const company = rental.vehicle?.company || 'Bez firmy';
        if (!acc[company]) {
          acc[company] = { count: 0, revenue: 0, commission: 0 };
        }
        acc[company].count++;
        acc[company].revenue += rental.totalPrice || 0;
        acc[company].commission += rental.commission || 0;
        return acc;
      },
      {} as Record<
        string,
        { count: number; revenue: number; commission: number }
      >
    );

    // Mesiačné dáta pre graf
    const monthlyData = Array.from({ length: 12 }, (_, i) => {
      const month = subMonths(new Date(), 11 - i);
      const monthRentals = rentals.filter(rental => {
        const rentalDate = new Date(rental.startDate);
        return (
          rentalDate.getMonth() === month.getMonth() &&
          rentalDate.getFullYear() === month.getFullYear()
        );
      });

      return {
        month: format(month, 'MMM yyyy'),
        rentals: monthRentals.length,
        revenue: monthRentals.reduce(
          (sum, rental) => sum + (rental.totalPrice || 0),
          0
        ),
        commission: monthRentals.reduce(
          (sum, rental) => sum + (rental.commission || 0),
          0
        ),
      };
    });

    return {
      // Nové metriky
      totalRevenuePeriod,
      blackHoldingExpenses,
      totalCommissionPeriod,
      filteredRentals,
      filteredExpenses,

      // Pokročilé štatistiky
      vehicleStats,
      customerStatsArray,
      topVehicleByUtilization,
      topVehicleByRevenue,
      topVehicleByRentals,
      topCustomerByRentals,
      topCustomerByRevenue,
      topCustomerByDays,

      // Sortované zoznamy pre Top 10+ - vytvárame kópie aby sa nemutoval originálny array
      vehiclesByUtilization: (() => {
        const sorted = [...vehicleStats].sort(
          (a, b) => b.utilizationPercentage - a.utilizationPercentage
        );
        logger.debug(
          'Vehicles by utilization (top 3)',
          sorted.slice(0, 3).map(v => ({
            vehicle: `${v.vehicle.brand} ${v.vehicle.model}`,
            utilization: v.utilizationPercentage.toFixed(1) + '%',
          }))
        );
        return sorted;
      })(),
      vehiclesByRevenue: (() => {
        const sorted = [...vehicleStats].sort(
          (a, b) => b.totalRevenue - a.totalRevenue
        );
        logger.debug(
          'Vehicles by revenue (top 3)',
          sorted.slice(0, 3).map(v => ({
            vehicle: `${v.vehicle.brand} ${v.vehicle.model}`,
            revenue: v.totalRevenue + '€',
          }))
        );
        return sorted;
      })(),
      vehiclesByRentals: (() => {
        const sorted = [...vehicleStats].sort(
          (a, b) => b.rentalCount - a.rentalCount
        );
        logger.debug(
          'Vehicles by rentals (top 3)',
          sorted.slice(0, 3).map(v => ({
            vehicle: `${v.vehicle.brand} ${v.vehicle.model}`,
            rentals: v.rentalCount + 'x',
          }))
        );
        return sorted;
      })(),
      customersByRentals: (() => {
        const sorted = [...customerStatsArray].sort(
          (a, b) => b.rentalCount - a.rentalCount
        );
        logger.debug(
          'Customers by rentals (top 3)',
          sorted.slice(0, 3).map(c => ({
            customer: c.customerName,
            rentals: c.rentalCount + 'x',
          }))
        );
        return sorted;
      })(),
      customersByRevenue: (() => {
        const sorted = [...customerStatsArray].sort(
          (a, b) => b.totalRevenue - a.totalRevenue
        );
        logger.debug(
          'Customers by revenue (top 3)',
          sorted.slice(0, 3).map(c => ({
            customer: c.customerName,
            revenue: c.totalRevenue + '€',
          }))
        );
        return sorted;
      })(),
      customersByDays: (() => {
        const sorted = [...customerStatsArray].sort(
          (a, b) => b.totalDaysRented - a.totalDaysRented
        );
        logger.debug(
          'Customers by days (top 3)',
          sorted.slice(0, 3).map(c => ({
            customer: c.customerName,
            days: c.totalDaysRented + ' dní',
          }))
        );
        return sorted;
      })(),

      // Existujúce
      currentMonthRentals,
      currentYearRentals,
      selectedMonthRentals,
      selectedYearRentals,
      activeRentals,
      todayReturns,
      tomorrowReturns,
      unpaidRentals,
      totalRevenue,
      totalCommission,
      avgRentalPrice,
      avgRentalDuration,
      paymentMethodStats,
      companyStats,
      monthlyData,

      // 📊 EMPLOYEE STATISTICS: Štatistiky zamestnancov na základe protokolov
      employeeStats: (() => {
        // Filtrované protokoly pre vybrané obdobie
        const filteredProtocols = (
          protocols as Array<{
            createdAt: string;
            type: string;
            rentalId: string;
            createdBy?: string;
            rentalData?: { totalPrice?: number };
          }>
        ).filter(
          (protocol: {
            createdAt: string;
            type: string;
            rentalId: string;
            createdBy?: string;
            rentalData?: { totalPrice?: number };
          }) => {
            const protocolDate = new Date(protocol.createdAt);
            return (
              protocolDate >= filterStartDate && protocolDate <= filterEndDate
            );
          }
        );

        // Zoskupenie protokolov podľa zamestnanca
        const employeeProtocolStats = filteredProtocols.reduce(
          (
            acc: Record<
              string,
              {
                employeeName: string;
                handoverCount: number;
                returnCount: number;
                totalProtocols: number;
                handoverRevenue: number;
                returnRevenue: number;
                totalRevenue: number;
                rentals: Set<string>;
              }
            >,
            protocol: {
              createdAt: string;
              type: string;
              rentalId: string;
              createdBy?: string;
              rentalData?: { totalPrice?: number };
            }
          ) => {
            const employeeName = protocol.createdBy || 'Neznámy';

            if (!acc[employeeName]) {
              acc[employeeName] = {
                employeeName,
                handoverCount: 0,
                returnCount: 0,
                totalProtocols: 0,
                handoverRevenue: 0,
                returnRevenue: 0,
                totalRevenue: 0,
                rentals: new Set<string>(), // Pre sledovanie unikátnych prenájmov
              };
            }

            // Nájdi prenájom pre tento protokol (hľadaj vo všetkých prenájmoch, nie len filtrovaných)
            const rental = rentals.find(r => r.id === protocol.rentalId);

            // Skús získať cenu z rôznych zdrojov
            let rentalPrice = 0;
            if (rental?.totalPrice) {
              rentalPrice = rental.totalPrice;
            } else if (protocol.rentalData?.totalPrice) {
              rentalPrice = protocol.rentalData.totalPrice;
            }

            if (protocol.type === 'handover') {
              acc[employeeName].handoverCount++;
              acc[employeeName].handoverRevenue += rentalPrice;
            } else {
              acc[employeeName].returnCount++;
              acc[employeeName].returnRevenue += rentalPrice;
            }

            acc[employeeName].totalProtocols++;
            acc[employeeName].totalRevenue += rentalPrice;
            acc[employeeName].rentals.add(protocol.rentalId);

            return acc;
          },
          {} as Record<
            string,
            {
              employeeName: string;
              handoverCount: number;
              returnCount: number;
              totalProtocols: number;
              handoverRevenue: number;
              returnRevenue: number;
              totalRevenue: number;
              rentals: Set<string>;
            }
          >
        );

        // Konverzia na array a pridanie počtu unikátnych prenájmov
        const employeeStatsArray = Object.values(employeeProtocolStats).map(
          (emp: {
            employeeName: string;
            handoverCount: number;
            returnCount: number;
            totalProtocols: number;
            handoverRevenue: number;
            returnRevenue: number;
            totalRevenue: number;
            rentals: Set<string>;
          }) => ({
            employeeName: emp.employeeName,
            handoverCount: emp.handoverCount,
            returnCount: emp.returnCount,
            totalProtocols: emp.totalProtocols,
            handoverRevenue: emp.handoverRevenue,
            returnRevenue: emp.returnRevenue,
            totalRevenue: emp.totalRevenue,
            uniqueRentals: emp.rentals.size,
          })
        );

        // Sortovanie podľa celkového počtu protokolov
        const topEmployeesByProtocols = [...employeeStatsArray].sort(
          (a, b) => b.totalProtocols - a.totalProtocols
        );
        const topEmployeesByRevenue = [...employeeStatsArray].sort(
          (a, b) => b.totalRevenue - a.totalRevenue
        );
        const topEmployeesByHandovers = [...employeeStatsArray].sort(
          (a, b) => b.handoverCount - a.handoverCount
        );
        const topEmployeesByReturns = [...employeeStatsArray].sort(
          (a, b) => b.returnCount - a.returnCount
        );

        return {
          allEmployees: employeeStatsArray,
          topEmployeesByProtocols,
          topEmployeesByRevenue,
          topEmployeesByHandovers,
          topEmployeesByReturns,
          totalProtocols: filteredProtocols.length,
          totalHandovers: filteredProtocols.filter(
            (p: { type: string }) => p.type === 'handover'
          ).length,
          totalReturns: filteredProtocols.filter(
            (p: { type: string }) => p.type === 'return'
          ).length,
          activeEmployees: employeeStatsArray.length,
        };
      })(),
    };
  }, [
    rentals,
    expenses,
    protocols,
    vehicles,
    selectedYear,
    selectedMonth,
    timeRange,
    filterYear,
    filterMonth,
  ]);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // const toggleMonthExpansion = (monthKey: string) => {
  //   setExpandedMonth(expandedMonth === monthKey ? null : monthKey);
  // };

  // Custom Tooltip pre grafy
  const CustomTooltip = ({
    active,
    payload,
    label,
  }: {
    active?: boolean;
    payload?: Array<{ color: string; value: number; name: string }>;
    label?: string;
  }) => {
    if (active && payload && payload.length) {
      return (
        <Card className="p-4 shadow-md">
          <Typography variant="body2" fontWeight="bold" gutterBottom>
            {label}
          </Typography>
          {payload.map(
            (
              entry: { color: string; value: number; name: string },
              index: number
            ) => (
              <Typography key={index} variant="body2" color={entry.color}>
                {entry.name}: {entry.value.toLocaleString()} €
              </Typography>
            )
          )}
        </Card>
      );
    }
    return null;
  };

  // Modernizované štatistické karty
  const StatCard = ({
    title,
    value,
    subtitle,
    icon,
    gradient,
    trend,
  }: {
    title: string;
    value: string | number;
    subtitle?: string;
    icon: React.ReactNode;
    gradient: string;
    trend?: { value: number; isPositive: boolean };
  }) => (
    <Card
      sx={{
        height: '100%',
        background: gradient,
        color: 'white',
        boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
        transition: 'all 0.2s ease',
        '&:hover': {
          boxShadow: '0 8px 24px rgba(0,0,0,0.2)',
          transform: 'translateY(-4px)',
        },
      }}
    >
      <CardContent>
        <div
          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert mb: 2 */"
        >
          <div>
            <Typography
              variant="h6"
              className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 1 */ /* TODO: Convert opacity: 0.9 */"
            >
              {title.toUpperCase()}
            </Typography>
            <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
              {typeof value === 'number' ? value.toLocaleString() : value}
            </Typography>
            {subtitle && (
              <Typography variant="body2" className="/* TODO: Convert opacity: 0.8 */ /* TODO: Convert mt: 0.5 */">
                {subtitle}
              </Typography>
            )}
          </div>
          <div className="/* TODO: Convert opacity: 0.8 */">
            {React.cloneElement(icon as React.ReactElement, {
              sx: { fontSize: 40 },
            })}
          </div>
        </div>

        {trend && (
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1 /* TODO: Convert mt: 1 */">
            {trend.isPositive ? (
              <TrendingUpIcon className="/* TODO: Convert fontSize: 16 */" />
            ) : (
              <TrendingDownIcon className="/* TODO: Convert fontSize: 16 */" />
            )}
            <Typography variant="body2" className="/* TODO: Convert fontWeight: 600 */">
              {trend.isPositive ? '+' : ''}
              {trend.value}%
            </Typography>
            <Typography variant="body2" className="/* TODO: Convert opacity: 0.8 */">
              vs. predch. obdobie
            </Typography>
          </div>
        )}
      </CardContent>
    </Card>
  );

  // Komponenta pre TOP štatistiky
  const TopStatCard = ({
    title,
    icon,
    data,
    primaryValue,
    secondaryValue,
    gradient,
    percentage,
  }: {
    title: string;
    icon: React.ReactNode;
    data: Record<string, unknown>;
    primaryValue: string;
    secondaryValue: string;
    gradient: string;
    percentage?: number;
  }) => (
    <Card
      sx={{
        height: '100%',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        transition: 'all 0.2s ease',
        '&:hover': {
          boxShadow: '0 8px 24px rgba(0,0,0,0.15)',
          transform: 'translateY(-4px)',
        },
      }}
    >
      <CardContent>
        <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4 /* TODO: Convert mb: 2 */">
          <Avatar
            className="/* TODO: Convert bgcolor: transparent */ /* TODO: Convert background: gradient */ /* TODO: Convert width: 56 */ /* TODO: Convert height: 56 */"
          >
            {icon}
          </Avatar>
          <div className="/* TODO: Convert flex: 1 */">
            <Typography variant="h6" className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */">
              {title}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {data && typeof data === 'object'
                ? 'vehicle' in data &&
                  data.vehicle &&
                  typeof data.vehicle === 'object'
                  ? `${(data.vehicle as Record<string, unknown>).brand || ''} ${(data.vehicle as Record<string, unknown>).model || ''}`.trim() ||
                    'N/A'
                  : 'customerName' in data &&
                      typeof data.customerName === 'string'
                    ? data.customerName
                    : 'N/A'
                : 'N/A'}
            </Typography>
          </div>
          <TrophyIcon className="/* TODO: Convert color: #ffd700 */ /* TODO: Convert fontSize: 32 */" />
        </div>

        <div className="/* TODO: Convert mb: 2 */">
          <Typography
            variant="h4"
            className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */ /* TODO: Convert mb: 0.5 */"
          >
            {primaryValue}
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {secondaryValue}
          </Typography>
        </div>

        {percentage !== undefined && (
          <div className="/* TODO: Convert mt: 2 */">
            <div
              className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert mb: 1 */"
            >
              <Typography variant="body2" color="text.secondary">
                Vyťaženosť
              </Typography>
              <Typography
                variant="body2"
                className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #667eea */"
              >
                {percentage.toFixed(1)}%
              </Typography>
            </div>
            <LinearProgress
              variant="determinate"
              value={Math.min(percentage, 100)}
              sx={{
                height: 8,
                borderRadius: 4,
                backgroundColor: '#e0e0e0',
                '& .MuiLinearProgress-bar': {
                  background: gradient,
                  borderRadius: 4,
                },
              }}
            />
          </div>
        )}
      </CardContent>
    </Card>
  );

  // Nový komponent pre Top 10+ zoznamy
  const TopListCard = ({
    title,
    icon,
    gradient,
    data,
    showCount,
    onLoadMore,
    renderItem,
    emptyMessage = 'Žiadne dáta',
  }: {
    title: string;
    icon: React.ReactNode;
    gradient: string;
    data: Record<string, unknown>[];
    showCount: number;
    onLoadMore: () => void;
    renderItem: (
      item: Record<string, unknown>,
      index: number
    ) => React.ReactNode;
    emptyMessage?: string;
  }) => (
    <Card
      sx={{
        height: 'fit-content',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        transition: 'all 0.2s ease',
        '&:hover': {
          boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
        },
      }}
    >
      <CardContent>
        <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4 /* TODO: Convert mb: 3 */">
          <Avatar
            className="/* TODO: Convert bgcolor: transparent */ /* TODO: Convert background: gradient */ /* TODO: Convert width: 48 */ /* TODO: Convert height: 48 */"
          >
            {icon}
          </Avatar>
          <div className="/* TODO: Convert flex: 1 */">
            <Typography variant="h6" className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */">
              {title}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Top {Math.min(showCount, data.length)} z {data.length}
            </Typography>
          </div>
          <TrophyIcon className="/* TODO: Convert color: #ffd700 */ /* TODO: Convert fontSize: 28 */" />
        </div>

        {data.length === 0 ? (
          <div className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */">
            <Typography variant="body1" color="text.secondary">
              {emptyMessage}
            </Typography>
          </div>
        ) : (
          <>
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-3">
              {data
                .slice(0, showCount)
                .map((item, index) => renderItem(item, index))}
            </div>

            {showCount < data.length && (
              <div className="/* TODO: Convert mt: 3 */ /* TODO: Convert textAlign: center */">
                <Button
                  variant="outlined"
                  onClick={onLoadMore}
                  startIcon={<KeyboardArrowDownIcon />}
                  sx={{
                    borderColor: '#667eea',
                    color: '#667eea',
                    '&:hover': {
                      borderColor: '#5a6fd8',
                      backgroundColor: 'rgba(102, 126, 234, 0.04)',
                    },
                  }}
                >
                  Zobraziť ďalších {Math.min(10, data.length - showCount)}
                </Button>
              </div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  );

  // Pomocná funkcia pre formátovanie obdobia
  const formatPeriod = () => {
    if (timeRange === 'month') {
      return format(new Date(filterYear, filterMonth), 'MMMM yyyy', {
        locale: sk,
      });
    } else if (timeRange === 'year') {
      return `${filterYear}`;
    } else {
      return 'Celá doba BlackRent';
    }
  };

  // Mobile view
  if (isMobile) {
    return (
      <StatisticsMobile
        stats={stats}
        timeRange={timeRange}
        onTimeRangeChange={setTimeRange}
        filterYear={filterYear}
        filterMonth={filterMonth}
        onFilterYearChange={setFilterYear}
        onFilterMonthChange={setFilterMonth}
        onRefresh={() => {
          // Force re-computation of stats
          window.location.reload();
        }}
        isLoading={false}
      />
    );
  }

  // Desktop view
  return (
    <div sx={{ p: { xs: 2, md: 3 } }}>
      {/* Modern Header */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */">
        <CardContent
          className="/* TODO: Convert background: linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert position: relative */"
        >
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */"
          >
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4">
              <DashboardIcon className="/* TODO: Convert fontSize: 32 */" />
              <div>
                <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 0.5 */">
                  Štatistiky & Dashboard
                </Typography>
                <Typography variant="body1" className="/* TODO: Convert opacity: 0.9 */">
                  Prehľad výkonnosti a obchodných trendov
                </Typography>
              </div>
            </div>

            <div className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert alignItems: center */">
              <FormControl size="small" className="/* TODO: Convert minWidth: 120 */">
                <InputLabel
                  sx={{ color: 'white', '&.Mui-focused': { color: 'white' } }}
                >
                  Obdobie
                </InputLabel>
                <Select
                  value={timeRange}
                  onChange={e =>
                    setTimeRange(e.target.value as 'month' | 'year' | 'all')
                  }
                  label="Obdobie"
                  sx={{
                    color: 'white',
                    '.MuiOutlinedInput-notchedOutline': {
                      borderColor: 'rgba(255,255,255,0.3)',
                    },
                    '&:hover .MuiOutlinedInput-notchedOutline': {
                      borderColor: 'rgba(255,255,255,0.5)',
                    },
                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                      borderColor: 'white',
                    },
                    '.MuiSvgIcon-root': {
                      color: 'white',
                    },
                  }}
                >
                  <MenuItem value="month">Mesiac</MenuItem>
                  <MenuItem value="year">Rok</MenuItem>
                  <MenuItem value="all">Celá doba</MenuItem>
                </Select>
              </FormControl>

              {timeRange === 'month' && (
                <FormControl size="small" className="/* TODO: Convert minWidth: 140 */">
                  <InputLabel
                    sx={{ color: 'white', '&.Mui-focused': { color: 'white' } }}
                  >
                    Mesiac
                  </InputLabel>
                  <Select
                    value={filterMonth}
                    onChange={e => setFilterMonth(e.target.value as number)}
                    label="Mesiac"
                    sx={{
                      color: 'white',
                      '.MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255,255,255,0.3)',
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255,255,255,0.5)',
                      },
                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'white',
                      },
                      '.MuiSvgIcon-root': {
                        color: 'white',
                      },
                    }}
                  >
                    {Array.from({ length: 12 }, (_, i) => (
                      <MenuItem key={i} value={i}>
                        {format(new Date(2023, i), 'MMMM', { locale: sk })}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              )}

              {(timeRange === 'month' || timeRange === 'year') && (
                <FormControl size="small" className="/* TODO: Convert minWidth: 100 */">
                  <InputLabel
                    sx={{ color: 'white', '&.Mui-focused': { color: 'white' } }}
                  >
                    Rok
                  </InputLabel>
                  <Select
                    value={filterYear}
                    onChange={e => setFilterYear(e.target.value as number)}
                    label="Rok"
                    sx={{
                      color: 'white',
                      '.MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255,255,255,0.3)',
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255,255,255,0.5)',
                      },
                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'white',
                      },
                      '.MuiSvgIcon-root': {
                        color: 'white',
                      },
                    }}
                  >
                    {Array.from({ length: 5 }, (_, i) => {
                      const year = new Date().getFullYear() - 2 + i;
                      return (
                        <MenuItem key={year} value={year}>
                          {year}
                        </MenuItem>
                      );
                    })}
                  </Select>
                </FormControl>
              )}

              <Button
                variant="contained"
                startIcon={<RefreshIcon />}
                size="small"
                sx={{
                  backgroundColor: 'rgba(255,255,255,0.2)',
                  backdropFilter: 'blur(10px)',
                  border: '1px solid rgba(255,255,255,0.3)',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.3)',
                  },
                }}
              >
                Obnoviť
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Info karta s vybraným obdobím */}
      <Alert severity="info" className="/* TODO: Convert mb: 3 */">
        <Typography variant="body1" className="/* TODO: Convert fontWeight: 600 */">
          📊 Zobrazujú sa dáta za obdobie: <strong>{formatPeriod()}</strong>
        </Typography>
        <Typography variant="body2">
          Prenájmy: {stats.filteredRentals.length} • Náklady Black Holding:{' '}
          {stats.filteredExpenses.length}
        </Typography>
      </Alert>

      {/* NOVÉ štatistické karty pre vybrané obdobie */}
      <Grid container spacing={3} className="/* TODO: Convert mb: 3 */">
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="Tržby za obdobie"
            value={`${stats.totalRevenuePeriod.toLocaleString()} €`}
            subtitle={formatPeriod()}
            icon={<CreditCardIcon />}
            gradient="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
          />
        </Grid>

        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="Náklady Black Holding"
            value={`${stats.blackHoldingExpenses.toLocaleString()} €`}
            subtitle={formatPeriod()}
            icon={<AccountBalanceIcon />}
            gradient="linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
          />
        </Grid>

        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="Provízie za obdobie"
            value={`${stats.totalCommissionPeriod.toLocaleString()} €`}
            subtitle={formatPeriod()}
            icon={<PercentIcon />}
            gradient="linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
          />
        </Grid>
      </Grid>

      {/* Existujúce kľúčové metriky */}
      <Typography
        variant="h5"
        className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 2 */ /* TODO: Convert color: #667eea */"
      >
        Všeobecné štatistiky
      </Typography>
      <Grid container spacing={3} className="/* TODO: Convert mb: 3 */">
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Celkové príjmy"
            value={`${stats.totalRevenue.toLocaleString()} €`}
            subtitle="Všetky časy"
            icon={<EuroIcon />}
            gradient="linear-gradient(135deg, #11998e 0%, #38ef7d 100%)"
            trend={{ value: 12.5, isPositive: true }}
          />
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Aktívne prenájmy"
            value={stats.activeRentals.length}
            subtitle="Momentálne aktívne"
            icon={<CarIcon />}
            gradient="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
          />
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Dnešné vrátenia"
            value={stats.todayReturns.length}
            subtitle="Vrátenia dnes"
            icon={<CalendarIcon />}
            gradient="linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%)"
          />
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Nezaplatené"
            value={stats.unpaidRentals.length}
            subtitle="Čakajú na platbu"
            icon={<WarningIcon />}
            gradient="linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
          />
        </Grid>
      </Grid>

      {/* Modernizované Tabs */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert boxShadow: 0 2px 8px rgba(0 */">
        <div
          className="/* TODO: Convert borderBottom: 1 */ /* TODO: Convert borderColor: divider */ /* TODO: Convert background: linear-gradient(90deg */"
        >
          <Tabs
            value={tabValue}
            onChange={handleTabChange}
            aria-label="statistics tabs"
            sx={{
              '& .MuiTab-root': {
                textTransform: 'none',
                fontWeight: 600,
                fontSize: '1rem',
                minHeight: 64,
                '&.Mui-selected': {
                  color: '#667eea',
                },
              },
              '& .MuiTabs-indicator': {
                backgroundColor: '#667eea',
                height: 3,
              },
            }}
          >
            <Tab
              label={
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <AssessmentIcon />
                  Prehľad
                </div>
              }
            />
            <Tab
              label={
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <ShowChartIcon />
                  Grafy
                </div>
              }
            />
            <Tab
              label={
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <BusinessIcon />
                  Firmy
                </div>
              }
            />
            <Tab
              label={
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <PaymentIcon />
                  Platby
                </div>
              }
            />
            <Tab
              label={
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <TrophyIcon />
                  Top štatistiky
                </div>
              }
            />
            <Tab
              label={
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
                  <PersonIcon />
                  Zamestnanci
                </div>
              }
            />
          </Tabs>
        </div>

        {/* Tab 1: Prehľad */}
        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={3}>
            {/* Mesiačný trend */}
            <Grid item xs={12} lg={8}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Mesiačný trend príjmov
                  </Typography>
                  <ResponsiveContainer width="100%" height={300}>
                    <AreaChart data={stats.monthlyData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <Tooltip content={<CustomTooltip />} />
                      <Area
                        type="monotone"
                        dataKey="revenue"
                        stroke="#667eea"
                        fill="url(#colorRevenue)"
                        strokeWidth={3}
                        name="Príjmy"
                      />
                      <defs>
                        <linearGradient
                          id="colorRevenue"
                          x1="0"
                          y1="0"
                          x2="0"
                          y2="1"
                        >
                          <stop
                            offset="5%"
                            stopColor="#667eea"
                            stopOpacity={0.8}
                          />
                          <stop
                            offset="95%"
                            stopColor="#667eea"
                            stopOpacity={0.1}
                          />
                        </linearGradient>
                      </defs>
                    </AreaChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </Grid>

            {/* Rýchle štatistiky */}
            <Grid item xs={12} lg={4}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Rýchle štatistiky
                  </Typography>
                  <div
                    className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-4"
                  >
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ p-4 rounded /* TODO: Convert backgroundColor: #f8f9fa */"
                    >
                      <Typography variant="body2" className="/* TODO: Convert fontWeight: 600 */">
                        Priemerná cena
                      </Typography>
                      <Typography
                        variant="h6"
                        fontWeight="bold"
                        className="/* TODO: Convert color: #11998e */"
                      >
                        {stats.avgRentalPrice.toFixed(2)} €
                      </Typography>
                    </div>
                    <Divider />
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ p-4 rounded /* TODO: Convert backgroundColor: #f8f9fa */"
                    >
                      <Typography variant="body2" className="/* TODO: Convert fontWeight: 600 */">
                        Priemerná dĺžka
                      </Typography>
                      <Typography
                        variant="h6"
                        fontWeight="bold"
                        className="/* TODO: Convert color: #667eea */"
                      >
                        {stats.avgRentalDuration.toFixed(1)} dní
                      </Typography>
                    </div>
                    <Divider />
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ p-4 rounded /* TODO: Convert backgroundColor: #f8f9fa */"
                    >
                      <Typography variant="body2" className="/* TODO: Convert fontWeight: 600 */">
                        Celková provízia
                      </Typography>
                      <Typography
                        variant="h6"
                        fontWeight="bold"
                        color="warning.main"
                      >
                        {stats.totalCommission.toLocaleString()} €
                      </Typography>
                    </div>
                    <Divider />
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ p-4 rounded /* TODO: Convert backgroundColor: #f8f9fa */"
                    >
                      <Typography variant="body2" className="/* TODO: Convert fontWeight: 600 */">
                        Zajtrajšie vrátenia
                      </Typography>
                      <Typography
                        variant="h6"
                        fontWeight="bold"
                        color="info.main"
                      >
                        {stats.tomorrowReturns.length}
                      </Typography>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </Grid>

            {/* Top firmy */}
            <Grid item xs={12}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Top firmy podľa príjmov
                  </Typography>
                  <TableContainer>
                    <Table>
                      <TableHead>
                        <TableRow className="/* TODO: Convert backgroundColor: #f8f9fa */">
                          <TableCell className="/* TODO: Convert fontWeight: 700 */">Firma</TableCell>
                          <TableCell align="right" className="/* TODO: Convert fontWeight: 700 */">
                            Počet prenájmov
                          </TableCell>
                          <TableCell align="right" className="/* TODO: Convert fontWeight: 700 */">
                            Príjmy
                          </TableCell>
                          <TableCell align="right" className="/* TODO: Convert fontWeight: 700 */">
                            Provízia
                          </TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {Object.entries(stats.companyStats)
                          .sort(([, a], [, b]) => b.revenue - a.revenue)
                          .slice(0, 5)
                          .map(([company, data]) => (
                            <TableRow
                              key={company}
                              sx={{
                                '&:hover': {
                                  backgroundColor: '#f8f9fa',
                                },
                                transition: 'background-color 0.2s ease',
                              }}
                            >
                              <TableCell>
                                <div
                                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                                >
                                  <Avatar
                                    className="/* TODO: Convert width: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert bgcolor: #667eea */"
                                  >
                                    <PersonIcon fontSize="small" />
                                  </Avatar>
                                  <Typography
                                    variant="body2"
                                    fontWeight="medium"
                                  >
                                    {company}
                                  </Typography>
                                </div>
                              </TableCell>
                              <TableCell align="right">
                                <Chip
                                  label={data.count}
                                  size="small"
                                  className="/* TODO: Convert backgroundColor: #667eea */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 600 */"
                                />
                              </TableCell>
                              <TableCell align="right">
                                <Typography
                                  variant="body2"
                                  fontWeight="bold"
                                  className="/* TODO: Convert color: #11998e */"
                                >
                                  {data.revenue.toLocaleString()} €
                                </Typography>
                              </TableCell>
                              <TableCell align="right">
                                <Typography
                                  variant="body2"
                                  color="warning.main"
                                  fontWeight="bold"
                                >
                                  {data.commission.toLocaleString()} €
                                </Typography>
                              </TableCell>
                            </TableRow>
                          ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </TabPanel>

        {/* Tab 2: Grafy */}
        <TabPanel value={tabValue} index={1}>
          <Grid container spacing={3}>
            {/* Stĺpcový graf - mesiačné prenájmy */}
            <Grid item xs={12} lg={6}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Počet prenájmov podľa mesiacov
                  </Typography>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={stats.monthlyData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <Tooltip />
                      <Bar
                        dataKey="rentals"
                        fill="#667eea"
                        name="Prenájmy"
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </Grid>

            {/* Koláčový graf - spôsoby platby */}
            <Grid item xs={12} lg={6}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Rozdelenie podľa spôsobu platby
                  </Typography>
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={Object.entries(stats.paymentMethodStats).map(
                          ([method, data]) => ({
                            name: method,
                            value: data.count,
                          })
                        )}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, percent }) =>
                          `${name} ${((percent || 0) * 100).toFixed(0)}%`
                        }
                        outerRadius={80}
                        fill="#667eea"
                        dataKey="value"
                      >
                        {Object.entries(stats.paymentMethodStats).map(
                          (entry, index) => (
                            <Cell
                              key={`cell-${index}`}
                              fill={COLORS[index % COLORS.length]}
                            />
                          )
                        )}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </Grid>

            {/* Línový graf - trend príjmov vs provízií */}
            <Grid item xs={12}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Trend príjmov vs provízií
                  </Typography>
                  <ResponsiveContainer width="100%" height={400}>
                    <LineChart data={stats.monthlyData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <Tooltip content={<CustomTooltip />} />
                      <Legend />
                      <Line
                        type="monotone"
                        dataKey="revenue"
                        stroke="#667eea"
                        strokeWidth={3}
                        name="Príjmy"
                        dot={{ fill: '#667eea', strokeWidth: 2, r: 6 }}
                      />
                      <Line
                        type="monotone"
                        dataKey="commission"
                        stroke="#11998e"
                        strokeWidth={3}
                        name="Provízie"
                        dot={{ fill: '#11998e', strokeWidth: 2, r: 6 }}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </TabPanel>

        {/* Tab 3: Firmy */}
        <TabPanel value={tabValue} index={2}>
          <Grid container spacing={3}>
            {Object.entries(stats.companyStats)
              .sort(([, a], [, b]) => b.revenue - a.revenue)
              .map(([company, data]) => (
                <Grid item xs={12} md={6} lg={4} key={company}>
                  <Card
                    sx={{
                      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                      transition: 'all 0.2s ease',
                      '&:hover': {
                        boxShadow: '0 8px 24px rgba(0,0,0,0.15)',
                        transform: 'translateY(-4px)',
                      },
                    }}
                  >
                    <CardContent>
                      <div
                        className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4 /* TODO: Convert mb: 2 */"
                      >
                        <Avatar className="/* TODO: Convert bgcolor: #667eea */">
                          <PersonIcon />
                        </Avatar>
                        <div>
                          <Typography variant="h6" fontWeight="bold">
                            {company}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {data.count} prenájmov
                          </Typography>
                        </div>
                      </div>

                      <div
                        className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert mb: 1 */ p-3 rounded /* TODO: Convert backgroundColor: #f8f9fa */"
                      >
                        <Typography variant="body2" className="/* TODO: Convert fontWeight: 600 */">
                          Príjmy:
                        </Typography>
                        <Typography
                          variant="body2"
                          fontWeight="bold"
                          className="/* TODO: Convert color: #11998e */"
                        >
                          {data.revenue.toLocaleString()} €
                        </Typography>
                      </div>

                      <div
                        className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ p-3 rounded /* TODO: Convert backgroundColor: #fff3e0 */"
                      >
                        <Typography variant="body2" className="/* TODO: Convert fontWeight: 600 */">
                          Provízia:
                        </Typography>
                        <Typography
                          variant="body2"
                          color="warning.main"
                          fontWeight="bold"
                        >
                          {data.commission.toLocaleString()} €
                        </Typography>
                      </div>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
          </Grid>
        </TabPanel>

        {/* Tab 4: Platby */}
        <TabPanel value={tabValue} index={3}>
          <Grid container spacing={3}>
            <Grid item xs={12} lg={8}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Štatistiky platieb
                  </Typography>
                  <TableContainer>
                    <Table>
                      <TableHead>
                        <TableRow className="/* TODO: Convert backgroundColor: #f8f9fa */">
                          <TableCell className="/* TODO: Convert fontWeight: 700 */">
                            Spôsob platby
                          </TableCell>
                          <TableCell align="right" className="/* TODO: Convert fontWeight: 700 */">
                            Počet
                          </TableCell>
                          <TableCell align="right" className="/* TODO: Convert fontWeight: 700 */">
                            Príjmy
                          </TableCell>
                          <TableCell align="right" className="/* TODO: Convert fontWeight: 700 */">
                            Podiel
                          </TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {Object.entries(stats.paymentMethodStats)
                          .sort(([, a], [, b]) => b.revenue - a.revenue)
                          .map(([method, data]) => {
                            const percentage =
                              (data.revenue / stats.totalRevenue) * 100;
                            return (
                              <TableRow
                                key={method}
                                sx={{
                                  '&:hover': {
                                    backgroundColor: '#f8f9fa',
                                  },
                                  transition: 'background-color 0.2s ease',
                                }}
                              >
                                <TableCell>
                                  <div
                                    className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                                  >
                                    <Chip
                                      label={method}
                                      size="small"
                                      className="/* TODO: Convert backgroundColor: #667eea */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 600 */"
                                    />
                                  </div>
                                </TableCell>
                                <TableCell align="right">
                                  <Typography variant="body2" fontWeight="bold">
                                    {data.count}
                                  </Typography>
                                </TableCell>
                                <TableCell align="right">
                                  <Typography
                                    variant="body2"
                                    fontWeight="bold"
                                    className="/* TODO: Convert color: #11998e */"
                                  >
                                    {data.revenue.toLocaleString()} €
                                  </Typography>
                                </TableCell>
                                <TableCell align="right">
                                  <Typography
                                    variant="body2"
                                    color="text.secondary"
                                    fontWeight="bold"
                                  >
                                    {percentage.toFixed(1)}%
                                  </Typography>
                                </TableCell>
                              </TableRow>
                            );
                          })}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} lg={4}>
              <Card
                sx={{
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  '&:hover': {
                    boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                  },
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    gutterBottom
                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                  >
                    Nezaplatené prenájmy
                  </Typography>
                  {stats.unpaidRentals.length === 0 ? (
                    <div className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */">
                      <CheckCircleIcon
                        className="/* TODO: Convert fontSize: 48 */ /* TODO: Convert color: success.main */ /* TODO: Convert mb: 2 */"
                      />
                      <Typography
                        variant="body1"
                        color="success.main"
                        gutterBottom
                        fontWeight="bold"
                      >
                        Všetky prenájmy sú zaplatené!
                      </Typography>
                    </div>
                  ) : (
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-4"
                    >
                      {stats.unpaidRentals.slice(0, 5).map(rental => (
                        <div
                          key={rental.id}
                          sx={{
                            p: 2,
                            border: '1px solid',
                            borderColor: 'divider',
                            borderRadius: 2,
                            backgroundColor: '#fff3e0',
                            transition: 'all 0.2s ease',
                            '&:hover': {
                              boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                              transform: 'translateY(-2px)',
                            },
                          }}
                        >
                          <Typography variant="body2" fontWeight="bold">
                            {rental.customerName}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {rental.vehicle?.brand} {rental.vehicle?.model}
                          </Typography>
                          <Typography
                            variant="body2"
                            color="error.main"
                            fontWeight="bold"
                          >
                            {rental.totalPrice?.toLocaleString()} €
                          </Typography>
                        </div>
                      ))}
                      {stats.unpaidRentals.length > 5 && (
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          textAlign="center"
                          fontWeight="bold"
                        >
                          + {stats.unpaidRentals.length - 5} ďalších
                        </Typography>
                      )}
                    </div>
                  )}
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </TabPanel>

        {/* Tab 5: NOVÝ - Top štatistiky */}
        <TabPanel value={tabValue} index={4}>
          <Grid container spacing={3}>
            {/* Úvodný prehľad */}
            <Grid item xs={12}>
              <Card
                className="/* TODO: Convert mb: 3 */ /* TODO: Convert background:
                    linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
              >
                <CardContent>
                  <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4">
                    <TrophyIcon className="/* TODO: Convert fontSize: 40 */" />
                    <div>
                      <Typography
                        variant="h4"
                        className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 0.5 */"
                      >
                        TOP Štatistiky
                      </Typography>
                      <Typography variant="body1" className="/* TODO: Convert opacity: 0.9 */">
                        Najlepšie výkony za obdobie: {formatPeriod()}
                      </Typography>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </Grid>

            {/* 🏆 NAJLEPŠIE VÝKONY - Prehľadové karty */}
            <Grid item xs={12}>
              <Typography
                variant="h5"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 3 */ /* TODO: Convert color: #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
              >
                <StarIcon />
                🏆 Najlepšie výkony
              </Typography>
            </Grid>

            {/* Top výkony v 3 kartách */}
            <Grid item xs={12} md={4}>
              <TopStatCard
                title="Najvyťaženejšie auto"
                icon={<SpeedIcon />}
                data={
                  (stats.topVehicleByUtilization as Record<string, unknown>) ||
                  {}
                }
                primaryValue={
                  stats.topVehicleByUtilization
                    ? `${stats.topVehicleByUtilization.utilizationPercentage.toFixed(1)}%`
                    : 'N/A'
                }
                secondaryValue={
                  stats.topVehicleByUtilization
                    ? `${stats.topVehicleByUtilization.totalDaysRented} dní prenájmu`
                    : ''
                }
                gradient="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                percentage={
                  stats.topVehicleByUtilization?.utilizationPercentage
                }
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <TopStatCard
                title="Najvýnosnejšie auto"
                icon={<EuroIcon />}
                data={
                  (stats.topVehicleByRevenue as Record<string, unknown>) || {}
                }
                primaryValue={
                  stats.topVehicleByRevenue
                    ? `${stats.topVehicleByRevenue.totalRevenue.toLocaleString()} €`
                    : 'N/A'
                }
                secondaryValue={
                  stats.topVehicleByRevenue
                    ? `${stats.topVehicleByRevenue.rentalCount} prenájmov`
                    : ''
                }
                gradient="linear-gradient(135deg, #11998e 0%, #38ef7d 100%)"
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <TopStatCard
                title="Najaktívnejší zákazník"
                icon={<PersonIcon />}
                data={
                  (stats.topCustomerByRentals as Record<string, unknown>) || {}
                }
                primaryValue={
                  stats.topCustomerByRentals
                    ? `${stats.topCustomerByRentals.rentalCount}x`
                    : 'N/A'
                }
                secondaryValue={
                  stats.topCustomerByRentals
                    ? `${stats.topCustomerByRentals.totalRevenue.toLocaleString()} € celkom`
                    : ''
                }
                gradient="linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%)"
              />
            </Grid>

            {/* Divider */}
            <Grid item xs={12}>
              <Divider className="/* TODO: Convert my: 2 */" />
            </Grid>

            {/* 🚗 TOP AUTÁ - Detailné rebríčky */}
            <Grid item xs={12}>
              <Typography
                variant="h5"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 3 */ /* TODO: Convert color: #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
              >
                <CarIcon />
                🚗 TOP Autá - Detailné rebríčky
              </Typography>
            </Grid>

            <Grid item xs={12} lg={4}>
              <TopListCard
                title="Najvyťaženejšie autá"
                icon={<SpeedIcon />}
                gradient="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                data={stats.vehiclesByUtilization as Record<string, unknown>[]}
                showCount={showVehiclesByUtilization}
                onLoadMore={() =>
                  setShowVehiclesByUtilization(prev => prev + 10)
                }
                renderItem={(vehicleData, index) => {
                  const vehicle = vehicleData as VehicleStatistic;
                  return (
                    <div
                      key={vehicle.vehicle?.id || index}
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 2,
                        p: 2,
                        borderRadius: 2,
                        backgroundColor:
                          index < 3 ? 'rgba(102, 126, 234, 0.04)' : '#f8f9fa',
                        border:
                          index === 0
                            ? '2px solid #ffd700'
                            : '1px solid #e0e0e0',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          transform: 'translateX(4px)',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                        },
                      }}
                    >
                      <div
                        className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                            index < 3
                              ? linear-gradient(135deg */ /* TODO: Convert #764ba2 100%)
                              : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
                      >
                        {index + 1}
                      </div>

                      <Avatar
                        className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #667eea */"
                      >
                        <CarIcon fontSize="small" />
                      </Avatar>

                      <div className="/* TODO: Convert flex: 1 */">
                        <Typography variant="body2" fontWeight="bold">
                          {vehicle.vehicle?.brand || 'N/A'}{' '}
                          {vehicle.vehicle?.model || ''}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {vehicle.vehicle?.licensePlate || 'N/A'} •{' '}
                          {vehicle.totalDaysRented || 0} dní
                        </Typography>
                      </div>

                      <div className="/* TODO: Convert textAlign: right */ /* TODO: Convert minWidth: 80 */">
                        <Typography
                          variant="h6"
                          fontWeight="bold"
                          className="/* TODO: Convert color:
                              (vehicle.utilizationPercentage || 0) > 70
                                ? #4caf50
                                : (vehicle.utilizationPercentage || 0) > 40
                                  ? #ff9800
                                  : #f44336 */"
                        >
                          {(vehicle.utilizationPercentage || 0).toFixed(1)}%
                        </Typography>
                        <LinearProgress
                          variant="determinate"
                          value={Math.min(
                            vehicle.utilizationPercentage || 0,
                            100
                          )}
                          sx={{
                            height: 6,
                            borderRadius: 3,
                            backgroundColor: '#e0e0e0',
                            '& .MuiLinearProgress-bar': {
                              background:
                                (vehicle.utilizationPercentage || 0) > 70
                                  ? '#4caf50'
                                  : (vehicle.utilizationPercentage || 0) > 40
                                    ? '#ff9800'
                                    : '#f44336',
                              borderRadius: 3,
                            },
                          }}
                        />
                      </div>
                    </div>
                  );
                }}
                emptyMessage="Žiadne autá v tomto období"
              />
            </Grid>

            <Grid item xs={12} lg={4}>
              <TopListCard
                title="Najvýnosnejšie autá"
                icon={<EuroIcon />}
                gradient="linear-gradient(135deg, #11998e 0%, #38ef7d 100%)"
                data={stats.vehiclesByRevenue as Record<string, unknown>[]}
                showCount={showVehiclesByRevenue}
                onLoadMore={() => setShowVehiclesByRevenue(prev => prev + 10)}
                renderItem={(vehicleData, index) => {
                  const vehicle = vehicleData as VehicleStatistic;
                  return (
                    <div
                      key={vehicle.vehicle?.id || index}
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 2,
                        p: 2,
                        borderRadius: 2,
                        backgroundColor:
                          index < 3 ? 'rgba(17, 153, 142, 0.04)' : '#f8f9fa',
                        border:
                          index === 0
                            ? '2px solid #ffd700'
                            : '1px solid #e0e0e0',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          transform: 'translateX(4px)',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                        },
                      }}
                    >
                      <div
                        className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                            index < 3
                              ? linear-gradient(135deg */ /* TODO: Convert #38ef7d 100%)
                              : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
                      >
                        {index + 1}
                      </div>

                      <Avatar
                        className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #11998e */"
                      >
                        <CarIcon fontSize="small" />
                      </Avatar>

                      <div className="/* TODO: Convert flex: 1 */">
                        <Typography variant="body2" fontWeight="bold">
                          {vehicle.vehicle?.brand || 'N/A'}{' '}
                          {vehicle.vehicle?.model || ''}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {vehicle.vehicle?.licensePlate || 'N/A'} •{' '}
                          {vehicle.rentalCount || 0} prenájmov
                        </Typography>
                      </div>

                      <div className="/* TODO: Convert textAlign: right */">
                        <Typography
                          variant="h6"
                          fontWeight="bold"
                          className="/* TODO: Convert color: #11998e */"
                        >
                          {(vehicle.totalRevenue || 0).toLocaleString()} €
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {(vehicle.avgRevenuePerRental || 0).toFixed(0)}{' '}
                          €/prenájom
                        </Typography>
                      </div>
                    </div>
                  );
                }}
                emptyMessage="Žiadne autá v tomto období"
              />
            </Grid>

            <Grid item xs={12} lg={4}>
              <TopListCard
                title="Najčastejšie prenajímané"
                icon={<CarIcon />}
                gradient="linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
                data={stats.vehiclesByRentals as Record<string, unknown>[]}
                showCount={showVehiclesByRentals}
                onLoadMore={() => setShowVehiclesByRentals(prev => prev + 10)}
                renderItem={(vehicleData, index) => {
                  const vehicle = vehicleData as VehicleStatistic;
                  return (
                    <div
                      key={vehicle.vehicle?.id || index}
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 2,
                        p: 2,
                        borderRadius: 2,
                        backgroundColor:
                          index < 3 ? 'rgba(240, 147, 251, 0.04)' : '#f8f9fa',
                        border:
                          index === 0
                            ? '2px solid #ffd700'
                            : '1px solid #e0e0e0',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          transform: 'translateX(4px)',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                        },
                      }}
                    >
                      <div
                        className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                            index < 3
                              ? linear-gradient(135deg */ /* TODO: Convert #f5576c 100%)
                              : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
                      >
                        {index + 1}
                      </div>

                      <Avatar
                        className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #f093fb */"
                      >
                        <CarIcon fontSize="small" />
                      </Avatar>

                      <div className="/* TODO: Convert flex: 1 */">
                        <Typography variant="body2" fontWeight="bold">
                          {vehicle.vehicle?.brand || 'N/A'}{' '}
                          {vehicle.vehicle?.model || ''}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {vehicle.vehicle?.licensePlate || 'N/A'} •{' '}
                          {vehicle.totalDaysRented || 0} dní celkom
                        </Typography>
                      </div>

                      <div className="/* TODO: Convert textAlign: right */">
                        <Typography
                          variant="h6"
                          fontWeight="bold"
                          className="/* TODO: Convert color: #f093fb */"
                        >
                          {vehicle.rentalCount || 0}x
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {(vehicle.totalRevenue || 0).toLocaleString()} €
                          celkom
                        </Typography>
                      </div>
                    </div>
                  );
                }}
                emptyMessage="Žiadne autá v tomto období"
              />
            </Grid>

            {/* Divider */}
            <Grid item xs={12}>
              <Divider className="/* TODO: Convert my: 2 */" />
            </Grid>

            {/* 👥 TOP ZÁKAZNÍCI - Detailné rebríčky */}
            <Grid item xs={12}>
              <Typography
                variant="h5"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 3 */ /* TODO: Convert color: #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
              >
                <PersonIcon />
                👥 TOP Zákazníci - Detailné rebríčky
              </Typography>
            </Grid>

            <Grid item xs={12} lg={4}>
              <TopListCard
                title="Najaktívnejší zákazníci"
                icon={<StarIcon />}
                gradient="linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%)"
                data={stats.customersByRentals as Record<string, unknown>[]}
                showCount={showCustomersByRentals}
                onLoadMore={() => setShowCustomersByRentals(prev => prev + 10)}
                renderItem={(customerData, index) => {
                  const customer = customerData as CustomerStatistic;
                  return (
                    <div
                      key={customer.customerName || index}
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 2,
                        p: 2,
                        borderRadius: 2,
                        backgroundColor:
                          index < 3 ? 'rgba(255, 154, 158, 0.04)' : '#f8f9fa',
                        border:
                          index === 0
                            ? '2px solid #ffd700'
                            : '1px solid #e0e0e0',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          transform: 'translateX(4px)',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                        },
                      }}
                    >
                      <div
                        className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                            index < 3
                              ? linear-gradient(135deg */ /* TODO: Convert #fad0c4 100%)
                              : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
                      >
                        {index + 1}
                      </div>

                      <Avatar
                        className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #ff9a9e */"
                      >
                        <PersonIcon fontSize="small" />
                      </Avatar>

                      <div className="/* TODO: Convert flex: 1 */">
                        <Typography variant="body2" fontWeight="bold">
                          {customer.customerName || 'N/A'}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {customer.totalDaysRented || 0} dní celkom • Priemer:{' '}
                          {(customer.avgRentalDuration || 0).toFixed(1)} dní
                        </Typography>
                      </div>

                      <div className="/* TODO: Convert textAlign: right */">
                        <Typography
                          variant="h6"
                          fontWeight="bold"
                          className="/* TODO: Convert color: #ff9a9e */"
                        >
                          {customer.rentalCount || 0}x
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {(customer.totalRevenue || 0).toLocaleString()} €
                          celkom
                        </Typography>
                      </div>
                    </div>
                  );
                }}
                emptyMessage="Žiadni zákazníci v tomto období"
              />
            </Grid>

            <Grid item xs={12} lg={4}>
              <TopListCard
                title="Najziskovejší zákazníci"
                icon={<MoneyIcon />}
                gradient="linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
                data={stats.customersByRevenue as Record<string, unknown>[]}
                showCount={showCustomersByRevenue}
                onLoadMore={() => setShowCustomersByRevenue(prev => prev + 10)}
                renderItem={(customerData, index) => {
                  const customer = customerData as CustomerStatistic;
                  return (
                    <div
                      key={customer.customerName || index}
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 2,
                        p: 2,
                        borderRadius: 2,
                        backgroundColor:
                          index < 3 ? 'rgba(255, 107, 107, 0.04)' : '#f8f9fa',
                        border:
                          index === 0
                            ? '2px solid #ffd700'
                            : '1px solid #e0e0e0',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          transform: 'translateX(4px)',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                        },
                      }}
                    >
                      <div
                        className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                            index < 3
                              ? linear-gradient(135deg */ /* TODO: Convert #ee5a24 100%)
                              : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
                      >
                        {index + 1}
                      </div>

                      <Avatar
                        className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #ff6b6b */"
                      >
                        <PersonIcon fontSize="small" />
                      </Avatar>

                      <div className="/* TODO: Convert flex: 1 */">
                        <Typography variant="body2" fontWeight="bold">
                          {customer.customerName || 'N/A'}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {customer.rentalCount || 0} prenájmov •{' '}
                          {customer.totalDaysRented || 0} dní
                        </Typography>
                      </div>

                      <div className="/* TODO: Convert textAlign: right */">
                        <Typography
                          variant="h6"
                          fontWeight="bold"
                          className="/* TODO: Convert color: #ff6b6b */"
                        >
                          {(customer.totalRevenue || 0).toLocaleString()} €
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {(
                            (customer.totalRevenue || 0) /
                            (customer.rentalCount || 1)
                          ).toFixed(0)}{' '}
                          €/prenájom
                        </Typography>
                      </div>
                    </div>
                  );
                }}
                emptyMessage="Žiadni zákazníci v tomto období"
              />
            </Grid>

            <Grid item xs={12} lg={4}>
              <TopListCard
                title="Najdlhodobejší zákazníci"
                icon={<TimeIcon />}
                gradient="linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
                data={stats.customersByDays as Record<string, unknown>[]}
                showCount={showCustomersByDays}
                onLoadMore={() => setShowCustomersByDays(prev => prev + 10)}
                renderItem={(customerData, index) => {
                  const customer = customerData as CustomerStatistic;
                  return (
                    <div
                      key={customer.customerName || index}
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 2,
                        p: 2,
                        borderRadius: 2,
                        backgroundColor:
                          index < 3 ? 'rgba(79, 172, 254, 0.04)' : '#f8f9fa',
                        border:
                          index === 0
                            ? '2px solid #ffd700'
                            : '1px solid #e0e0e0',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          transform: 'translateX(4px)',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                        },
                      }}
                    >
                      <div
                        className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                            index < 3
                              ? linear-gradient(135deg */ /* TODO: Convert #00f2fe 100%)
                              : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
                      >
                        {index + 1}
                      </div>

                      <Avatar
                        className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #4facfe */"
                      >
                        <PersonIcon fontSize="small" />
                      </Avatar>

                      <div className="/* TODO: Convert flex: 1 */">
                        <Typography variant="body2" fontWeight="bold">
                          {customer.customerName || 'N/A'}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {customer.rentalCount || 0} prenájmov •{' '}
                          {(customer.totalRevenue || 0).toLocaleString()} €
                        </Typography>
                      </div>

                      <div className="/* TODO: Convert textAlign: right */">
                        <Typography
                          variant="h6"
                          fontWeight="bold"
                          className="/* TODO: Convert color: #4facfe */"
                        >
                          {customer.totalDaysRented || 0} dní
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          Priemer:{' '}
                          {(customer.avgRentalDuration || 0).toFixed(1)}{' '}
                          dní/prenájom
                        </Typography>
                      </div>
                    </div>
                  );
                }}
                emptyMessage="Žiadni zákazníci v tomto období"
              />
            </Grid>
          </Grid>
        </TabPanel>

        {/* Tab 6: Zamestnanci */}
        <TabPanel value={tabValue} index={5}>
          <Grid container spacing={3}>
            {/* Header */}
            <Grid item xs={12}>
              <Typography
                variant="h5"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 3 */ /* TODO: Convert color: #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
              >
                <PersonIcon />
                Výkon zamestnancov za obdobie: {formatPeriod()}
              </Typography>
            </Grid>

            {/* Employee Statistics Cards */}
            {stats.employeeStats && stats.employeeStats.activeEmployees > 0 ? (
              <>
                {/* Summary Stats */}
                <Grid item xs={12}>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6} md={3}>
                      <Card
                        className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */ /* TODO: Convert background:
                            linear-gradient(135deg */ /* TODO: Convert color: white */"
                      >
                        <CardContent className="/* TODO: Convert textAlign: center */">
                          <Typography
                            variant="h4"
                            className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 1 */"
                          >
                            {stats.employeeStats.totalProtocols}
                          </Typography>
                          <Typography variant="body2">
                            Celkovo protokolov
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3}>
                      <Card
                        className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */ /* TODO: Convert background:
                            linear-gradient(135deg */ /* TODO: Convert color: white */"
                      >
                        <CardContent className="/* TODO: Convert textAlign: center */">
                          <Typography
                            variant="h4"
                            className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 1 */"
                          >
                            {stats.employeeStats.totalHandovers}
                          </Typography>
                          <Typography variant="body2">Odovzdaní</Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3}>
                      <Card
                        className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */ /* TODO: Convert background:
                            linear-gradient(135deg */ /* TODO: Convert color: white */"
                      >
                        <CardContent className="/* TODO: Convert textAlign: center */">
                          <Typography
                            variant="h4"
                            className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 1 */"
                          >
                            {stats.employeeStats.totalReturns}
                          </Typography>
                          <Typography variant="body2">Prebraní</Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3}>
                      <Card
                        className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */ /* TODO: Convert background:
                            linear-gradient(135deg */ /* TODO: Convert color: white */"
                      >
                        <CardContent className="/* TODO: Convert textAlign: center */">
                          <Typography
                            variant="h4"
                            className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 1 */"
                          >
                            {stats.employeeStats.activeEmployees}
                          </Typography>
                          <Typography variant="body2">
                            Aktívnych zamestnancov
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  </Grid>
                </Grid>

                {/* Top Employees by Protocols */}
                <Grid item xs={12} lg={6}>
                  <Card
                    className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */ /* TODO: Convert height: 100% */"
                  >
                    <CardContent>
                      <Typography
                        variant="h6"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 2 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                      >
                        <TrophyIcon />
                        Top zamestnanci (protokoly)
                      </Typography>
                      <div className="/* TODO: Convert maxHeight: 400 */ /* TODO: Convert overflowY: auto */">
                        {stats.employeeStats.topEmployeesByProtocols
                          .slice(0, 10)
                          .map(
                            (
                              employeeData: Record<string, unknown>,
                              index: number
                            ) => {
                              const employee =
                                employeeData as EmployeeStatistic;
                              return (
                                <div
                                  key={employee.employeeName || index}
                                  className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ p-4 /* TODO: Convert mb: 1 */ /* TODO: Convert bgcolor:
                                      index < 3
                                        ? rgba(102 */ /* TODO: Convert 0.1)
                                        : background.paper */ rounded-md /* TODO: Convert border:
                                      index < 3
                                        ? 1px solid rgba(102 */ /* TODO: Convert 0.2)
                                        : 1px solid rgba(0 */"
                                >
                                  <div
                                    className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4"
                                  >
                                    <div
                                      className="/* TODO: Convert width: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert bgcolor:
                                          index === 0
                                            ? #FFD700
                                            : index === 1
                                              ? #C0C0C0
                                              : index === 2
                                                ? #CD7F32
                                                : #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */"
                                    >
                                      {index + 1}
                                    </div>
                                    <div>
                                      <Typography
                                        variant="body1"
                                        className="/* TODO: Convert fontWeight: 600 */"
                                      >
                                        {employee.employeeName || 'N/A'}
                                      </Typography>
                                      <Typography
                                        variant="caption"
                                        color="text.secondary"
                                      >
                                        {employee.handoverCount || 0} odovzdaní
                                        • {employee.returnCount || 0} prebraní
                                      </Typography>
                                    </div>
                                  </div>
                                  <Typography
                                    variant="h6"
                                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */"
                                  >
                                    {employee.totalProtocols || 0}
                                  </Typography>
                                </div>
                              );
                            }
                          )}
                      </div>
                    </CardContent>
                  </Card>
                </Grid>

                {/* Top Employees by Revenue */}
                <Grid item xs={12} lg={6}>
                  <Card
                    className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */ /* TODO: Convert height: 100% */"
                  >
                    <CardContent>
                      <Typography
                        variant="h6"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 2 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                      >
                        <EuroIcon />
                        Top zamestnanci (tržby)
                      </Typography>
                      <div className="/* TODO: Convert maxHeight: 400 */ /* TODO: Convert overflowY: auto */">
                        {stats.employeeStats.topEmployeesByRevenue
                          .slice(0, 10)
                          .map(
                            (
                              employeeData: Record<string, unknown>,
                              index: number
                            ) => {
                              const employee =
                                employeeData as EmployeeStatistic;
                              return (
                                <div
                                  key={employee.employeeName || index}
                                  className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ p-4 /* TODO: Convert mb: 1 */ /* TODO: Convert bgcolor:
                                      index < 3
                                        ? rgba(76 */ /* TODO: Convert 0.1)
                                        : background.paper */ rounded-md /* TODO: Convert border:
                                      index < 3
                                        ? 1px solid rgba(76 */ /* TODO: Convert 0.2)
                                        : 1px solid rgba(0 */"
                                >
                                  <div
                                    className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4"
                                  >
                                    <div
                                      className="/* TODO: Convert width: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert bgcolor:
                                          index === 0
                                            ? #FFD700
                                            : index === 1
                                              ? #C0C0C0
                                              : index === 2
                                                ? #CD7F32
                                                : #4CAF50 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */"
                                    >
                                      {index + 1}
                                    </div>
                                    <div>
                                      <Typography
                                        variant="body1"
                                        className="/* TODO: Convert fontWeight: 600 */"
                                      >
                                        {employee.employeeName || 'N/A'}
                                      </Typography>
                                      <Typography
                                        variant="caption"
                                        color="text.secondary"
                                      >
                                        {employee.totalProtocols || 0}{' '}
                                        protokolov
                                      </Typography>
                                    </div>
                                  </div>
                                  <Typography
                                    variant="h6"
                                    className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #4CAF50 */"
                                  >
                                    €
                                    {(
                                      employee.totalRevenue || 0
                                    ).toLocaleString()}
                                  </Typography>
                                </div>
                              );
                            }
                          )}
                      </div>
                    </CardContent>
                  </Card>
                </Grid>

                {/* Detailed Employee Table */}
                <Grid item xs={12}>
                  <Card className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */">
                    <CardContent>
                      <Typography
                        variant="h6"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 2 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                      >
                        <AssessmentIcon />
                        Detailné štatistiky zamestnancov
                      </Typography>
                      <TableContainer>
                        <Table>
                          <TableHead>
                            <TableRow>
                              <TableCell className="/* TODO: Convert fontWeight: 600 */">
                                Zamestnanec
                              </TableCell>
                              <TableCell
                                align="center"
                                className="/* TODO: Convert fontWeight: 600 */"
                              >
                                Protokoly
                              </TableCell>
                              <TableCell
                                align="center"
                                className="/* TODO: Convert fontWeight: 600 */"
                              >
                                Odovzdania
                              </TableCell>
                              <TableCell
                                align="center"
                                className="/* TODO: Convert fontWeight: 600 */"
                              >
                                Prebrania
                              </TableCell>
                              <TableCell align="right" className="/* TODO: Convert fontWeight: 600 */">
                                Tržby
                              </TableCell>
                              <TableCell
                                align="center"
                                className="/* TODO: Convert fontWeight: 600 */"
                              >
                                Prenájmy
                              </TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {stats.employeeStats.allEmployees
                              .sort(
                                (a, b) =>
                                  (b.totalProtocols || 0) -
                                  (a.totalProtocols || 0)
                              )
                              .map(
                                (
                                  employeeData: Record<string, unknown>,
                                  index: number
                                ) => {
                                  const employee =
                                    employeeData as EmployeeStatistic;
                                  return (
                                    <TableRow
                                      key={employee.employeeName || index}
                                      sx={{
                                        '&:nth-of-type(odd)': {
                                          backgroundColor:
                                            'rgba(0, 0, 0, 0.04)',
                                        },
                                      }}
                                    >
                                      <TableCell>
                                        <div
                                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                                        >
                                          <PersonIcon color="primary" />
                                          <Typography
                                            variant="body2"
                                            className="/* TODO: Convert fontWeight: 600 */"
                                          >
                                            {employee.employeeName || 'N/A'}
                                          </Typography>
                                        </div>
                                      </TableCell>
                                      <TableCell align="center">
                                        <Chip
                                          label={employee.totalProtocols || 0}
                                          color="primary"
                                          size="small"
                                        />
                                      </TableCell>
                                      <TableCell align="center">
                                        <Chip
                                          label={employee.handoverCount || 0}
                                          color="secondary"
                                          size="small"
                                        />
                                      </TableCell>
                                      <TableCell align="center">
                                        <Chip
                                          label={employee.returnCount || 0}
                                          color="info"
                                          size="small"
                                        />
                                      </TableCell>
                                      <TableCell align="right">
                                        <Typography
                                          variant="body2"
                                          className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #4CAF50 */"
                                        >
                                          €
                                          {(
                                            employee.totalRevenue || 0
                                          ).toLocaleString()}
                                        </Typography>
                                      </TableCell>
                                      <TableCell align="center">
                                        <Typography variant="body2">
                                          {employee.uniqueRentals || 0}
                                        </Typography>
                                      </TableCell>
                                    </TableRow>
                                  );
                                }
                              )}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </CardContent>
                  </Card>
                </Grid>
              </>
            ) : (
              <Grid item xs={12}>
                <Card className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */">
                  <CardContent className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */">
                    <PersonIcon
                      className="/* TODO: Convert fontSize: 64 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mb: 2 */"
                    />
                    <Typography
                      variant="h6"
                      color="text.secondary"
                      className="/* TODO: Convert mb: 1 */"
                    >
                      Žiadne protokoly za vybrané obdobie
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      V tomto období neboli vytvorené žiadne protokoly
                      odovzdávania alebo preberania vozidiel.
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            )}
          </Grid>
        </TabPanel>
      </Card>
    </div>
  );
};

export default Statistics;
