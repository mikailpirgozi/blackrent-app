/**
 * Email Management Layout - Hlavn√Ω refaktorovan√Ω komponent
 * Nahrad√≠ p√¥vodn√Ω EmailManagementDashboard.tsx
 */

import {
/* Tailwind classes used for styling */
  Archive as ArchiveIcon,
  Email as EmailIcon,
  NotificationsNone as NotificationIcon,
  Schedule as PendingIcon,
  Refresh as RefreshIcon,
  PlayArrow as StartIcon,
  Stop as StopIcon,
  CheckCircle as TestIcon,
} from '@mui/icons-material';
import { Alert,
  Badge, Button,
  Chip,
  Tab,
  Tabs,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import React, { useEffect, useState } from 'react';

// Hooks
import { EmailArchiveTab } from './components/EmailArchiveTab';
import { EmailFilters } from './components/EmailFilters';
import { EmailHistoryTab } from './components/EmailHistoryTab';
import { EmailStatsCards } from './components/EmailStatsCards';
import { ImapStatusCard } from './components/ImapStatusCard';
import { PendingRentalsTab } from './components/PendingRentalsTab';
import { useEmailApi } from './hooks/useEmailApi';
import { useImapStatus } from './hooks/useImapStatus';
import { usePendingRentals } from './hooks/usePendingRentals';

// Components

// Types
import type { EmailStats } from './types/email-types';

const EmailManagementLayout: React.FC = () => {
  // Theme and responsive hooks
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isSmallMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isExtraSmall = useMediaQuery(theme.breakpoints.down(400));

  // Tabs state
  const [activeTab, setActiveTab] = useState(0);

  // Filters state
  const [statusFilter, setStatusFilter] = useState<string>('');
  const [senderFilter, setSenderFilter] = useState<string>('');

  // Stats state
  const [stats, setStats] = useState<EmailStats | null>(null);

  // API Hooks
  const {
    error: emailError,
    success: emailSuccess,
    setError: setEmailError,
    setSuccess: setEmailSuccess,
    fetchStats,
  } = useEmailApi();

  const {
    imapStatus,
    imapLoading,
    error: imapError,
    success: imapSuccess,
    setError: setImapError,
    setSuccess: setImapSuccess,
    fetchImapStatus,
    testImapConnection,
    startImapMonitoring,
    stopImapMonitoring,
  } = useImapStatus();

  const { pendingRentals, fetchPendingRentals } = usePendingRentals();

  // Combine errors and success messages
  const error = emailError || imapError;
  const success = emailSuccess || imapSuccess;
  const setError = (msg: string | null) => {
    setEmailError(msg);
    setImapError(msg);
  };
  const setSuccess = (msg: string | null) => {
    setEmailSuccess(msg);
    setImapSuccess(msg);
  };

  // Initial load
  useEffect(() => {
    console.log('üöÄ EMAIL MANAGEMENT LAYOUT useEffect triggered');

    const initializeData = async () => {
      try {
        const [statsData] = await Promise.all([
          fetchStats(),
          fetchImapStatus(),
          fetchPendingRentals(),
        ]);

        if (statsData) {
          setStats(statsData);
        }
      } catch (err) {
        console.error('‚ùå Error initializing email management data:', err);
      }
    };

    initializeData();
  }, [fetchStats, fetchImapStatus, fetchPendingRentals]);

  // Handle filter changes
  const handleClearFilters = () => {
    setStatusFilter('');
    setSenderFilter('');
  };

  // Handle refresh
  const handleRefresh = async () => {
    try {
      const [statsData] = await Promise.all([
        fetchStats(),
        fetchImapStatus(),
        fetchPendingRentals(),
      ]);

      if (statsData) {
        setStats(statsData);
      }
    } catch (err) {
      console.error('‚ùå Error refreshing data:', err);
    }
  };

  return (
    <div
      className="/* TODO: Convert p: isExtraSmall ? 1 : isSmallMobile ? 2 : 3 */ /* TODO: Convert minHeight: 100vh */ /* TODO: Convert bgcolor: background.default */"
    >
      {/* Header */}
      <div
        display="flex"
        justifyContent="space-between"
        alignItems={isMobile ? 'flex-start' : 'center'}
        mb={3}
        flexDirection={isSmallMobile ? 'column' : 'row'}
        gap={isSmallMobile ? 2 : 0}
      >
        <Typography
          variant={isExtraSmall ? 'h5' : isSmallMobile ? 'h4' : 'h4'}
          gutterBottom={!isSmallMobile}
          className="/* TODO: Convert fontSize: isExtraSmall
              ? 1.25rem
              : isSmallMobile
                ? 1.5rem
                : undefined */ /* TODO: Convert textAlign: isSmallMobile ? center : left */ /* TODO: Convert width: isSmallMobile ? 100% : auto */"
        >
          üìß Email Management Dashboard
        </Typography>
        <div
          display="flex"
          gap={isExtraSmall ? 0.5 : 1}
          alignItems="center"
          flexWrap={isMobile ? 'wrap' : 'nowrap'}
          justifyContent={isSmallMobile ? 'center' : 'flex-end'}
          width={isSmallMobile ? '100%' : 'auto'}
        >
          {/* IMAP Status Chip */}
          {imapStatus && (
            <Chip
              icon={<EmailIcon />}
              label={
                imapStatus.enabled
                  ? imapStatus.running
                    ? 'IMAP Be≈æ√≠'
                    : 'IMAP Zastaven√Ω'
                  : 'IMAP Vypnut√Ω'
              }
              color={
                imapStatus.enabled
                  ? imapStatus.running
                    ? 'success'
                    : 'warning'
                  : 'default'
              }
              size="small"
              className="/* TODO: Convert mr: 1 */"
            />
          )}

          {/* IMAP Control Buttons */}
          <Button
            variant="outlined"
            size={isExtraSmall ? 'small' : 'small'}
            startIcon={!isExtraSmall && <TestIcon />}
            onClick={testImapConnection}
            disabled={imapLoading || !imapStatus?.enabled}
            className="/* TODO: Convert minWidth: auto */ /* TODO: Convert px: isExtraSmall ? 0.5 : 1 */ /* TODO: Convert fontSize: isExtraSmall ? 0.75rem : undefined */"
          >
            {isExtraSmall ? 'T' : 'Test'}
          </Button>

          {imapStatus?.enabled && (
            <>
              {!imapStatus.running ? (
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={!isExtraSmall && <StartIcon />}
                  onClick={startImapMonitoring}
                  disabled={imapLoading}
                  color="success"
                  className="/* TODO: Convert minWidth: auto */ /* TODO: Convert px: isExtraSmall ? 0.5 : 1 */ /* TODO: Convert fontSize: isExtraSmall ? 0.75rem : undefined */"
                >
                  {isExtraSmall ? 'S' : 'Spusi≈•'}
                </Button>
              ) : (
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={!isExtraSmall && <StopIcon />}
                  onClick={stopImapMonitoring}
                  disabled={imapLoading}
                  color="error"
                  className="/* TODO: Convert minWidth: auto */ /* TODO: Convert px: isExtraSmall ? 0.5 : 1 */ /* TODO: Convert fontSize: isExtraSmall ? 0.75rem : undefined */"
                >
                  {isExtraSmall ? 'Z' : 'Zastavi≈•'}
                </Button>
              )}
            </>
          )}

          <Button
            variant="outlined"
            startIcon={!isExtraSmall && <RefreshIcon />}
            onClick={handleRefresh}
            size={isSmallMobile ? 'small' : 'medium'}
            className="/* TODO: Convert fontSize: isExtraSmall ? 0.75rem : undefined */ /* TODO: Convert px: isExtraSmall ? 1 : undefined */"
          >
            {isExtraSmall ? 'R' : 'Obnovi≈•'}
          </Button>
        </div>
      </div>

      {/* Error/Success Messages */}
      {error && (
        <Alert severity="error" className="/* TODO: Convert mb: 2 */" onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {success && (
        <Alert
          severity="success"
          className="/* TODO: Convert mb: 2 */"
          onClose={() => setSuccess(null)}
        >
          {success}
        </Alert>
      )}

      {/* Statistics Cards */}
      <EmailStatsCards stats={stats} />

      {/* IMAP Configuration Info */}
      <ImapStatusCard imapStatus={imapStatus} />

      {/* Filters */}
      <EmailFilters
        statusFilter={statusFilter}
        senderFilter={senderFilter}
        onStatusFilterChange={setStatusFilter}
        onSenderFilterChange={setSenderFilter}
        onClearFilters={handleClearFilters}
      />

      {/* Tabs Navigation */}
      <div
        sx={{
          borderBottom: 1,
          borderColor: 'divider',
          mb: 3,
          overflowX: 'auto',
          '&::-webkit-scrollbar': {
            height: 4,
          },
          '&::-webkit-scrollbar-track': {
            backgroundColor: 'transparent',
          },
          '&::-webkit-scrollbar-thumb': {
            backgroundColor: 'rgba(0,0,0,0.2)',
            borderRadius: 2,
          },
        }}
      >
        <Tabs
          value={activeTab}
          onChange={(event, newValue) => setActiveTab(newValue)}
          aria-label="Email management tabs"
          variant={isMobile ? 'scrollable' : 'standard'}
          scrollButtons={isMobile ? 'auto' : false}
          allowScrollButtonsMobile
          sx={{
            minHeight: isExtraSmall ? 40 : 48,
            '& .MuiTab-root': {
              minHeight: isExtraSmall ? 40 : 48,
              fontSize: isExtraSmall
                ? '0.75rem'
                : isSmallMobile
                  ? '0.875rem'
                  : undefined,
              padding: isExtraSmall
                ? '6px 8px'
                : isSmallMobile
                  ? '8px 12px'
                  : undefined,
              minWidth: isExtraSmall ? 'auto' : undefined,
            },
            '& .MuiTabs-flexContainer': {
              gap: isExtraSmall ? 0.5 : 1,
            },
          }}
        >
          <Tab
            label={
              isExtraSmall
                ? 'Emaily'
                : isSmallMobile
                  ? 'Hist√≥ria'
                  : 'Hist√≥ria Emailov'
            }
            icon={!isExtraSmall ? <EmailIcon /> : undefined}
            iconPosition={isSmallMobile ? 'top' : 'start'}
            sx={{
              '& .MuiTab-iconWrapper': {
                marginBottom: isSmallMobile ? 0.5 : undefined,
                marginRight: isSmallMobile ? 0 : undefined,
              },
            }}
          />
          <Tab
            label={
              <div
                display="flex"
                alignItems="center"
                gap={isExtraSmall ? 0.5 : 1}
                flexDirection={isSmallMobile ? 'column' : 'row'}
              >
                <span>
                  {isExtraSmall
                    ? 'Pren√°jmy'
                    : isSmallMobile
                      ? 'ƒåakaj√∫ce'
                      : 'ƒåakaj√∫ce Pren√°jmy'}
                </span>
                {pendingRentals.length > 0 && (
                  <Badge
                    badgeContent={pendingRentals.length}
                    color="warning"
                    sx={{
                      '& .MuiBadge-badge': {
                        fontSize: isExtraSmall ? '0.625rem' : '0.75rem',
                        minWidth: isExtraSmall ? 16 : 20,
                        height: isExtraSmall ? 16 : 20,
                      },
                    }}
                  >
                    <NotificationIcon
                      className="/* TODO: Convert fontSize: isExtraSmall ? 16 : 20 */"
                    />
                  </Badge>
                )}
              </div>
            }
            icon={!isExtraSmall ? <PendingIcon /> : undefined}
            iconPosition={isSmallMobile ? 'top' : 'start'}
            sx={{
              '& .MuiTab-iconWrapper': {
                marginBottom: isSmallMobile ? 0.5 : undefined,
                marginRight: isSmallMobile ? 0 : undefined,
              },
            }}
          />
          <Tab
            label={
              isExtraSmall
                ? 'Arch√≠v'
                : isSmallMobile
                  ? 'Arch√≠v'
                  : 'Arch√≠v Emailov'
            }
            icon={!isExtraSmall ? <ArchiveIcon /> : undefined}
            iconPosition={isSmallMobile ? 'top' : 'start'}
            sx={{
              '& .MuiTab-iconWrapper': {
                marginBottom: isSmallMobile ? 0.5 : undefined,
                marginRight: isSmallMobile ? 0 : undefined,
              },
            }}
          />
        </Tabs>
      </div>

      {/* Tab Content */}
      {activeTab === 0 && (
        <EmailHistoryTab
          statusFilter={statusFilter}
          senderFilter={senderFilter}
        />
      )}

      {activeTab === 1 && <PendingRentalsTab />}

      {activeTab === 2 && <EmailArchiveTab senderFilter={senderFilter} />}
    </div>
  );
};

export default EmailManagementLayout;
