/**
 * Email History Tab Component
 * Extrahovan√© z p√¥vodn√©ho EmailManagementDashboard.tsx
 */

import {
/* Tailwind classes used for styling */
  CheckCircle as ApproveIcon,
  Archive as ArchiveIcon,
  Delete as DeleteIcon,
  Cancel as RejectIcon,
  Visibility as ViewIcon,
} from '@mui/icons-material';
import { Avatar, Button,
  Card,
  CardContent,
  Chip,
  CircularProgress,
  IconButton,
  Pagination,
  Paper,
  Stack,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import React, { useCallback, useEffect, useState } from 'react';

import { useEmailApi } from '../hooks/useEmailApi';
import type { EmailDetail, EmailEntry } from '../types/email-types';
// import { PAGE_SIZE } from '../utils/email-constants';
import { truncateText } from '../utils/email-formatters';

import { EmailDetailDialog } from './dialogs/EmailDetailDialog';
import { RejectDialog } from './dialogs/RejectDialog';
import { StatusChip } from './StatusChip';

interface EmailHistoryTabProps {
  statusFilter: string;
  senderFilter: string;
}

export const EmailHistoryTab: React.FC<EmailHistoryTabProps> = ({
  statusFilter,
  senderFilter,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  // const isSmallMobile = useMediaQuery(theme.breakpoints.down('sm'));
  // const isExtraSmall = useMediaQuery(theme.breakpoints.down(400));

  // State
  const [emails, setEmails] = useState<EmailEntry[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalEmails, setTotalEmails] = useState(0);

  // Dialogs
  const [viewDialog, setViewDialog] = useState<{
    open: boolean;
    email: EmailDetail | null;
  }>({
    open: false,
    email: null,
  });
  const [rejectDialog, setRejectDialog] = useState<{
    open: boolean;
    emailId: string | null;
  }>({
    open: false,
    emailId: null,
  });
  const [rejectReason, setRejectReason] = useState('');

  // API Hook
  const {
    loading,
    actionLoading,
    // error,
    // success,
    // setError,
    // setSuccess,
    fetchEmails,
    viewEmailDetail,
    approveEmail,
    rejectEmail,
    archiveEmail,
    deleteEmail,
  } = useEmailApi();

  const loadEmails = useCallback(async () => {
    try {
      const result = await fetchEmails(currentPage, statusFilter, senderFilter);
      setEmails(result.emails);
      setTotalEmails(result.totalEmails);
      setTotalPages(result.totalPages);
    } catch (err) {
      // Error handled by hook
    }
  }, [fetchEmails, currentPage, statusFilter, senderFilter]);

  // Load emails when filters or page change
  useEffect(() => {
    console.log('üöÄ EMAIL HISTORY TAB useEffect triggered', {
      currentPage,
      statusFilter,
      senderFilter,
    });

    loadEmails();
  }, [currentPage, statusFilter, senderFilter, loadEmails]);

  const handleViewEmail = async (emailId: string) => {
    const emailDetail = await viewEmailDetail(emailId);
    if (emailDetail) {
      setViewDialog({ open: true, email: emailDetail });
    }
  };

  const handleApproveEmail = async (emailId: string) => {
    const success = await approveEmail(emailId);
    if (success) {
      await loadEmails();
    }
  };

  const handleRejectEmail = async () => {
    if (!rejectDialog.emailId) return;

    const success = await rejectEmail(rejectDialog.emailId, rejectReason);
    if (success) {
      await loadEmails();
      setRejectDialog({ open: false, emailId: null });
      setRejectReason('');
    }
  };

  const handleArchiveEmail = async (emailId: string) => {
    const success = await archiveEmail(emailId);
    if (success) {
      await loadEmails();
    }
  };

  const handleDeleteEmail = async (emailId: string) => {
    const success = await deleteEmail(emailId);
    if (success) {
      await loadEmails();
    }
  };

  if (loading) {
    return (
      <Card>
        <CardContent>
          <div display="flex" justifyContent="center" p={3}>
            <CircularProgress />
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <>
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìã Emaily ({totalEmails} celkom)
          </Typography>

          {/* Mobile View - Card List */}
          {isMobile ? (
            <Stack spacing={2}>
              {emails.map(email => (
                <Card
                  key={email.id}
                  variant="outlined"
                  sx={{
                    border: '1px solid',
                    borderColor: 'divider',
                    '&:hover': {
                      borderColor: 'primary.main',
                      boxShadow: 1,
                    },
                  }}
                >
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    {/* Header - Subject and Status */}
                    <div
                      display="flex"
                      justifyContent="space-between"
                      alignItems="flex-start"
                      mb={1}
                    >
                      <Typography
                        variant="subtitle2"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert flex: 1 */ /* TODO: Convert mr: 1 */ /* TODO: Convert overflow: hidden */ /* TODO: Convert textOverflow: ellipsis */ /* TODO: Convert display: -webkit-box */ /* TODO: Convert WebkitLineClamp: 2 */ /* TODO: Convert WebkitBoxOrient: vertical */"
                      >
                        {email.subject}
                      </Typography>
                      <StatusChip
                        status={email.status}
                        actionTaken={email.action_taken}
                      />
                    </div>

                    {/* Sender and Date */}
                    <div
                      display="flex"
                      justifyContent="space-between"
                      alignItems="center"
                      mb={2}
                    >
                      <div display="flex" alignItems="center" gap={1}>
                        <Avatar
                          className="/* TODO: Convert width: 24 */ /* TODO: Convert height: 24 */ /* TODO: Convert fontSize: 0.75rem */ /* TODO: Convert bgcolor: primary.main */"
                        >
                          {email.sender.charAt(0).toUpperCase()}
                        </Avatar>
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          className="/* TODO: Convert fontSize: 0.875rem */"
                        >
                          {truncateText(email.sender, 25)}
                        </Typography>
                      </div>
                      <Typography variant="caption" color="text.secondary">
                        {new Date(email.received_at).toLocaleDateString('sk')}
                      </Typography>
                    </div>

                    {/* Order Number */}
                    {email.order_number && (
                      <div mb={2}>
                        <Chip
                          label={`üìã ${email.order_number}`}
                          size="small"
                          variant="outlined"
                          className="/* TODO: Convert fontSize: 0.75rem */"
                        />
                      </div>
                    )}

                    {/* Actions */}
                    <div display="flex" gap={1} flexWrap="wrap">
                      <Button
                        size="small"
                        startIcon={<ViewIcon />}
                        onClick={() => handleViewEmail(email.id)}
                        variant="outlined"
                        className="/* TODO: Convert minWidth: auto */ /* TODO: Convert fontSize: 0.75rem */"
                      >
                        Detail
                      </Button>

                      {email.status === 'new' && (
                        <>
                          <Button
                            size="small"
                            startIcon={
                              actionLoading === email.id ? (
                                <CircularProgress size={16} />
                              ) : (
                                <ApproveIcon />
                              )
                            }
                            onClick={() => handleApproveEmail(email.id)}
                            disabled={actionLoading === email.id}
                            color="success"
                            variant="outlined"
                            className="/* TODO: Convert minWidth: auto */ /* TODO: Convert fontSize: 0.75rem */"
                          >
                            Schv√°li≈•
                          </Button>
                          <Button
                            size="small"
                            startIcon={<RejectIcon />}
                            onClick={() =>
                              setRejectDialog({ open: true, emailId: email.id })
                            }
                            color="error"
                            variant="outlined"
                            className="/* TODO: Convert minWidth: auto */ /* TODO: Convert fontSize: 0.75rem */"
                          >
                            Zamietnu≈•
                          </Button>
                        </>
                      )}

                      <Button
                        size="small"
                        startIcon={
                          actionLoading === email.id ? (
                            <CircularProgress size={16} />
                          ) : (
                            <ArchiveIcon />
                          )
                        }
                        onClick={() => handleArchiveEmail(email.id)}
                        disabled={actionLoading === email.id}
                        variant="outlined"
                        className="/* TODO: Convert minWidth: auto */ /* TODO: Convert fontSize: 0.75rem */"
                      >
                        Arch√≠v
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </Stack>
          ) : (
            /* Desktop View - Table */
            <TableContainer
              component={Paper}
              elevation={0}
              className="/* TODO: Convert overflowX: auto */"
            >
              <Table stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell className="/* TODO: Convert minWidth: 200 */">Predmet</TableCell>
                    <TableCell className="/* TODO: Convert minWidth: 150 */">Odosielateƒæ</TableCell>
                    <TableCell className="/* TODO: Convert minWidth: 120 */">Prijat√©</TableCell>
                    <TableCell className="/* TODO: Convert minWidth: 100 */">Status</TableCell>
                    <TableCell className="/* TODO: Convert minWidth: 120 */">Objedn√°vka</TableCell>
                    <TableCell className="/* TODO: Convert minWidth: 200 */">Akcie</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {emails.map(email => (
                    <TableRow key={email.id} hover>
                      <TableCell>
                        <Typography
                          variant="body2"
                          className="/* TODO: Convert maxWidth: 250 */ /* TODO: Convert overflow: hidden */ /* TODO: Convert textOverflow: ellipsis */ /* TODO: Convert display: -webkit-box */ /* TODO: Convert WebkitLineClamp: 2 */ /* TODO: Convert WebkitBoxOrient: vertical */"
                        >
                          {email.subject}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography
                          variant="body2"
                          className="/* TODO: Convert maxWidth: 150 */"
                          noWrap
                        >
                          {email.sender}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          {new Date(email.received_at).toLocaleString('sk')}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <StatusChip
                          status={email.status}
                          actionTaken={email.action_taken}
                        />
                      </TableCell>
                      <TableCell>
                        {email.order_number ? (
                          <Chip
                            label={email.order_number}
                            size="small"
                            variant="outlined"
                          />
                        ) : (
                          <Typography variant="body2" color="text.secondary">
                            -
                          </Typography>
                        )}
                      </TableCell>
                      <TableCell>
                        <div display="flex" gap={1} flexWrap="wrap">
                          <Tooltip title="Zobrazi≈• detail">
                            <IconButton
                              size="small"
                              onClick={() => handleViewEmail(email.id)}
                            >
                              <ViewIcon />
                            </IconButton>
                          </Tooltip>

                          {email.status === 'new' && (
                            <Tooltip title="Schv√°li≈•">
                              <span>
                                <IconButton
                                  size="small"
                                  onClick={() => handleApproveEmail(email.id)}
                                  disabled={actionLoading === email.id}
                                  color="success"
                                >
                                  {actionLoading === email.id ? (
                                    <CircularProgress size={20} />
                                  ) : (
                                    <ApproveIcon />
                                  )}
                                </IconButton>
                              </span>
                            </Tooltip>
                          )}

                          {email.status === 'new' && (
                            <Tooltip title="Zamietnu≈•">
                              <IconButton
                                size="small"
                                onClick={() =>
                                  setRejectDialog({
                                    open: true,
                                    emailId: email.id,
                                  })
                                }
                                color="error"
                              >
                                <RejectIcon />
                              </IconButton>
                            </Tooltip>
                          )}

                          <Tooltip title="Archivova≈•">
                            <span>
                              <IconButton
                                size="small"
                                onClick={() => handleArchiveEmail(email.id)}
                                disabled={actionLoading === email.id}
                              >
                                {actionLoading === email.id ? (
                                  <CircularProgress size={20} />
                                ) : (
                                  <ArchiveIcon />
                                )}
                              </IconButton>
                            </span>
                          </Tooltip>

                          <Tooltip title="Zmaza≈•">
                            <span>
                              <IconButton
                                size="small"
                                onClick={() => handleDeleteEmail(email.id)}
                                disabled={actionLoading === email.id}
                                color="error"
                              >
                                {actionLoading === email.id ? (
                                  <CircularProgress size={20} />
                                ) : (
                                  <DeleteIcon />
                                )}
                              </IconButton>
                            </span>
                          </Tooltip>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}

          {/* Pagination */}
          {totalPages > 1 && (
            <div display="flex" justifyContent="center" mt={2}>
              <Pagination
                count={totalPages}
                page={currentPage}
                onChange={(_, page) => setCurrentPage(page)}
                color="primary"
              />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Dialogs */}
      <EmailDetailDialog
        open={viewDialog.open}
        email={viewDialog.email}
        onClose={() => setViewDialog({ open: false, email: null })}
      />

      <RejectDialog
        open={rejectDialog.open}
        reason={rejectReason}
        onReasonChange={setRejectReason}
        onConfirm={handleRejectEmail}
        onCancel={() => {
          setRejectDialog({ open: false, emailId: null });
          setRejectReason('');
        }}
      />
    </>
  );
};
