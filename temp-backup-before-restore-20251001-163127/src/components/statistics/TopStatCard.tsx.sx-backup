import { EmojiEvents as TrophyIcon } from '@mui/icons-material';
import { Avatar, Card,
/* Tailwind classes used for styling */
  CardContent,
  LinearProgress,
  Typography, } from '@mui/material';
import React from 'react';

interface TopStatCardProps {
  title: string;
  icon: React.ReactNode;
  data: Record<string, unknown>;
  primaryValue: string;
  secondaryValue: string;
  gradient: string;
  percentage?: number;
}

const TopStatCard: React.FC<TopStatCardProps> = ({
  title,
  icon,
  data,
  primaryValue,
  secondaryValue,
  gradient,
  percentage,
}) => (
  <Card
    sx={{
      height: '100%',
      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
      transition: 'all 0.2s ease',
      '&:hover': {
        boxShadow: '0 8px 24px rgba(0,0,0,0.15)',
        transform: 'translateY(-4px)',
      },
    }}
  >
    <CardContent>
      <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4 /* TODO: Convert mb: 2 */">
        <Avatar
          className="/* TODO: Convert bgcolor: transparent */ /* TODO: Convert background: gradient */ /* TODO: Convert width: 56 */ /* TODO: Convert height: 56 */"
        >
          {icon}
        </Avatar>
        <div className="/* TODO: Convert flex: 1 */">
          <Typography variant="h6" className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */">
            {title}
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {data
              ? (data as Record<string, unknown>).vehicle
                ? `${((data as Record<string, unknown>).vehicle as Record<string, unknown>).brand as string} ${((data as Record<string, unknown>).vehicle as Record<string, unknown>).model as string}`
                : ((data as Record<string, unknown>).customerName as string)
              : 'N/A'}
          </Typography>
        </div>
        <TrophyIcon className="/* TODO: Convert color: #ffd700 */ /* TODO: Convert fontSize: 32 */" />
      </div>

      <div className="/* TODO: Convert mb: 2 */">
        <Typography
          variant="h4"
          className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #667eea */ /* TODO: Convert mb: 0.5 */"
        >
          {primaryValue}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {secondaryValue}
        </Typography>
      </div>

      {percentage !== undefined && (
        <div className="/* TODO: Convert mt: 2 */">
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert mb: 1 */">
            <Typography variant="body2" color="text.secondary">
              Vyťaženosť
            </Typography>
            <Typography
              variant="body2"
              className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #667eea */"
            >
              {percentage.toFixed(1)}%
            </Typography>
          </div>
          <LinearProgress
            variant="determinate"
            value={Math.min(percentage, 100)}
            sx={{
              height: 8,
              borderRadius: 4,
              backgroundColor: '#e0e0e0',
              '& .MuiLinearProgress-bar': {
                background: gradient,
                borderRadius: 4,
              },
            }}
          />
        </div>
      )}
    </CardContent>
  </Card>
);

export default TopStatCard;
