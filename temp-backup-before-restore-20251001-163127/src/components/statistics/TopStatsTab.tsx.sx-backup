import {
/* Tailwind classes used for styling */
  DirectionsCar as CarIcon,
  Euro as EuroIcon,
  AttachMoney as MoneyIcon,
  Person as PersonIcon,
  Speed as SpeedIcon,
  Star as StarIcon,
  AccessTime as TimeIcon,
  EmojiEvents as TrophyIcon,
} from '@mui/icons-material';
import { Avatar, Card,
  CardContent,
  Divider,
  Grid,
  LinearProgress,
  Typography, } from '@mui/material';
import React from 'react';

import TopListCard from './TopListCard';
import TopStatCard from './TopStatCard';

interface TopStatsTabProps {
  stats: Record<string, unknown>;
  formatPeriod: () => string;
  showVehiclesByUtilization: number;
  showVehiclesByRevenue: number;
  showVehiclesByRentals: number;
  showCustomersByRentals: number;
  showCustomersByRevenue: number;
  showCustomersByDays: number;
  setShowVehiclesByUtilization: React.Dispatch<React.SetStateAction<number>>;
  setShowVehiclesByRevenue: React.Dispatch<React.SetStateAction<number>>;
  setShowVehiclesByRentals: React.Dispatch<React.SetStateAction<number>>;
  setShowCustomersByRentals: React.Dispatch<React.SetStateAction<number>>;
  setShowCustomersByRevenue: React.Dispatch<React.SetStateAction<number>>;
  setShowCustomersByDays: React.Dispatch<React.SetStateAction<number>>;
}

const TopStatsTab: React.FC<TopStatsTabProps> = ({
  stats,
  formatPeriod,
  showVehiclesByUtilization,
  showVehiclesByRevenue,
  showVehiclesByRentals,
  showCustomersByRentals,
  showCustomersByRevenue,
  showCustomersByDays,
  setShowVehiclesByUtilization,
  setShowVehiclesByRevenue,
  setShowVehiclesByRentals,
  setShowCustomersByRentals,
  setShowCustomersByRevenue,
  setShowCustomersByDays,
}) => {
  return (
    <Grid container spacing={3}>
      {/* √övodn√Ω prehƒæad */}
      <Grid item xs={12}>
        <Card
          className="/* TODO: Convert mb: 3 */ /* TODO: Convert background: linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
        >
          <CardContent>
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4">
              <TrophyIcon className="/* TODO: Convert fontSize: 40 */" />
              <div>
                <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 0.5 */">
                  TOP ≈†tatistiky
                </Typography>
                <Typography variant="body1" className="/* TODO: Convert opacity: 0.9 */">
                  Najlep≈°ie v√Ωkony za obdobie: {formatPeriod()}
                </Typography>
              </div>
            </div>
          </CardContent>
        </Card>
      </Grid>

      {/* üèÜ NAJLEP≈†IE V√ùKONY - Prehƒæadov√© karty */}
      <Grid item xs={12}>
        <Typography
          variant="h5"
          className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 3 */ /* TODO: Convert color: #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
        >
          <StarIcon />
          üèÜ Najlep≈°ie v√Ωkony
        </Typography>
      </Grid>

      {/* Top v√Ωkony v 3 kart√°ch */}
      <Grid item xs={12} md={4}>
        <TopStatCard
          title="Najvy≈•a≈æenej≈°ie auto"
          icon={<SpeedIcon />}
          data={stats.topVehicleByUtilization as Record<string, unknown>}
          primaryValue={
            stats.topVehicleByUtilization
              ? `${((stats.topVehicleByUtilization as Record<string, unknown>).utilizationPercentage as number).toFixed(1)}%`
              : 'N/A'
          }
          secondaryValue={
            stats.topVehicleByUtilization
              ? `${(stats.topVehicleByUtilization as Record<string, unknown>).totalDaysRented as number} dn√≠ pren√°jmu`
              : ''
          }
          gradient="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
          percentage={
            (stats.topVehicleByUtilization as Record<string, unknown>)
              ?.utilizationPercentage as number
          }
        />
      </Grid>

      <Grid item xs={12} md={4}>
        <TopStatCard
          title="Najv√Ωnosnej≈°ie auto"
          icon={<EuroIcon />}
          data={stats.topVehicleByRevenue as Record<string, unknown>}
          primaryValue={
            stats.topVehicleByRevenue
              ? `${(stats.topVehicleByRevenue as Record<string, unknown>).totalRevenue as number} ‚Ç¨`
              : 'N/A'
          }
          secondaryValue={
            stats.topVehicleByRevenue
              ? `${(stats.topVehicleByRevenue as Record<string, unknown>).rentalCount as number} pren√°jmov`
              : ''
          }
          gradient="linear-gradient(135deg, #11998e 0%, #38ef7d 100%)"
        />
      </Grid>

      <Grid item xs={12} md={4}>
        <TopStatCard
          title="Najakt√≠vnej≈°√≠ z√°kazn√≠k"
          icon={<PersonIcon />}
          data={stats.topCustomerByRentals as Record<string, unknown>}
          primaryValue={
            stats.topCustomerByRentals
              ? `${(stats.topCustomerByRentals as Record<string, unknown>).rentalCount as number}x`
              : 'N/A'
          }
          secondaryValue={
            stats.topCustomerByRentals
              ? `${(stats.topCustomerByRentals as Record<string, unknown>).totalRevenue as number} ‚Ç¨ celkom`
              : ''
          }
          gradient="linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%)"
        />
      </Grid>

      {/* Divider */}
      <Grid item xs={12}>
        <Divider className="/* TODO: Convert my: 2 */" />
      </Grid>

      {/* üöó TOP AUT√Å - Detailn√© rebr√≠ƒçky */}
      <Grid item xs={12}>
        <Typography
          variant="h5"
          className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 3 */ /* TODO: Convert color: #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
        >
          <CarIcon />
          üöó TOP Aut√° - Detailn√© rebr√≠ƒçky
        </Typography>
      </Grid>

      {/* Najvy≈•a≈æenej≈°ie aut√° */}
      <Grid item xs={12} lg={4}>
        <TopListCard
          title="Najvy≈•a≈æenej≈°ie aut√°"
          icon={<SpeedIcon />}
          gradient="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
          data={stats.vehiclesByUtilization as Record<string, unknown>[]}
          showCount={showVehiclesByUtilization}
          onLoadMore={() => setShowVehiclesByUtilization(prev => prev + 10)}
          renderItem={(vehicle, index) => (
            <div
              key={
                (
                  (vehicle as Record<string, unknown>).vehicle as Record<
                    string,
                    unknown
                  >
                ).id as string
              }
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                p: 2,
                borderRadius: 2,
                backgroundColor:
                  index < 3 ? 'rgba(102, 126, 234, 0.04)' : '#f8f9fa',
                border: index === 0 ? '2px solid #ffd700' : '1px solid #e0e0e0',
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateX(4px)',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                },
              }}
            >
              <div
                className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                    index < 3
                      ? linear-gradient(135deg */ /* TODO: Convert #764ba2 100%)
                      : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
              >
                {index + 1}
              </div>

              <Avatar className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #667eea */">
                <CarIcon fontSize="small" />
              </Avatar>

              <div className="/* TODO: Convert flex: 1 */">
                <Typography variant="body2" fontWeight="bold">
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).brand as string
                  }{' '}
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).model as string
                  }
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).licensePlate as string
                  }{' '}
                  ‚Ä¢{' '}
                  {
                    (vehicle as Record<string, unknown>)
                      .totalDaysRented as number
                  }{' '}
                  dn√≠
                </Typography>
              </div>

              <div className="/* TODO: Convert textAlign: right */ /* TODO: Convert minWidth: 80 */">
                <Typography
                  variant="h6"
                  fontWeight="bold"
                  className="/* TODO: Convert color:
                      ((vehicle as Record<string */ /* TODO: Convert unknown>)
                        .utilizationPercentage as number) > 70
                        ? #4caf50
                        : ((vehicle as Record<string */ /* TODO: Convert unknown>)
                              .utilizationPercentage as number) > 40
                          ? #ff9800
                          : #f44336 */"
                >
                  {(
                    (vehicle as Record<string, unknown>)
                      .utilizationPercentage as number
                  ).toFixed(1)}
                  %
                </Typography>
                <LinearProgress
                  variant="determinate"
                  value={Math.min(
                    (vehicle as Record<string, unknown>)
                      .utilizationPercentage as number,
                    100
                  )}
                  sx={{
                    height: 6,
                    borderRadius: 3,
                    backgroundColor: '#e0e0e0',
                    '& .MuiLinearProgress-bar': {
                      background:
                        ((vehicle as Record<string, unknown>)
                          .utilizationPercentage as number) > 70
                          ? '#4caf50'
                          : ((vehicle as Record<string, unknown>)
                                .utilizationPercentage as number) > 40
                            ? '#ff9800'
                            : '#f44336',
                      borderRadius: 3,
                    },
                  }}
                />
              </div>
            </div>
          )}
          emptyMessage="≈Ωiadne aut√° v tomto obdob√≠"
        />
      </Grid>

      {/* Najv√Ωnosnej≈°ie aut√° */}
      <Grid item xs={12} lg={4}>
        <TopListCard
          title="Najv√Ωnosnej≈°ie aut√°"
          icon={<EuroIcon />}
          gradient="linear-gradient(135deg, #11998e 0%, #38ef7d 100%)"
          data={stats.vehiclesByRevenue as Record<string, unknown>[]}
          showCount={showVehiclesByRevenue}
          onLoadMore={() => setShowVehiclesByRevenue(prev => prev + 10)}
          renderItem={(vehicle, index) => (
            <div
              key={
                (
                  (vehicle as Record<string, unknown>).vehicle as Record<
                    string,
                    unknown
                  >
                ).id as string
              }
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                p: 2,
                borderRadius: 2,
                backgroundColor:
                  index < 3 ? 'rgba(17, 153, 142, 0.04)' : '#f8f9fa',
                border: index === 0 ? '2px solid #ffd700' : '1px solid #e0e0e0',
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateX(4px)',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                },
              }}
            >
              <div
                className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                    index < 3
                      ? linear-gradient(135deg */ /* TODO: Convert #38ef7d 100%)
                      : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
              >
                {index + 1}
              </div>

              <Avatar className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #11998e */">
                <CarIcon fontSize="small" />
              </Avatar>

              <div className="/* TODO: Convert flex: 1 */">
                <Typography variant="body2" fontWeight="bold">
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).brand as string
                  }{' '}
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).model as string
                  }
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).licensePlate as string
                  }{' '}
                  ‚Ä¢ {(vehicle as Record<string, unknown>).rentalCount as number}{' '}
                  pren√°jmov
                </Typography>
              </div>

              <div className="/* TODO: Convert textAlign: right */">
                <Typography
                  variant="h6"
                  fontWeight="bold"
                  className="/* TODO: Convert color: #11998e */"
                >
                  {(
                    (vehicle as Record<string, unknown>).totalRevenue as number
                  ).toLocaleString()}{' '}
                  ‚Ç¨
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {(
                    (vehicle as Record<string, unknown>)
                      .avgRevenuePerRental as number
                  ).toFixed(0)}{' '}
                  ‚Ç¨/pren√°jom
                </Typography>
              </div>
            </div>
          )}
          emptyMessage="≈Ωiadne aut√° v tomto obdob√≠"
        />
      </Grid>

      {/* Najƒçastej≈°ie prenaj√≠man√© */}
      <Grid item xs={12} lg={4}>
        <TopListCard
          title="Najƒçastej≈°ie prenaj√≠man√©"
          icon={<CarIcon />}
          gradient="linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
          data={stats.vehiclesByRentals as Record<string, unknown>[]}
          showCount={showVehiclesByRentals}
          onLoadMore={() => setShowVehiclesByRentals(prev => prev + 10)}
          renderItem={(vehicle, index) => (
            <div
              key={
                (
                  (vehicle as Record<string, unknown>).vehicle as Record<
                    string,
                    unknown
                  >
                ).id as string
              }
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                p: 2,
                borderRadius: 2,
                backgroundColor:
                  index < 3 ? 'rgba(240, 147, 251, 0.04)' : '#f8f9fa',
                border: index === 0 ? '2px solid #ffd700' : '1px solid #e0e0e0',
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateX(4px)',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                },
              }}
            >
              <div
                className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                    index < 3
                      ? linear-gradient(135deg */ /* TODO: Convert #f5576c 100%)
                      : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
              >
                {index + 1}
              </div>

              <Avatar className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #f093fb */">
                <CarIcon fontSize="small" />
              </Avatar>

              <div className="/* TODO: Convert flex: 1 */">
                <Typography variant="body2" fontWeight="bold">
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).brand as string
                  }{' '}
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).model as string
                  }
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {
                    (
                      (vehicle as Record<string, unknown>).vehicle as Record<
                        string,
                        unknown
                      >
                    ).licensePlate as string
                  }{' '}
                  ‚Ä¢{' '}
                  {
                    (vehicle as Record<string, unknown>)
                      .totalDaysRented as number
                  }{' '}
                  dn√≠ celkom
                </Typography>
              </div>

              <div className="/* TODO: Convert textAlign: right */">
                <Typography
                  variant="h6"
                  fontWeight="bold"
                  className="/* TODO: Convert color: #f093fb */"
                >
                  {(vehicle as Record<string, unknown>).rentalCount as number}x
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {(
                    (vehicle as Record<string, unknown>).totalRevenue as number
                  ).toLocaleString()}{' '}
                  ‚Ç¨ celkom
                </Typography>
              </div>
            </div>
          )}
          emptyMessage="≈Ωiadne aut√° v tomto obdob√≠"
        />
      </Grid>

      {/* Divider */}
      <Grid item xs={12}>
        <Divider className="/* TODO: Convert my: 2 */" />
      </Grid>

      {/* üë• TOP Z√ÅKAZN√çCI - Detailn√© rebr√≠ƒçky */}
      <Grid item xs={12}>
        <Typography
          variant="h5"
          className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert mb: 3 */ /* TODO: Convert color: #667eea */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
        >
          <PersonIcon />
          üë• TOP Z√°kazn√≠ci - Detailn√© rebr√≠ƒçky
        </Typography>
      </Grid>

      {/* Najakt√≠vnej≈°√≠ z√°kazn√≠ci */}
      <Grid item xs={12} lg={4}>
        <TopListCard
          title="Najakt√≠vnej≈°√≠ z√°kazn√≠ci"
          icon={<StarIcon />}
          gradient="linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%)"
          data={stats.customersByRentals as Record<string, unknown>[]}
          showCount={showCustomersByRentals}
          onLoadMore={() => setShowCustomersByRentals(prev => prev + 10)}
          renderItem={(customer, index) => (
            <div
              key={(customer as Record<string, unknown>).customerName as string}
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                p: 2,
                borderRadius: 2,
                backgroundColor:
                  index < 3 ? 'rgba(255, 154, 158, 0.04)' : '#f8f9fa',
                border: index === 0 ? '2px solid #ffd700' : '1px solid #e0e0e0',
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateX(4px)',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                },
              }}
            >
              <div
                className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                    index < 3
                      ? linear-gradient(135deg */ /* TODO: Convert #fad0c4 100%)
                      : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
              >
                {index + 1}
              </div>

              <Avatar className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #ff9a9e */">
                <PersonIcon fontSize="small" />
              </Avatar>

              <div className="/* TODO: Convert flex: 1 */">
                <Typography variant="body2" fontWeight="bold">
                  {(customer as Record<string, unknown>).customerName as string}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {
                    (customer as Record<string, unknown>)
                      .totalDaysRented as number
                  }{' '}
                  dn√≠ celkom ‚Ä¢ Priemer:{' '}
                  {(
                    (customer as Record<string, unknown>)
                      .avgRentalDuration as number
                  ).toFixed(1)}{' '}
                  dn√≠
                </Typography>
              </div>

              <div className="/* TODO: Convert textAlign: right */">
                <Typography
                  variant="h6"
                  fontWeight="bold"
                  className="/* TODO: Convert color: #ff9a9e */"
                >
                  {(customer as Record<string, unknown>).rentalCount as number}x
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {(
                    (customer as Record<string, unknown>).totalRevenue as number
                  ).toLocaleString()}{' '}
                  ‚Ç¨ celkom
                </Typography>
              </div>
            </div>
          )}
          emptyMessage="≈Ωiadni z√°kazn√≠ci v tomto obdob√≠"
        />
      </Grid>

      {/* Najziskovej≈°√≠ z√°kazn√≠ci */}
      <Grid item xs={12} lg={4}>
        <TopListCard
          title="Najziskovej≈°√≠ z√°kazn√≠ci"
          icon={<MoneyIcon />}
          gradient="linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
          data={stats.customersByRevenue as Record<string, unknown>[]}
          showCount={showCustomersByRevenue}
          onLoadMore={() => setShowCustomersByRevenue(prev => prev + 10)}
          renderItem={(customer, index) => (
            <div
              key={(customer as Record<string, unknown>).customerName as string}
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                p: 2,
                borderRadius: 2,
                backgroundColor:
                  index < 3 ? 'rgba(255, 107, 107, 0.04)' : '#f8f9fa',
                border: index === 0 ? '2px solid #ffd700' : '1px solid #e0e0e0',
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateX(4px)',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                },
              }}
            >
              <div
                className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                    index < 3
                      ? linear-gradient(135deg */ /* TODO: Convert #ee5a24 100%)
                      : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
              >
                {index + 1}
              </div>

              <Avatar className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #ff6b6b */">
                <PersonIcon fontSize="small" />
              </Avatar>

              <div className="/* TODO: Convert flex: 1 */">
                <Typography variant="body2" fontWeight="bold">
                  {(customer as Record<string, unknown>).customerName as string}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {(customer as Record<string, unknown>).rentalCount as number}{' '}
                  pren√°jmov ‚Ä¢{' '}
                  {
                    (customer as Record<string, unknown>)
                      .totalDaysRented as number
                  }{' '}
                  dn√≠
                </Typography>
              </div>

              <div className="/* TODO: Convert textAlign: right */">
                <Typography
                  variant="h6"
                  fontWeight="bold"
                  className="/* TODO: Convert color: #ff6b6b */"
                >
                  {(
                    (customer as Record<string, unknown>).totalRevenue as number
                  ).toLocaleString()}{' '}
                  ‚Ç¨
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {(
                    ((customer as Record<string, unknown>)
                      .totalRevenue as number) /
                    ((customer as Record<string, unknown>)
                      .rentalCount as number)
                  ).toFixed(0)}{' '}
                  ‚Ç¨/pren√°jom
                </Typography>
              </div>
            </div>
          )}
          emptyMessage="≈Ωiadni z√°kazn√≠ci v tomto obdob√≠"
        />
      </Grid>

      {/* Najdlhodobej≈°√≠ z√°kazn√≠ci */}
      <Grid item xs={12} lg={4}>
        <TopListCard
          title="Najdlhodobej≈°√≠ z√°kazn√≠ci"
          icon={<TimeIcon />}
          gradient="linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
          data={stats.customersByDays as Record<string, unknown>[]}
          showCount={showCustomersByDays}
          onLoadMore={() => setShowCustomersByDays(prev => prev + 10)}
          renderItem={(customer, index) => (
            <div
              key={(customer as Record<string, unknown>).customerName as string}
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                p: 2,
                borderRadius: 2,
                backgroundColor:
                  index < 3 ? 'rgba(79, 172, 254, 0.04)' : '#f8f9fa',
                border: index === 0 ? '2px solid #ffd700' : '1px solid #e0e0e0',
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateX(4px)',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                },
              }}
            >
              <div
                className="/* TODO: Convert minWidth: 32 */ /* TODO: Convert height: 32 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert background:
                    index < 3
                      ? linear-gradient(135deg */ /* TODO: Convert #00f2fe 100%)
                      : #bdbdbd */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert color: white */ /* TODO: Convert fontWeight: 700 */ /* TODO: Convert fontSize: 0.9rem */"
              >
                {index + 1}
              </div>

              <Avatar className="/* TODO: Convert width: 40 */ /* TODO: Convert height: 40 */ /* TODO: Convert bgcolor: #4facfe */">
                <PersonIcon fontSize="small" />
              </Avatar>

              <div className="/* TODO: Convert flex: 1 */">
                <Typography variant="body2" fontWeight="bold">
                  {(customer as Record<string, unknown>).customerName as string}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {(customer as Record<string, unknown>).rentalCount as number}{' '}
                  pren√°jmov ‚Ä¢{' '}
                  {(
                    (customer as Record<string, unknown>).totalRevenue as number
                  ).toLocaleString()}{' '}
                  ‚Ç¨
                </Typography>
              </div>

              <div className="/* TODO: Convert textAlign: right */">
                <Typography
                  variant="h6"
                  fontWeight="bold"
                  className="/* TODO: Convert color: #4facfe */"
                >
                  {
                    (customer as Record<string, unknown>)
                      .totalDaysRented as number
                  }{' '}
                  dn√≠
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Priemer:{' '}
                  {(
                    (customer as Record<string, unknown>)
                      .avgRentalDuration as number
                  ).toFixed(1)}{' '}
                  dn√≠/pren√°jom
                </Typography>
              </div>
            </div>
          )}
          emptyMessage="≈Ωiadni z√°kazn√≠ci v tomto obdob√≠"
        />
      </Grid>
    </Grid>
  );
};

export default TopStatsTab;
