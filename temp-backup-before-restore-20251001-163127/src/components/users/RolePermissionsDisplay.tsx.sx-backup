import {
/* Tailwind classes used for styling */
  // Close as CloseIcon, // Nepou≈æ√≠van√©
  AdminPanelSettings as AdminIcon,
  Check as CheckIcon,
  Business as CompanyIcon,
  Work as EmployeeIcon,
  ExpandMore as ExpandMoreIcon,
  Engineering as MechanicIcon,
  BusinessCenter as SalesIcon,
  Build as TempWorkerIcon,
  Person as UserIcon,
} from '@mui/icons-material';
import { // Divider, // Nepou≈æ√≠van√©
  Accordion,
  AccordionDetails,
  AccordionSummary, // Card, // Nepou≈æ√≠van√©
  // CardContent, // Nepou≈æ√≠van√©
  Chip,
  // Grid, // Nepou≈æ√≠van√©
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Typography, } from '@mui/material';

// Defin√≠cia typov pre opr√°vnenia
interface Permission {
  resource: string;
  actions: string[];
  conditions?: {
    ownOnly?: boolean;
    companyOnly?: boolean;
    maxAmount?: number;
    approvalRequired?: boolean;
  };
}

interface RolePermissions {
  [key: string]: Permission[];
}

// Defin√≠cia pr√°v rol√≠ (k√≥pia z backend/src/middleware/permissions.ts)
const ROLE_PERMISSIONS: RolePermissions = {
  admin: [
    {
      resource: '*',
      actions: ['read', 'create', 'update', 'delete'],
      conditions: {},
    },
  ],
  user: [
    { resource: 'vehicles', actions: ['read'] },
    { resource: 'rentals', actions: ['read'] },
    { resource: 'customers', actions: ['read'] },
    { resource: 'expenses', actions: ['read'] },
    { resource: 'settlements', actions: ['read'] },
    { resource: 'insurances', actions: ['read'] },
    { resource: 'maintenance', actions: ['read'] },
    { resource: 'protocols', actions: ['read', 'create', 'update'] },
    { resource: 'statistics', actions: ['read'] },
  ],
  employee: [
    { resource: 'vehicles', actions: ['read', 'create', 'update'] },
    { resource: 'rentals', actions: ['read', 'create', 'update'] },
    { resource: 'customers', actions: ['read', 'create', 'update'] },
    { resource: 'maintenance', actions: ['read', 'create'] },
    { resource: 'protocols', actions: ['read', 'create', 'update'] },
  ],
  temp_worker: [
    { resource: 'vehicles', actions: ['read'] },
    { resource: 'rentals', actions: ['read', 'create'] },
    { resource: 'customers', actions: ['read', 'create'] },
    { resource: 'protocols', actions: ['read', 'create'] },
  ],
  mechanic: [
    {
      resource: 'vehicles',
      actions: ['read', 'update'],
      conditions: { ownOnly: true },
    },
    {
      resource: 'maintenance',
      actions: ['read', 'create', 'update', 'delete'],
      conditions: { ownOnly: true },
    },
    {
      resource: 'protocols',
      actions: ['read', 'create', 'update'],
      conditions: { ownOnly: true },
    },
  ],
  sales_rep: [
    { resource: 'vehicles', actions: ['read'] },
    { resource: 'rentals', actions: ['read', 'create', 'update'] },
    { resource: 'customers', actions: ['read', 'create', 'update'] },
    {
      resource: 'pricing',
      actions: ['read', 'update'],
      conditions: { maxAmount: 5000 },
    },
  ],
  company_owner: [
    {
      resource: 'vehicles',
      actions: ['read'],
      conditions: { companyOnly: true },
    },
    {
      resource: 'rentals',
      actions: ['read'],
      conditions: { companyOnly: true },
    },
    {
      resource: 'expenses',
      actions: ['read'],
      conditions: { companyOnly: true },
    },
    {
      resource: 'insurances',
      actions: ['read'],
      conditions: { companyOnly: true },
    },
    { resource: 'companies', actions: ['read'], conditions: { ownOnly: true } },
    {
      resource: 'finances',
      actions: ['read'],
      conditions: { companyOnly: true },
    },
    {
      resource: 'protocols',
      actions: ['read'],
      conditions: { companyOnly: true },
    },
  ],
};

const ROLE_INFO = {
  admin: {
    name: 'Administr√°tor',
    icon: AdminIcon,
    color: 'error',
    description: '√öpln√© pr√°va na v≈°etko',
  },
  user: {
    name: 'Pou≈æ√≠vateƒæ',
    icon: UserIcon,
    color: 'inherit',
    description: 'Z√°kladn√Ω pou≈æ√≠vateƒæ s READ-ONLY pr√°vami',
  },
  employee: {
    name: 'Zamestnanec',
    icon: EmployeeIcon,
    color: 'info',
    description: 'Z√°kladn√© oper√°cie s vozidlami, pren√°jmami, z√°kazn√≠kmi',
  },
  temp_worker: {
    name: 'Brig√°dnik',
    icon: TempWorkerIcon,
    color: 'warning',
    description: 'Obmedzen√© pr√°va, hlavne ƒç√≠tanie',
  },
  mechanic: {
    name: 'Mechanik',
    icon: MechanicIcon,
    color: 'success',
    description: '≈†pecializovan√© pr√°va na √∫dr≈æbu',
  },
  sales_rep: {
    name: 'Obchodn√≠k',
    icon: SalesIcon,
    color: 'secondary',
    description: 'Obchodn√© oper√°cie s limitmi',
  },
  company_owner: {
    name: 'Majiteƒæ firmy',
    icon: CompanyIcon,
    color: 'primary',
    description: 'Len vlastn√© vozidl√° a s√∫visiace d√°ta',
  },
};

const RESOURCE_LABELS = {
  '*': 'V≈°etko',
  vehicles: 'Vozidl√°',
  rentals: 'Pren√°jmy',
  customers: 'Z√°kazn√≠ci',
  expenses: 'N√°klady',
  settlements: 'Vy√∫ƒçtovanie',
  insurances: 'Poistky/STK',
  maintenance: '√ödr≈æba',
  protocols: 'Protokoly',
  statistics: '≈†tatistiky',
  pricing: 'Cenn√≠ky',
  companies: 'Firmy',
  finances: 'Financie',
};

// const ACTION_LABELS = {
//   read: 'ƒå√≠tanie',
//   create: 'Vytv√°ranie',
//   update: '√öprava',
//   delete: 'Mazanie',
// }; // Nepou≈æ√≠van√©

interface RolePermissionsDisplayProps {
  selectedRole?: string;
  showAllRoles?: boolean;
}

export default function RolePermissionsDisplay({
  selectedRole,
  showAllRoles = true,
}: RolePermissionsDisplayProps) {
  const rolesToShow = selectedRole
    ? [selectedRole]
    : Object.keys(ROLE_PERMISSIONS);

  const renderPermissionItem = (permission: Permission) => {
    const resourceLabel =
      RESOURCE_LABELS[permission.resource as keyof typeof RESOURCE_LABELS] ||
      permission.resource;
    const actions = permission.actions.join(', ');
    const conditions = permission.conditions;

    let conditionText = '';
    if (conditions?.ownOnly) conditionText += ' (len vlastn√©)';
    if (conditions?.companyOnly) conditionText += ' (len vlastn√° firma)';
    if (conditions?.maxAmount)
      conditionText += ` (max ${conditions.maxAmount}‚Ç¨)`;
    if (conditions?.approvalRequired) conditionText += ' (vy≈æaduje schv√°lenie)';

    return (
      <ListItem key={permission.resource} className="/* TODO: Convert py: 0.5 */">
        <ListItemIcon className="/* TODO: Convert minWidth: 32 */">
          <CheckIcon color="success" fontSize="small" />
        </ListItemIcon>
        <ListItemText
          primary={
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
              <Typography variant="body2" fontWeight={500}>
                {resourceLabel}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                ({actions}){conditionText}
              </Typography>
            </div>
          }
        />
      </ListItem>
    );
  };

  const renderRoleCard = (roleKey: string) => {
    const roleInfo = ROLE_INFO[roleKey as keyof typeof ROLE_INFO];
    const permissions =
      ROLE_PERMISSIONS[roleKey as keyof typeof ROLE_PERMISSIONS];
    const IconComponent = roleInfo.icon;

    if (!roleInfo || !permissions) return null;

    return (
      <Accordion key={roleKey} defaultExpanded={!showAllRoles}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4 /* TODO: Convert width: 100% */"
          >
            <IconComponent
              color={
                roleInfo.color as
                  | 'primary'
                  | 'secondary'
                  | 'error'
                  | 'info'
                  | 'success'
                  | 'warning'
                  | 'inherit'
              }
            />
            <div className="/* TODO: Convert flex: 1 */">
              <Typography variant="h6" component="div">
                {roleInfo.name}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {roleInfo.description}
              </Typography>
            </div>
            <Chip
              label={roleKey.toUpperCase()}
              color={
                roleInfo.color === 'inherit'
                  ? 'default'
                  : (roleInfo.color as
                      | 'primary'
                      | 'secondary'
                      | 'error'
                      | 'info'
                      | 'success'
                      | 'warning'
                      | 'default')
              }
              size="small"
              variant="outlined"
            />
          </div>
        </AccordionSummary>
        <AccordionDetails>
          <div>
            <Typography variant="subtitle2" gutterBottom className="/* TODO: Convert mb: 2 */">
              Opr√°vnenia:
            </Typography>

            {roleKey === 'admin' ? (
              <div
                className="p-4 /* TODO: Convert bgcolor: error.50 */ rounded /* TODO: Convert border: 1px solid */ /* TODO: Convert borderColor: error.200 */"
              >
                <Typography variant="body2" color="error.main" fontWeight={600}>
                  üî• √öPLN√â PR√ÅVA NA V≈†ETKO
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Administr√°tor m√° neobmedzen√Ω pr√≠stup k cel√©mu syst√©mu
                </Typography>
              </div>
            ) : (
              <List dense className="/* TODO: Convert bgcolor: grey.50 */ rounded">
                {permissions.map(permission =>
                  renderPermissionItem(permission)
                )}
              </List>
            )}
          </div>
        </AccordionDetails>
      </Accordion>
    );
  };

  return (
    <div>
      <Typography variant="h5" gutterBottom className="/* TODO: Convert mb: 3 */">
        üìã Pr√°va pou≈æ√≠vateƒæsk√Ωch rol√≠
      </Typography>

      <div className="/* TODO: Convert mb: 2 */">
        <Typography variant="body2" color="text.secondary">
          Prehƒæad opr√°vnen√≠ pre jednotliv√© role v BlackRent syst√©me
        </Typography>
      </div>

      <div>{rolesToShow.map(roleKey => renderRoleCard(roleKey))}</div>
    </div>
  );
}
