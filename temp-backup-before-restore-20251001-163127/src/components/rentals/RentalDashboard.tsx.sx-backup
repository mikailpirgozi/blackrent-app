import { Card,
/* Tailwind classes used for styling */
  CardContent,
  Divider,
  Grid,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import { isAfter, isBefore, isToday, isTomorrow } from 'date-fns';
import React, { useMemo } from 'react';

import type { Rental } from '../../types';

interface ProtocolData {
  handover?: Record<string, unknown>;
  return?: Record<string, unknown>;
}

interface RentalDashboardProps {
  rentals: Rental[];
  protocols?: Record<string, ProtocolData>;
  isLoading?: boolean;
  onQuickFilter?: (filterType: string, value?: string | number) => void;
}

interface DashboardStats {
  total: number;
  active: number;
  todayActivity: number;
  tomorrowReturns: number;
  weekActivity: number;
  overdue: number;
  newToday: number;
  unpaid: number;
  pending: number;
  withHandover: number;
  withReturn: number;
  totalRevenue: number;
  avgDailyRevenue: number;
}

interface MetricData {
  label: string;
  value: number;
  color: 'error' | 'warning' | 'success' | 'info';
  urgent: boolean;
  filterType: string;
  clickable: boolean;
}

interface ThemePalette {
  error: { main: string };
  warning: { main: string };
  success: { main: string };
  info: { main: string };
  primary: { main: string };
}

const RentalDashboard: React.FC<RentalDashboardProps> = ({
  rentals,
  protocols = {},
  isLoading = false,
  onQuickFilter,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // üìä Vypoƒç√≠taj kƒæ√∫ƒçov√© metriky
  const stats: DashboardStats = useMemo(() => {
    const today = new Date();
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    const active = rentals.filter(rental => {
      const startDate = new Date(rental.startDate);
      const endDate = new Date(rental.endDate);
      // Pren√°jom je akt√≠vny len ak: zaƒçal a e≈°te neskonƒçil
      return (
        (isAfter(today, startDate) || isToday(startDate)) &&
        (isBefore(today, endDate) || isToday(endDate))
      );
    });

    // Dnes aktivita - pren√°jmy ktor√© sa dnes zaƒç√≠naj√∫ ALEBO konƒçia
    const todayActivity = rentals.filter(rental => {
      const startDate = new Date(rental.startDate);
      const endDate = new Date(rental.endDate);
      return isToday(startDate) || isToday(endDate);
    });

    const tomorrowReturns = rentals.filter(rental => {
      const endDate = new Date(rental.endDate);
      return isTomorrow(endDate);
    });

    // Tento t√Ω≈æde≈à aktivita - pren√°jmy ktor√© sa tento t√Ω≈æde≈à zaƒç√≠naj√∫ ALEBO konƒçia
    const weekActivity = rentals.filter(rental => {
      const startDate = new Date(rental.startDate);
      const endDate = new Date(rental.endDate);
      const endOfWeek = new Date(today);
      endOfWeek.setDate(today.getDate() + (7 - today.getDay())); // Najbli≈æ≈°ia nedeƒæa
      endOfWeek.setHours(23, 59, 59, 999);

      const startsThisWeek =
        isAfter(startDate, today) && isBefore(startDate, endOfWeek);
      const endsThisWeek =
        isAfter(endDate, today) && isBefore(endDate, endOfWeek);

      return startsThisWeek || endsThisWeek;
    });

    // Preterminovan√© - pren√°jmy ktor√© mali skonƒçi≈• ale e≈°te sa nevr√°tili
    const overdue = rentals.filter(rental => {
      const endDate = new Date(rental.endDate);
      // Preterminovan√© s√∫ tie ƒço skonƒçili pred dnes a nemaj√∫ return protokol
      return isBefore(endDate, today) && !protocols[rental.id]?.return;
    });

    // Nov√© dnes - pren√°jmy vytvoren√© dnes
    const newToday = rentals.filter(rental => {
      const createdDate = new Date(rental.createdAt);
      return isToday(createdDate);
    });

    const unpaid = rentals.filter(rental => !rental.paid);
    const pending = rentals.filter(
      rental => rental.status === 'pending' || !rental.confirmed
    );

    const withHandover = rentals.filter(
      rental => protocols[rental.id]?.handover
    );
    const withReturn = rentals.filter(rental => protocols[rental.id]?.return);

    const totalRevenue = rentals.reduce(
      (sum, rental) => sum + (rental.totalPrice || 0),
      0
    );
    const avgDailyRevenue =
      rentals.length > 0 ? totalRevenue / Math.max(rentals.length, 1) : 0;

    return {
      total: rentals.length,
      active: active.length,
      todayActivity: todayActivity.length,
      tomorrowReturns: tomorrowReturns.length,
      weekActivity: weekActivity.length,
      overdue: overdue.length,
      newToday: newToday.length,
      unpaid: unpaid.length,
      pending: pending.length,
      withHandover: withHandover.length,
      withReturn: withReturn.length,
      totalRevenue,
      avgDailyRevenue,
    };
  }, [rentals, protocols]);

  // üìä V≈°etky metriky v jednom kompaktnom riadku
  const allMetrics: MetricData[] = [
    {
      label: 'Preterminovan√©',
      value: stats.overdue,
      color: stats.overdue > 0 ? 'error' : 'success',
      urgent: stats.overdue > 0,
      filterType: 'overdue',
      clickable: stats.overdue > 0,
    },
    {
      label: 'Dnes odovzdanie/vr√°tenie',
      value: stats.todayActivity,
      color: stats.todayActivity > 0 ? 'warning' : 'success',
      urgent: stats.todayActivity > 0,
      filterType: 'todayActivity',
      clickable: stats.todayActivity > 0,
    },
    {
      label: 'Zajtra vr√°tenie',
      value: stats.tomorrowReturns,
      color: stats.tomorrowReturns > 0 ? 'warning' : 'success',
      urgent: stats.tomorrowReturns > 0,
      filterType: 'tomorrowReturns',
      clickable: stats.tomorrowReturns > 0,
    },
    {
      label: 'Tento t√Ω≈æde≈à odovzdanie/vr√°tenie',
      value: stats.weekActivity,
      color: 'info',
      urgent: false,
      filterType: 'weekActivity',
      clickable: stats.weekActivity > 0,
    },
    {
      label: 'Nov√© dnes',
      value: stats.newToday,
      color: 'success',
      urgent: false,
      filterType: 'newToday',
      clickable: stats.newToday > 0,
    },
    {
      label: 'Akt√≠vne pren√°jmy',
      value: stats.active,
      color: 'info',
      urgent: false,
      filterType: 'active',
      clickable: stats.active > 0,
    },
    {
      label: 'Nezaplaten√©',
      value: stats.unpaid,
      color: stats.unpaid > 0 ? 'warning' : 'success',
      urgent: stats.unpaid > 0,
      filterType: 'unpaid',
      clickable: stats.unpaid > 0,
    },
    {
      label: 'ƒåakaj√∫ce',
      value: stats.pending,
      color: stats.pending > 0 ? 'warning' : 'success',
      urgent: stats.pending > 0,
      filterType: 'pending',
      clickable: stats.pending > 0,
    },
  ];

  // üñ±Ô∏è Handler pre klik na metriku
  const handleMetricClick = (filterType: string, value: number) => {
    if (value > 0 && onQuickFilter) {
      onQuickFilter(filterType);
    }
  };

  if (isLoading) {
    return (
      <Card className="/* TODO: Convert mb: 3 */ p-4">
        <Typography variant="h6" color="text.secondary">
          Naƒç√≠tavam dashboard...
        </Typography>
      </Card>
    );
  }

  return (
    <Card
      className="/* TODO: Convert mb: 3 */ /* TODO: Convert backgroundColor: background.paper */ /* TODO: Convert boxShadow: 0 4px 20px rgba(0 */ /* TODO: Convert border: 1px solid rgba(0 */ /* TODO: Convert borderRadius: 3 */"
    >
      <CardContent sx={{ p: { xs: 2, md: 3 } }}>
        {/* Header */}
        <div
          className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ /* TODO: Convert mb: 3 */"
        >
          <Typography
            variant="h5"
            fontWeight="600"
            className="/* TODO: Convert color: primary.main */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
          >
            üìä Dashboard pren√°jmov
          </Typography>

          <Typography variant="body2" color="text.secondary">
            Celkom: <strong>{stats.total}</strong> pren√°jmov
          </Typography>
        </div>

        {/* üìä ULTRA KOMPAKTN√ù DASHBOARD - v≈°etko v jednom riadku */}
        <Grid container spacing={0.25}>
          {allMetrics.map((metric, index) => (
            <Grid item xs={4} sm={3} md={2} lg={1.33} xl={1.2} key={index}>
              <Card
                onClick={() =>
                  handleMetricClick(metric.filterType, metric.value)
                }
                sx={{
                  background: metric.urgent
                    ? `linear-gradient(135deg, ${(theme.palette as ThemePalette)[metric.color].main}15 0%, ${(theme.palette as ThemePalette)[metric.color].main}25 100%)`
                    : `linear-gradient(135deg, ${(theme.palette as ThemePalette)[metric.color].main}10 0%, ${(theme.palette as ThemePalette)[metric.color].main}20 100%)`,
                  border: `1px solid ${(theme.palette as ThemePalette)[metric.color].main}30`,
                  borderRadius: 1,
                  transition: 'all 0.2s ease',
                  cursor: metric.clickable ? 'pointer' : 'default',
                  minHeight: 60,
                  '&:hover': metric.clickable
                    ? {
                        transform: 'translateY(-1px)',
                        boxShadow: `0 4px 15px ${(theme.palette as ThemePalette)[metric.color].main}30`,
                      }
                    : {},
                }}
              >
                <CardContent
                  sx={{
                    textAlign: 'center',
                    py: 0.25,
                    px: 0.25,
                    '&:last-child': { pb: 0.25 },
                  }}
                >
                  <Typography
                    variant="h6"
                    fontWeight="700"
                    sx={{
                      color: `${metric.color}.main`,
                      fontSize: { xs: '0.9rem', sm: '1rem', md: '1.1rem' },
                      lineHeight: 1.1,
                    }}
                  >
                    {metric.value}
                  </Typography>

                  <Typography
                    variant="caption"
                    sx={{
                      color: 'text.secondary',
                      fontSize: { xs: '0.55rem', sm: '0.6rem', md: '0.65rem' },
                      display: 'block',
                      lineHeight: 1,
                      mt: 0.1,
                    }}
                  >
                    {metric.label}
                  </Typography>

                  {metric.clickable && (
                    <Typography
                      variant="caption"
                      sx={{
                        color: `${metric.color}.main`,
                        fontSize: { xs: '0.5rem', sm: '0.55rem' },
                        mt: 0.1,
                      }}
                    >
                      üëÜ
                    </Typography>
                  )}
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>

        {/* üí∞ FINANƒåN√ù PREHƒΩAD - len re√°lne d√°ta */}
        {!isMobile && stats.totalRevenue > 0 && (
          <>
            <Divider className="/* TODO: Convert my: 2 */" />
            <div
              className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ gap-8"
            >
              <div className="/* TODO: Convert textAlign: center */">
                <Typography
                  variant="h6"
                  fontWeight="600"
                  className="/* TODO: Convert color: success.main */"
                >
                  {stats.totalRevenue.toLocaleString('sk-SK')}‚Ç¨
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Celkov√© tr≈æby
                </Typography>
              </div>
              <div className="/* TODO: Convert textAlign: center */">
                <Typography
                  variant="h6"
                  fontWeight="600"
                  className="/* TODO: Convert color: info.main */"
                >
                  {Math.round(stats.avgDailyRevenue).toLocaleString('sk-SK')}‚Ç¨
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Priemern√° cena
                </Typography>
              </div>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  );
};

export default RentalDashboard;
