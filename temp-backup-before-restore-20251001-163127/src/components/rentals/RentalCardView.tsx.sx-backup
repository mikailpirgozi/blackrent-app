import {
/* Tailwind classes used for styling */
  Business as BusinessIcon,
  DirectionsCar as CarIcon,
  CheckCircle as CheckCircleIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Error as ErrorIcon,
  PhotoLibrary as GalleryIcon,
  Assignment as HandoverIcon,
  PictureAsPdf as PDFIcon,
  Payment as PaymentIcon,
  Pending as PendingIcon,
  Person as PersonIcon,
  AssignmentReturn as ReturnIcon,
  Schedule as ScheduleIcon,
  Visibility as VisibilityIcon,
} from '@mui/icons-material';
import { Button,
  Card,
  CardContent,
  Chip,
  Divider,
  Grid,
  IconButton,
  Tooltip,
  Typography, } from '@mui/material';
import { format } from 'date-fns';
import { sk } from 'date-fns/locale';
import React, { memo } from 'react';
import { formatDateTime } from '../../utils/formatters';
import PriceDisplay from './components/PriceDisplay';

import type { HandoverProtocol, Rental, ReturnProtocol } from '../../types';

export type CardViewMode = 'grid' | 'list' | 'compact' | 'detailed';

interface RentalCardViewProps {
  rentals: Rental[];
  viewMode: CardViewMode;
  onEdit: (rental: Rental) => void;
  onDelete: (rentalId: string) => void;
  onCreateHandover: (rental: Rental) => void;
  onCreateReturn: (rental: Rental) => void;
  onViewPDF: (
    protocolId: string,
    type: 'handover' | 'return',
    title: string
  ) => void;
  onOpenGallery: (rental: Rental, protocolType: 'handover' | 'return') => void;
  onViewProtocols: (rental: Rental) => void;
  protocols: Record<
    string,
    { handover?: HandoverProtocol; return?: ReturnProtocol }
  >;
  loadingProtocols: string[];
}

const RentalCardView: React.FC<RentalCardViewProps> = ({
  rentals,
  viewMode,
  onEdit,
  onDelete,
  onCreateHandover,
  onCreateReturn,
  onViewPDF,
  onOpenGallery,
  onViewProtocols,
  protocols,
  loadingProtocols,
}) => {
  // const theme = useTheme();
  // const _isMobile = useMediaQuery(theme.breakpoints.down('md')); // TODO: Implement mobile-specific layout

  const getStatusColor = (status: string | undefined) => {
    switch (status?.toLowerCase()) {
      case 'aktívny':
      case 'active':
        return 'success';
      case 'dokončený':
      case 'completed':
        return 'default';
      case 'zrušený':
      case 'cancelled':
        return 'error';
      case 'po termíne':
      case 'overdue':
        return 'warning';
      default:
        return 'default';
    }
  };

  const getStatusIcon = (status: string | undefined) => {
    switch (status?.toLowerCase()) {
      case 'aktívny':
      case 'active':
        return <CheckCircleIcon fontSize="small" />;
      case 'dokončený':
      case 'completed':
        return <CheckCircleIcon fontSize="small" />;
      case 'zrušený':
      case 'cancelled':
        return <ErrorIcon fontSize="small" />;
      case 'po termíne':
      case 'overdue':
        return <PendingIcon fontSize="small" />;
      default:
        return <PendingIcon fontSize="small" />;
    }
  };

  const renderCompactCard = (rental: Rental) => {
    const hasHandover = protocols[rental.id]?.handover;
    const hasReturn = protocols[rental.id]?.return;
    const isActive =
      rental.status?.toLowerCase() === 'aktívny' ||
      rental.status?.toLowerCase() === 'active';
    // const _isFinished =
    //   rental.status?.toLowerCase() === 'dokončený' ||
    //   rental.status?.toLowerCase() === 'completed'; // TODO: Implement finished status logic

    return (
      <Card
        key={rental.id}
        sx={{
          height: '100%',
          cursor: 'pointer',
          transition: 'all 0.3s ease',
          border: '1px solid',
          borderColor: isActive ? '#4caf50' : 'divider',
          '&:hover': {
            transform: 'translateY(-4px)',
            boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
            borderColor: isActive ? '#4caf50' : 'primary.main',
          },
          position: 'relative',
          overflow: 'visible',
        }}
        onClick={() => onEdit(rental)}
      >
        {/* Status indicator */}
        <div
          className="/* TODO: Convert position: absolute */ /* TODO: Convert top: -8 */ /* TODO: Convert right: 16 */ /* TODO: Convert zIndex: 1 */"
        >
          <Chip
            label={rental.status}
            color={getStatusColor(rental.status)}
            size="small"
            icon={getStatusIcon(rental.status)}
            className="/* TODO: Convert fontWeight: bold */ /* TODO: Convert boxShadow: 0 2px 8px rgba(0 */"
          />
        </div>

        {/* Protocol status indicator */}
        <div
          className="/* TODO: Convert position: absolute */ /* TODO: Convert top: 8 */ /* TODO: Convert left: 8 */ /* TODO: Convert zIndex: 1 */"
        >
          <div className="/* TODO: Convert display: flex */ gap-1">
            {hasHandover && (
              <Chip
                icon={<HandoverIcon />}
                label=""
                color="success"
                size="small"
                sx={{
                  minWidth: 32,
                  height: 24,
                  '& .MuiChip-icon': { fontSize: 16 },
                }}
              />
            )}
            {hasReturn && (
              <Chip
                icon={<ReturnIcon />}
                label=""
                color="primary"
                size="small"
                sx={{
                  minWidth: 32,
                  height: 24,
                  '& .MuiChip-icon': { fontSize: 16 },
                }}
              />
            )}
          </div>
        </div>

        <CardContent className="p-4 /* TODO: Convert pt: 4 */">
          {/* Vehicle info */}
          <div className="/* TODO: Convert mb: 1.5 */">
            <div
              className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 0.5 */"
            >
              <CarIcon color="primary" fontSize="small" />
              <Typography variant="subtitle1" fontWeight="bold" color="primary">
                {rental.vehicle
                  ? `${rental.vehicle.brand} ${rental.vehicle.model}`
                  : 'Bez vozidla'}
              </Typography>
            </div>
            <Typography variant="body2" color="text.secondary" className="/* TODO: Convert ml: 3 */">
              {rental.vehicle?.licensePlate || 'N/A'}
            </Typography>
          </div>

          {/* Customer */}
          <div className="/* TODO: Convert mb: 1.5 */">
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
              <PersonIcon color="action" fontSize="small" />
              <Typography variant="body2" fontWeight="medium">
                {rental.customerName}
              </Typography>
            </div>
          </div>

          {/* Dates */}
          <div className="/* TODO: Convert mb: 1.5 */">
            <div
              className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 0.5 */"
            >
              <ScheduleIcon color="action" fontSize="small" />
              <Typography variant="body2" fontWeight="medium">
                {formatDateTime(rental.startDate)}
              </Typography>
            </div>
            <Typography variant="body2" color="text.secondary" className="/* TODO: Convert ml: 3 */">
              do {formatDateTime(rental.endDate)}
            </Typography>
          </div>

          {/* Price */}
          <PriceDisplay rental={rental} variant="compact" showExtraKm={false} />

          {/* Protocol actions - vždy zobrazené */}
          <div className="/* TODO: Convert display: flex */ gap-1 /* TODO: Convert mb: 1 */ /* TODO: Convert flexWrap: wrap */">
            <Button
              size="small"
              variant="outlined"
              startIcon={<VisibilityIcon />}
              onClick={e => {
                e.stopPropagation();
                onViewProtocols(rental);
              }}
              disabled={loadingProtocols.includes(rental.id)}
              className="/* TODO: Convert flex: 1 */ /* TODO: Convert minWidth: fit-content */"
            >
              {loadingProtocols.includes(rental.id)
                ? 'Načítavam...'
                : 'Zobraziť protokoly'}
            </Button>
            {hasHandover && (
              <Button
                size="small"
                variant="outlined"
                startIcon={<PDFIcon />}
                onClick={e => {
                  e.stopPropagation();
                  onViewPDF(hasHandover.id, 'handover', 'Preberací protokol');
                }}
                className="/* TODO: Convert minWidth: fit-content */"
              >
                PDF
              </Button>
            )}
            {hasReturn && (
              <Button
                size="small"
                variant="outlined"
                startIcon={<PDFIcon />}
                onClick={e => {
                  e.stopPropagation();
                  onViewPDF(hasReturn.id, 'return', 'Preberací protokol');
                }}
                className="/* TODO: Convert minWidth: fit-content */"
              >
                PDF
              </Button>
            )}
          </div>

          {/* Protocol details when loaded */}
          {protocols[rental.id] && (
            <div className="/* TODO: Convert mb: 1 */ p-1 /* TODO: Convert bgcolor: grey.50 */ rounded">
              <Typography
                variant="caption"
                className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert fontSize: 0.65rem */"
              >
                Detaily protokolov:
              </Typography>
              {hasHandover && (
                <div
                  className="/* TODO: Convert mt: 0.5 */ p-1 /* TODO: Convert bgcolor: success.light */ rounded"
                >
                  <Typography
                    variant="caption"
                    className="/* TODO: Convert fontWeight: 500 */ /* TODO: Convert color: success.dark */ /* TODO: Convert fontSize: 0.6rem */"
                  >
                    ✅ Preberací protokol
                  </Typography>
                  <Typography
                    variant="caption"
                    color="text.secondary"
                    className="/* TODO: Convert display: block */ /* TODO: Convert fontSize: 0.55rem */"
                  >
                    {format(
                      new Date(hasHandover.createdAt),
                      'dd.MM.yyyy HH:mm',
                      { locale: sk }
                    )}
                  </Typography>
                </div>
              )}
              {hasReturn && (
                <div
                  className="/* TODO: Convert mt: 0.5 */ p-1 /* TODO: Convert bgcolor: success.light */ rounded"
                >
                  <Typography
                    variant="caption"
                    className="/* TODO: Convert fontWeight: 500 */ /* TODO: Convert color: success.dark */ /* TODO: Convert fontSize: 0.6rem */"
                  >
                    ✅ Preberací protokol
                  </Typography>
                  <Typography
                    variant="caption"
                    color="text.secondary"
                    className="/* TODO: Convert display: block */ /* TODO: Convert fontSize: 0.55rem */"
                  >
                    {format(new Date(hasReturn.createdAt), 'dd.MM.yyyy HH:mm', {
                      locale: sk,
                    })}
                  </Typography>
                </div>
              )}
            </div>
          )}

          {/* Actions */}
          <div
            className="/* TODO: Convert display: flex */ gap-1 /* TODO: Convert mt: 2 */ /* TODO: Convert justifyContent: flex-end */"
          >
            <Tooltip title="Upraviť">
              <IconButton
                size="small"
                onClick={e => {
                  e.stopPropagation();
                  onEdit(rental);
                }}
                sx={{
                  bgcolor: 'primary.main',
                  color: 'white',
                  '&:hover': { bgcolor: 'primary.dark' },
                }}
              >
                <EditIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            <Tooltip title="Vymazať">
              <IconButton
                size="small"
                onClick={e => {
                  e.stopPropagation();
                  onDelete(rental.id);
                }}
                sx={{
                  bgcolor: 'error.main',
                  color: 'white',
                  '&:hover': { bgcolor: 'error.dark' },
                }}
              >
                <DeleteIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          </div>
        </CardContent>
      </Card>
    );
  };

  const renderDetailedCard = (rental: Rental) => {
    const hasHandover = protocols[rental.id]?.handover;
    const hasReturn = protocols[rental.id]?.return;
    const isActive =
      rental.status?.toLowerCase() === 'aktívny' ||
      rental.status?.toLowerCase() === 'active';

    return (
      <Card
        key={rental.id}
        sx={{
          height: '100%',
          cursor: 'pointer',
          transition: 'all 0.3s ease',
          border: '1px solid',
          borderColor: isActive ? '#4caf50' : 'divider',
          '&:hover': {
            transform: 'translateY(-4px)',
            boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
            borderColor: isActive ? '#4caf50' : 'primary.main',
          },
          position: 'relative',
          overflow: 'visible',
        }}
        onClick={() => onEdit(rental)}
      >
        {/* Status indicator */}
        <div
          className="/* TODO: Convert position: absolute */ /* TODO: Convert top: -8 */ /* TODO: Convert right: 16 */ /* TODO: Convert zIndex: 1 */"
        >
          <Chip
            label={rental.status}
            color={getStatusColor(rental.status)}
            size="small"
            icon={getStatusIcon(rental.status)}
            className="/* TODO: Convert fontWeight: bold */ /* TODO: Convert boxShadow: 0 2px 8px rgba(0 */"
          />
        </div>

        {/* Protocol status indicator */}
        <div
          className="/* TODO: Convert position: absolute */ /* TODO: Convert top: 8 */ /* TODO: Convert left: 8 */ /* TODO: Convert zIndex: 1 */"
        >
          <div className="/* TODO: Convert display: flex */ gap-1">
            {hasHandover && (
              <Chip
                icon={<HandoverIcon />}
                label=""
                color="success"
                size="small"
                sx={{
                  minWidth: 32,
                  height: 24,
                  '& .MuiChip-icon': { fontSize: 16 },
                }}
              />
            )}
            {hasReturn && (
              <Chip
                icon={<ReturnIcon />}
                label=""
                color="primary"
                size="small"
                sx={{
                  minWidth: 32,
                  height: 24,
                  '& .MuiChip-icon': { fontSize: 16 },
                }}
              />
            )}
          </div>
        </div>

        <CardContent className="p-6 /* TODO: Convert pt: 4 */">
          {/* Vehicle info */}
          <div className="/* TODO: Convert mb: 2 */">
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 1 */">
              <CarIcon color="primary" fontSize="small" />
              <Typography variant="h6" fontWeight="bold" color="primary">
                {rental.vehicle
                  ? `${rental.vehicle.brand} ${rental.vehicle.model}`
                  : 'Bez vozidla'}
              </Typography>
            </div>
            <Typography variant="body2" color="text.secondary" className="/* TODO: Convert ml: 3 */">
              {rental.vehicle?.licensePlate || 'N/A'}
            </Typography>
          </div>

          {/* Customer and company */}
          <div className="/* TODO: Convert mb: 2 */">
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 1 */">
              <PersonIcon color="action" fontSize="small" />
              <Typography variant="body1" fontWeight="medium">
                {rental.customerName}
              </Typography>
            </div>
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
              <BusinessIcon color="action" fontSize="small" />
              <Typography variant="body2" color="text.secondary">
                {rental.vehicle?.company || 'N/A'}
              </Typography>
            </div>
          </div>

          {/* Dates */}
          <div className="/* TODO: Convert mb: 2 */">
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 1 */">
              <ScheduleIcon color="action" fontSize="small" />
              <Typography variant="body2" fontWeight="medium">
                Obdobie prenájmu
              </Typography>
            </div>
            <Typography variant="body2" color="text.secondary" className="/* TODO: Convert ml: 3 */">
              {formatDateTime(rental.startDate)} -{' '}
              {formatDateTime(rental.endDate)}
            </Typography>
          </div>

          {/* Price and commission */}
          <PriceDisplay rental={rental} variant="detailed" showExtraKm={true} />

          {/* Payment info */}
          <div className="/* TODO: Convert mb: 2 */">
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
              <PaymentIcon color="action" fontSize="small" />
              <Typography variant="body2" color="text.secondary">
                {rental.paymentMethod} -{' '}
                {rental.paid ? 'Uhradené' : 'Neuhradené'}
              </Typography>
            </div>
          </div>

          <Divider className="/* TODO: Convert my: 2 */" />

          {/* Protocol actions */}
          <div className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert mb: 2 */">
            {!hasHandover && (
              <Button
                size="small"
                variant="outlined"
                startIcon={<HandoverIcon />}
                onClick={e => {
                  e.stopPropagation();
                  onCreateHandover(rental);
                }}
                className="/* TODO: Convert flex: 1 */"
              >
                Preberací protokol
              </Button>
            )}
            {hasHandover && !hasReturn && (
              <Button
                size="small"
                variant="outlined"
                startIcon={<ReturnIcon />}
                onClick={e => {
                  e.stopPropagation();
                  onCreateReturn(rental);
                }}
                className="/* TODO: Convert flex: 1 */"
              >
                Protokol vrátenia
              </Button>
            )}
          </div>

          {/* Protocol actions for existing protocols */}
          {/* Debug info */}
          <div className="/* TODO: Convert mb: 1 */ p-1 /* TODO: Convert bgcolor: info.light */ rounded">
            <Typography variant="caption" color="info.dark">
              Debug: hasHandover={!!hasHandover}, hasReturn={!!hasReturn},
              protocols={Object.keys(protocols).length}
            </Typography>
          </div>

          {(hasHandover || hasReturn) && (
            <div className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert mb: 2 */">
              <Button
                size="small"
                variant="outlined"
                startIcon={<VisibilityIcon />}
                onClick={e => {
                  e.stopPropagation();
                  onViewProtocols(rental);
                }}
                disabled={loadingProtocols.includes(rental.id)}
                className="/* TODO: Convert flex: 1 */"
              >
                Zobraziť protokoly
              </Button>
              {hasHandover && (
                <Button
                  size="small"
                  variant="outlined"
                  startIcon={<PDFIcon />}
                  onClick={e => {
                    e.stopPropagation();
                    onViewPDF(hasHandover.id, 'handover', 'Preberací protokol');
                  }}
                  className="/* TODO: Convert flex: 1 */"
                >
                  PDF
                </Button>
              )}
              {hasReturn && (
                <Button
                  size="small"
                  variant="outlined"
                  startIcon={<PDFIcon />}
                  onClick={e => {
                    e.stopPropagation();
                    onViewPDF(hasReturn.id, 'return', 'Preberací protokol');
                  }}
                  className="/* TODO: Convert flex: 1 */"
                >
                  PDF
                </Button>
              )}
              {((hasHandover?.vehicleImages?.length ?? 0) > 0 ||
                (hasReturn?.vehicleImages?.length ?? 0) > 0) && (
                <Button
                  size="small"
                  variant="outlined"
                  startIcon={<GalleryIcon />}
                  onClick={e => {
                    e.stopPropagation();
                    onOpenGallery(rental, hasHandover ? 'handover' : 'return');
                  }}
                  className="/* TODO: Convert flex: 1 */"
                >
                  Galéria
                </Button>
              )}
            </div>
          )}

          {/* Protocol details when loaded */}
          {protocols[rental.id] && (
            <div className="/* TODO: Convert mb: 2 */ p-2 /* TODO: Convert bgcolor: grey.50 */ rounded">
              <Typography variant="subtitle2" className="/* TODO: Convert mb: 1 */ /* TODO: Convert fontWeight: 600 */">
                Detaily protokolov:
              </Typography>
              {hasHandover && (
                <div
                  className="/* TODO: Convert mb: 1 */ p-2 /* TODO: Convert bgcolor: success.light */ rounded"
                >
                  <Typography
                    variant="body2"
                    className="/* TODO: Convert fontWeight: 500 */ /* TODO: Convert color: success.dark */"
                  >
                    ✅ Preberací protokol
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Vytvorený:{' '}
                    {format(
                      new Date(hasHandover.createdAt),
                      'dd.MM.yyyy HH:mm',
                      { locale: sk }
                    )}
                  </Typography>
                </div>
              )}
              {hasReturn && (
                <div
                  className="/* TODO: Convert mb: 1 */ p-2 /* TODO: Convert bgcolor: success.light */ rounded"
                >
                  <Typography
                    variant="body2"
                    className="/* TODO: Convert fontWeight: 500 */ /* TODO: Convert color: success.dark */"
                  >
                    ✅ Preberací protokol
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Vytvorený:{' '}
                    {format(new Date(hasReturn.createdAt), 'dd.MM.yyyy HH:mm', {
                      locale: sk,
                    })}
                  </Typography>
                </div>
              )}
            </div>
          )}

          {/* Protocol details when loaded */}
          {protocols[rental.id] && (
            <div className="/* TODO: Convert mb: 2 */ p-2 /* TODO: Convert bgcolor: grey.50 */ rounded">
              <Typography
                variant="subtitle2"
                className="/* TODO: Convert mb: 1 */ /* TODO: Convert fontWeight: 600 */ /* TODO: Convert fontSize: 0.75rem */"
              >
                Detaily protokolov:
              </Typography>
              {hasHandover && (
                <div
                  className="/* TODO: Convert mb: 1 */ p-1 /* TODO: Convert bgcolor: success.light */ rounded"
                >
                  <Typography
                    variant="caption"
                    className="/* TODO: Convert fontWeight: 500 */ /* TODO: Convert color: success.dark */"
                  >
                    ✅ Preberací protokol
                  </Typography>
                  <Typography
                    variant="caption"
                    color="text.secondary"
                    className="/* TODO: Convert display: block */ /* TODO: Convert fontSize: 0.65rem */"
                  >
                    {format(
                      new Date(hasHandover.createdAt),
                      'dd.MM.yyyy HH:mm',
                      { locale: sk }
                    )}
                  </Typography>
                </div>
              )}
              {hasReturn && (
                <div
                  className="/* TODO: Convert mb: 1 */ p-1 /* TODO: Convert bgcolor: success.light */ rounded"
                >
                  <Typography
                    variant="caption"
                    className="/* TODO: Convert fontWeight: 500 */ /* TODO: Convert color: success.dark */"
                  >
                    ✅ Preberací protokol
                  </Typography>
                  <Typography
                    variant="caption"
                    color="text.secondary"
                    className="/* TODO: Convert display: block */ /* TODO: Convert fontSize: 0.65rem */"
                  >
                    {format(new Date(hasReturn.createdAt), 'dd.MM.yyyy HH:mm', {
                      locale: sk,
                    })}
                  </Typography>
                </div>
              )}
            </div>
          )}

          {/* Actions */}
          <div
            className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert justifyContent: flex-end */"
          >
            <Tooltip title="Upraviť">
              <IconButton
                size="small"
                onClick={e => {
                  e.stopPropagation();
                  onEdit(rental);
                }}
                sx={{
                  bgcolor: 'primary.main',
                  color: 'white',
                  '&:hover': { bgcolor: 'primary.dark' },
                }}
              >
                <EditIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            <Tooltip title="Vymazať">
              <IconButton
                size="small"
                onClick={e => {
                  e.stopPropagation();
                  onDelete(rental.id);
                }}
                sx={{
                  bgcolor: 'error.main',
                  color: 'white',
                  '&:hover': { bgcolor: 'error.dark' },
                }}
              >
                <DeleteIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          </div>
        </CardContent>
      </Card>
    );
  };

  const renderCard = (rental: Rental) => {
    switch (viewMode) {
      case 'compact':
        return renderCompactCard(rental);
      case 'detailed':
        return renderDetailedCard(rental);
      default:
        return renderCompactCard(rental);
    }
  };

  const getGridSize = () => {
    switch (viewMode) {
      case 'compact':
        return { xs: 12, sm: 6, md: 4, lg: 3, xl: 2 };
      case 'detailed':
        return { xs: 12, sm: 12, md: 6, lg: 4, xl: 3 };
      default:
        return { xs: 12, sm: 6, md: 4, lg: 3, xl: 2 };
    }
  };

  return (
    <Grid container spacing={{ xs: 1, md: 2 }}>
      {rentals.map(rental => (
        <Grid item key={rental.id} {...getGridSize()}>
          {renderCard(rental)}
        </Grid>
      ))}
    </Grid>
  );
};

export default memo(RentalCardView);
