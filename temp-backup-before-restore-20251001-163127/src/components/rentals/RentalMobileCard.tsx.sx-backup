import {
/* Tailwind classes used for styling */
  Delete as DeleteIcon,
  Edit as EditIcon,
  Assignment as HandoverProtocolIcon,
  Phone as PhoneIcon,
  AssignmentReturn as ReturnProtocolIcon,
  Visibility as VisibilityIcon,
} from '@mui/icons-material';
import { Button,
  Card,
  CardContent,
  Chip,
  Divider,
  IconButton,
  Typography, } from '@mui/material';
import { memo } from 'react';
import PriceDisplay from './components/PriceDisplay';

import type { Rental } from '../../types';
import { formatTime } from '../../utils/formatters';

interface RentalMobileCardProps {
  rental: Rental;
  onEdit: (rental: Rental) => void;
  onDelete: (id: string) => void;
  onShowDetail: (rental: Rental) => void;
  onProtocol: (rental: Rental, type: 'handover' | 'return') => void;
  formatPrice: (price: number | string | undefined) => string;
  formatDate: (date: Date | string) => string;
  getRentalPriority: (rental: Rental) => number;
  getRentalBackgroundColor: (rental: Rental) => string;
}

const RentalMobileCard = memo<RentalMobileCardProps>(
  ({
    rental,
    onEdit,
    onDelete,
    onShowDetail,
    onProtocol,
    // formatPrice, // TODO: Implement price formatting
    formatDate,
    getRentalPriority,
    getRentalBackgroundColor,
  }) => {
    const priority = getRentalPriority(rental);

    return (
      <Card
        sx={{
          mb: 2,
          background: getRentalBackgroundColor(rental),
          border: '1px solid',
          borderColor: priority <= 3 ? 'warning.main' : 'divider',
          '&:hover': {
            boxShadow: 3,
            transform: 'translateY(-1px)',
            transition: 'all 0.2s ease-in-out',
          },
        }}
      >
        <CardContent className="/* TODO: Convert pb: 1 */">
          {/* Header with priority and vehicle */}
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: flex-start */ /* TODO: Convert mb: 1 */"
          >
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
              <Chip
                label={`P${priority}`}
                size="small"
                color={
                  priority <= 3
                    ? 'error'
                    : priority <= 5
                      ? 'warning'
                      : 'default'
                }
              />
              {rental.vehicle ? (
                <div>
                  <Typography
                    variant="subtitle1"
                    className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert fontSize: 0.9rem */"
                  >
                    {rental.vehicle.licensePlate}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    {rental.vehicle.brand} {rental.vehicle.model}
                  </Typography>
                </div>
              ) : (
                <Typography
                  variant="subtitle1"
                  color="error"
                  className="/* TODO: Convert fontSize: 0.9rem */"
                >
                  Bez vozidla
                </Typography>
              )}
            </div>
            <div className="/* TODO: Convert display: flex */ gap-1">
              <IconButton size="small" onClick={() => onShowDetail(rental)}>
                <VisibilityIcon fontSize="small" />
              </IconButton>
              <IconButton size="small" onClick={() => onEdit(rental)}>
                <EditIcon fontSize="small" />
              </IconButton>
            </div>
          </div>

          {/* Customer info */}
          <div className="/* TODO: Convert mb: 1 */">
            <Typography variant="body2" className="/* TODO: Convert fontWeight: 500 */">
              üë§ {rental.customerName}
            </Typography>
            {(rental.customerPhone || rental.customer?.phone) && (
              <Typography
                variant="caption"
                color="text.secondary"
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1 /* TODO: Convert mt: 0.5 */"
              >
                <PhoneIcon className="/* TODO: Convert fontSize: 12 */" />
                {rental.customerPhone || rental.customer?.phone}
              </Typography>
            )}
          </div>

          {/* Company */}
          {rental.vehicle?.company && (
            <Typography
              variant="caption"
              color="text.secondary"
              className="/* TODO: Convert display: block */ /* TODO: Convert mb: 1 */"
            >
              üè¢ {rental.vehicle.company}
            </Typography>
          )}

          {/* Date range */}
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert mb: 1 */">
            <div>
              <Typography variant="caption" color="text.secondary">
                Od:
              </Typography>
              <Typography variant="body2" className="/* TODO: Convert fontWeight: 500 */">
                {formatDate(rental.startDate)}
              </Typography>
              <Typography
                variant="caption"
                color="text.secondary"
                className="/* TODO: Convert fontSize: 0.65rem */"
              >
                {formatTime(rental.startDate)}
              </Typography>
            </div>
            <div>
              <Typography variant="caption" color="text.secondary">
                Do:
              </Typography>
              <Typography variant="body2" className="/* TODO: Convert fontWeight: 500 */">
                {formatDate(rental.endDate)}
              </Typography>
              <Typography
                variant="caption"
                color="text.secondary"
                className="/* TODO: Convert fontSize: 0.65rem */"
              >
                {formatTime(rental.endDate)}
              </Typography>
            </div>
          </div>

          <Divider className="/* TODO: Convert my: 1 */" />

          {/* Price and status */}
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ /* TODO: Convert mb: 1 */"
          >
            <div>
              <PriceDisplay
                rental={rental}
                variant="mobile"
                showExtraKm={true}
              />
            </div>
            <div
              className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-1 /* TODO: Convert alignItems: flex-end */"
            >
              <Chip
                label={rental.paid ? 'Zaplaten√©' : 'Nezaplaten√©'}
                size="small"
                color={rental.paid ? 'success' : 'error'}
                variant={rental.paid ? 'filled' : 'outlined'}
              />
              <Chip
                label={rental.confirmed ? 'Potvrden√©' : 'Nepotvrden√©'}
                size="small"
                color={rental.confirmed ? 'success' : 'warning'}
                variant={rental.confirmed ? 'filled' : 'outlined'}
              />
            </div>
          </div>

          {/* Order number and handover place */}
          {(rental.orderNumber || rental.handoverPlace) && (
            <div className="/* TODO: Convert mb: 1 */">
              {rental.orderNumber && (
                <Typography
                  variant="caption"
                  color="text.secondary"
                  className="/* TODO: Convert display: block */"
                >
                  üìã Obj. ƒç.: {rental.orderNumber}
                </Typography>
              )}
              {rental.handoverPlace && (
                <Typography
                  variant="caption"
                  color="text.secondary"
                  className="/* TODO: Convert display: block */"
                >
                  üìç {rental.handoverPlace}
                </Typography>
              )}
            </div>
          )}

          {/* Action buttons */}
          <div className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert mt: 2 */">
            <Button
              size="small"
              variant="outlined"
              startIcon={<HandoverProtocolIcon />}
              onClick={() => onProtocol(rental, 'handover')}
              className="/* TODO: Convert flex: 1 */"
            >
              Prevzatie
            </Button>
            <Button
              size="small"
              variant="outlined"
              startIcon={<ReturnProtocolIcon />}
              onClick={() => onProtocol(rental, 'return')}
              className="/* TODO: Convert flex: 1 */"
            >
              Vr√°tenie
            </Button>
            <Button
              size="small"
              variant="outlined"
              color="error"
              startIcon={<DeleteIcon />}
              onClick={() => onDelete(rental.id)}
            >
              Zmaza≈•
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }
);

RentalMobileCard.displayName = 'RentalMobileCard';

export default RentalMobileCard;
