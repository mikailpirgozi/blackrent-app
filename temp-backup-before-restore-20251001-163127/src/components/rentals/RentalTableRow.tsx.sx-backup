import React, { memo } from 'react';
import {
/* Tailwind classes used for styling */
  Delete as DeleteIcon,
  Edit as EditIcon,
  Assignment as HandoverProtocolIcon,
  Phone as PhoneIcon,
  AssignmentReturn as ReturnProtocolIcon,
  Visibility as VisibilityIcon,
} from '@mui/icons-material';
import { Chip,
  IconButton,
  TableCell,
  TableRow,
  Tooltip,
  Typography, } from '@mui/material';
import { formatTime } from '../../utils/formatters';
import PriceDisplay from './components/PriceDisplay';

import type { Rental } from '../../types';

interface RentalTableRowProps {
  rental: Rental;
  onEdit: (rental: Rental) => void;
  onDelete: (id: string) => void;
  onShowDetail: (rental: Rental) => void;
  onProtocol: (rental: Rental, type: 'handover' | 'return') => void;
  formatPrice: (price: number | string | undefined) => string;
  formatDate: (date: Date | string) => string;
  getRentalPriority: (rental: Rental) => number;
  getRentalBackgroundColor: (rental: Rental) => string;
}

const RentalTableRow = memo<RentalTableRowProps>(
  ({
    rental,
    onEdit,
    onDelete,
    onShowDetail,
    onProtocol,
    formatPrice,
    formatDate,
    getRentalPriority,
    getRentalBackgroundColor,
  }) => {
    const priority = getRentalPriority(rental);

    return (
      <TableRow
        hover
        sx={{
          backgroundColor: getRentalBackgroundColor(rental),
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.04)',
          },
        }}
      >
        <TableCell>
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
            <Chip
              label={priority}
              size="small"
              color={
                priority <= 3 ? 'error' : priority <= 5 ? 'warning' : 'default'
              }
              className="/* TODO: Convert minWidth: 30 */"
            />
            {rental.vehicle ? (
              <div>
                <Typography variant="body2" className="/* TODO: Convert fontWeight: 500 */">
                  {rental.vehicle.licensePlate}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {rental.vehicle.brand} {rental.vehicle.model}
                </Typography>
                {(rental.vehicleVin || rental.vehicle.vin) && (
                  <Typography
                    variant="caption"
                    className="/* TODO: Convert color: #888 */ /* TODO: Convert fontSize: 0.65rem */ /* TODO: Convert fontFamily: monospace */ /* TODO: Convert display: block */"
                  >
                    VIN: {(rental.vehicleVin || rental.vehicle.vin)?.slice(-8)}
                  </Typography>
                )}
              </div>
            ) : (
              <Typography variant="body2" color="error">
                Bez vozidla
              </Typography>
            )}
          </div>
        </TableCell>

        <TableCell>
          <Typography variant="body2">
            {rental.vehicle?.company || 'N/A'}
          </Typography>
        </TableCell>

        <TableCell>
          <div>
            <Typography variant="body2" className="/* TODO: Convert fontWeight: 500 */">
              {rental.customerName}
            </Typography>
            {(rental.customerPhone || rental.customer?.phone) && (
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1 /* TODO: Convert mt: 0.5 */"
              >
                <PhoneIcon className="/* TODO: Convert fontSize: 14 */" />
                <Typography variant="caption">
                  {rental.customerPhone || rental.customer?.phone}
                </Typography>
              </div>
            )}
          </div>
        </TableCell>

        <TableCell>
          <Typography variant="body2">
            {formatDate(rental.startDate)}
          </Typography>
          <Typography
            variant="caption"
            color="text.secondary"
            className="/* TODO: Convert display: block */ /* TODO: Convert fontSize: 0.7rem */"
          >
            {formatTime(rental.startDate)}
          </Typography>
        </TableCell>

        <TableCell>
          <Typography variant="body2">{formatDate(rental.endDate)}</Typography>
          <Typography
            variant="caption"
            color="text.secondary"
            className="/* TODO: Convert display: block */ /* TODO: Convert fontSize: 0.7rem */"
          >
            {formatTime(rental.endDate)}
          </Typography>
        </TableCell>

        <TableCell>
          <PriceDisplay rental={rental} variant="compact" showExtraKm={false} />
        </TableCell>

        <TableCell>
          <Typography variant="body2">
            €{formatPrice(rental.commission)}
          </Typography>
        </TableCell>

        <TableCell>
          <Chip
            label={rental.paid ? 'Zaplatené' : 'Nezaplatené'}
            size="small"
            color={rental.paid ? 'success' : 'error'}
            variant={rental.paid ? 'filled' : 'outlined'}
          />
        </TableCell>

        <TableCell>
          <Chip
            label={rental.confirmed ? 'Potvrdené' : 'Nepotvrdené'}
            size="small"
            color={rental.confirmed ? 'success' : 'warning'}
            variant={rental.confirmed ? 'filled' : 'outlined'}
          />
        </TableCell>

        <TableCell>
          <div className="/* TODO: Convert display: flex */ gap-1">
            <Tooltip title="Detail">
              <IconButton size="small" onClick={() => onShowDetail(rental)}>
                <VisibilityIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            <Tooltip title="Upraviť">
              <IconButton size="small" onClick={() => onEdit(rental)}>
                <EditIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            <Tooltip title="Vymazať">
              <IconButton size="small" onClick={() => onDelete(rental.id)}>
                <DeleteIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            <Tooltip title="Protokol prevzatia">
              <IconButton
                size="small"
                onClick={() => onProtocol(rental, 'handover')}
              >
                <HandoverProtocolIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            <Tooltip title="Protokol vrátenia">
              <IconButton
                size="small"
                onClick={() => onProtocol(rental, 'return')}
              >
                <ReturnProtocolIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          </div>
        </TableCell>
      </TableRow>
    );
  }
);

RentalTableRow.displayName = 'RentalTableRow';

export default RentalTableRow;
