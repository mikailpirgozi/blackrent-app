/**
 * üîç ENHANCED RENTAL SEARCH
 *
 * Pokroƒçil√© vyhƒæad√°vanie pre pren√°jmy s kompletnou filter funkcionalitou
 */

import { Stack, Typography, useMediaQuery, useTheme } from '@mui/material';
import React, { memo, useCallback, useMemo, useState } from 'react';
/* Tailwind classes used for styling */

// import { useApp } from '../../context/AppContext'; // Migrated to React Query
import type {
  QuickFilter,
  SearchSuggestion,
} from '../../hooks/useEnhancedSearch';
import { useCustomers } from '../../lib/react-query/hooks/useCustomers';
import { useRentals } from '../../lib/react-query/hooks/useRentals';
import { useVehicles } from '../../lib/react-query/hooks/useVehicles';
import type { Rental } from '../../types';
import { searchInTexts } from '../../utils/textNormalization';
import EnhancedSearchBar from '../common/EnhancedSearchBar';
import QuickFilters, { RENTAL_QUICK_FILTERS } from '../common/QuickFilters';
// üîÑ MOBILE CLEANUP: MobileFilterDrawer removed
// import MobileFilterDrawer from '../common/MobileFilterDrawer';

interface EnhancedRentalSearchProps {
  onResults: (results: Rental[]) => void;
  onQueryChange?: (query: string) => void;
  onFiltersChange?: (filters: Record<string, unknown>) => void;
  placeholder?: string;
  showQuickFilters?: boolean;
  compact?: boolean;
}

const EnhancedRentalSearch: React.FC<EnhancedRentalSearchProps> = ({
  onResults,
  onQueryChange,
  // onFiltersChange, // commented out - not used
  placeholder = 'Hƒæada≈• pren√°jmy...',
  showQuickFilters = true,
  compact = false,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  // const { state } = useApp(); // Migrated to React Query

  // React Query hooks for server state
  const { data: rentals = [] } = useRentals();
  const { data: customers = [] } = useCustomers();
  const { data: vehicles = [] } = useVehicles();

  // State
  const [advancedFilters] = useState<Record<string, unknown>>({});
  const [activeQuickFilter, setActiveQuickFilter] = useState<string | null>(
    null
  );

  // Enhanced quick filters with counts
  const enhancedQuickFilters = useMemo<QuickFilter[]>(() => {
    if (!rentals) return RENTAL_QUICK_FILTERS;

    return RENTAL_QUICK_FILTERS.map(filter => {
      let count = 0;

      switch (filter.id) {
        case 'active':
          count = rentals?.filter(r => r.status === 'active').length || 0;
          break;
        case 'pending':
          count = rentals?.filter(r => r.status === 'pending').length || 0;
          break;
        case 'overdue':
          count =
            rentals?.filter(r => {
              const endDate = new Date(r.endDate);
              return endDate < new Date() && r.status === 'active';
            }).length || 0;
          break;
        case 'this_month': {
          const thisMonth = new Date();
          count =
            rentals?.filter(r => {
              const startDate = new Date(r.startDate);
              return (
                startDate.getMonth() === thisMonth.getMonth() &&
                startDate.getFullYear() === thisMonth.getFullYear()
              );
            }).length || 0;
          break;
        }
        case 'high_value':
          count =
            rentals?.filter(r => r.totalPrice && r.totalPrice > 1000).length ||
            0;
          break;
      }

      return { ...filter, count };
    });
  }, [rentals]);

  // Search function for rentals
  const searchRentals = useCallback(
    async (query: string, quickFilter?: string): Promise<Rental[]> => {
      if (!rentals) return [];

      let filteredRentals = [...rentals];

      // Apply text search with diacritics normalization
      if (query.trim()) {
        filteredRentals = filteredRentals.filter(rental => {
          const customer = customers?.find(c => c.id === rental.customerId);
          const vehicle = vehicles?.find(v => v.id === rental.vehicleId);

          // üî§ DIACRITICS NORMALIZATION: Vyhƒæad√°vanie bez ohƒæadu na diakritiku
          return searchInTexts(
            [
              customer?.name,
              customer?.email,
              customer?.phone,
              rental.id,
              rental.customerName, // Pridan√© pre priame vyhƒæad√°vanie v rental
              rental.customerEmail,
              rental.customerPhone,
              vehicle?.brand,
              vehicle?.model,
              vehicle?.licensePlate,
              vehicle?.company,
              rental.notes,
            ],
            query
          );
        });
      }

      // Apply quick filter
      if (quickFilter) {
        const currentDate = new Date();

        switch (quickFilter) {
          case 'active':
            filteredRentals = filteredRentals.filter(
              r => r.status === 'active'
            );
            break;
          case 'pending':
            filteredRentals = filteredRentals.filter(
              r => r.status === 'pending'
            );
            break;
          case 'overdue':
            filteredRentals = filteredRentals.filter(r => {
              const endDate = new Date(r.endDate);
              return endDate < currentDate && r.status === 'active';
            });
            break;
          case 'this_month':
            filteredRentals = filteredRentals.filter(r => {
              const startDate = new Date(r.startDate);
              return (
                startDate.getMonth() === currentDate.getMonth() &&
                startDate.getFullYear() === currentDate.getFullYear()
              );
            });
            break;
          case 'high_value':
            filteredRentals = filteredRentals.filter(
              r => r.totalPrice && r.totalPrice > 1000
            );
            break;
        }
      }

      // Apply advanced filters
      Object.entries(advancedFilters).forEach(([key, value]) => {
        if (!value || value === 'all') return;

        switch (key) {
          case 'company':
            filteredRentals = filteredRentals.filter(r => {
              // Company filter - check rental.company property directly
              return r.company
                ?.toLowerCase()
                .includes(String(value).toLowerCase());
            });
            break;
          case 'vehicle_type':
            filteredRentals = filteredRentals.filter(r => {
              const vehicle = vehicles?.find(v => v.id === r.vehicleId);
              return vehicle?.category === value;
            });
            break;
          case 'date_from':
            filteredRentals = filteredRentals.filter(
              r => new Date(r.startDate) >= new Date(String(value))
            );
            break;
          case 'date_to':
            filteredRentals = filteredRentals.filter(
              r => new Date(r.endDate) <= new Date(String(value))
            );
            break;
          case 'price_min':
            filteredRentals = filteredRentals.filter(
              r => r.totalPrice && r.totalPrice >= parseFloat(String(value))
            );
            break;
          case 'price_max':
            filteredRentals = filteredRentals.filter(
              r => r.totalPrice && r.totalPrice <= parseFloat(String(value))
            );
            break;
        }
      });

      return filteredRentals;
    },
    [rentals, customers, vehicles, advancedFilters]
  );

  // Search function for EnhancedSearchBar (returns Record<string, unknown>[])
  const searchForSuggestions = useCallback(
    async (
      query: string,
      quickFilter?: string
    ): Promise<Record<string, unknown>[]> => {
      const results = await searchRentals(query, quickFilter);

      // Convert Rental[] to Record<string, unknown>[]
      return results.map(rental => ({
        id: rental.id,
        text: `${rental.customerName} - ${rental.id}`,
        type: 'suggestion' as const,
        category: 'Pren√°jom',
        count: 1,
      }));
    },
    [searchRentals]
  );

  // Suggestions function
  const getSuggestions = useCallback(
    async (query: string): Promise<SearchSuggestion[]> => {
      if (!rentals || !customers || !vehicles) return [];

      const suggestions: SearchSuggestion[] = [];
      const searchLower = query.toLowerCase();

      // Customer suggestions
      const matchingCustomers = customers
        .filter(
          c =>
            c.name?.toLowerCase().includes(searchLower) ||
            c.email?.toLowerCase().includes(searchLower)
        )
        .slice(0, 3);

      matchingCustomers.forEach(customer => {
        const rentalCount = rentals.filter(
          r => r.customerId === customer.id
        ).length;
        suggestions.push({
          id: `customer-${customer.id}`,
          text: customer.name,
          type: 'suggestion',
          category: 'Z√°kazn√≠k',
          count: rentalCount,
        });
      });

      // Vehicle suggestions
      const matchingVehicles = vehicles
        .filter(
          v =>
            v.brand?.toLowerCase().includes(searchLower) ||
            v.model?.toLowerCase().includes(searchLower) ||
            v.licensePlate?.toLowerCase().includes(searchLower)
        )
        .slice(0, 3);

      matchingVehicles.forEach(vehicle => {
        const rentalCount = rentals.filter(
          r => r.vehicleId === vehicle.id
        ).length;
        suggestions.push({
          id: `vehicle-${vehicle.id}`,
          text: `${vehicle.brand} ${vehicle.model} (${vehicle.licensePlate})`,
          type: 'suggestion',
          category: 'Vozidlo',
          count: rentalCount,
        });
      });

      return suggestions;
    },
    [rentals, customers, vehicles]
  );

  // Handlers

  const handleQuickFilterChange = useCallback(
    (filterId: string | null) => {
      setActiveQuickFilter(filterId);

      // Trigger search with current query
      const searchBar = document.querySelector(
        'input[type="text"]'
      ) as HTMLInputElement;
      const currentQuery = searchBar?.value || '';

      searchRentals(currentQuery, filterId || undefined).then(results => {
        onResults(results);
      });
    },
    [searchRentals, onResults]
  );

  // Mobile filter sections (commented out - not used)
  // const mobileFilterSections = useMemo(
  //   () => [
  //     {
  //       id: 'company',
  //       title: 'Firma',
  //       type: 'text' as const,
  //       placeholder: 'N√°zov firmy...',
  //       icon: 'üè¢',
  //     },
  //     {
  //       id: 'vehicle_type',
  //       title: 'Typ vozidla',
  //       type: 'select' as const,
  //       options: [
  //         { label: 'Osobn√©', value: 'car' },
  //         { label: 'N√°kladn√©', value: 'truck' },
  //         { label: 'Dod√°vka', value: 'van' },
  //         { label: 'Motorka', value: 'motorcycle' },
  //       ],
  //       icon: 'üöó',
  //     },
  //     {
  //       id: 'date_from',
  //       title: 'Od d√°tumu',
  //       type: 'date' as const,
  //       icon: 'üìÖ',
  //     },
  //     {
  //       id: 'date_to',
  //       title: 'Do d√°tumu',
  //       type: 'date' as const,
  //       icon: 'üìÖ',
  //     },
  //     {
  //       id: 'price_min',
  //       title: 'Min. cena',
  //       type: 'text' as const,
  //       placeholder: '0',
  //       icon: 'üí∞',
  //     },
  //     {
  //       id: 'price_max',
  //       title: 'Max. cena',
  //       type: 'text' as const,
  //       placeholder: '999999',
  //       icon: 'üí∞',
  //     },
  //   ],
  //   []
  // );

  const hasActiveFilters =
    activeQuickFilter ||
    Object.values(advancedFilters).some(v => v && v !== 'all');

  return (
    <div>
      {/* Search Bar */}
      <Stack direction="row" spacing={1} alignItems="flex-start">
        <div className="/* TODO: Convert flex: 1 */">
          <EnhancedSearchBar
            onSearch={searchForSuggestions}
            suggestionFunction={getSuggestions}
            placeholder={placeholder}
            quickFilters={showQuickFilters ? enhancedQuickFilters : []}
            onQuickFilterChange={handleQuickFilterChange}
            onQueryChange={onQueryChange}
            showResultCount
            showPerformanceStats={!compact}
            debounceDelay={300}
            maxSuggestions={6}
            enableHistory
            storageKey="rental_search_history"
          />
        </div>

        {/* Mobile Filter Button - commented out (not used) */}
        {/* {isMobile && (
          <Tooltip title="Pokroƒçil√© filtre">
            <IconButton
              onClick={() => setShowMobileFilters(true)}
              sx={{
                mt: 0.5,
                bgcolor: hasActiveFilters ? 'primary.main' : 'background.paper',
                color: hasActiveFilters
                  ? 'primary.contrastText'
                  : 'text.primary',
                border: `1px solid ${theme.palette.divider}`,
                '&:hover': {
                  bgcolor: hasActiveFilters ? 'primary.dark' : 'action.hover',
                },
              }}
            >
              <TuneIcon />
            </IconButton>
          </Tooltip>
        )} */}
      </Stack>

      {/* Quick Filters - Desktop */}
      {!isMobile && showQuickFilters && (
        <div className="/* TODO: Convert mt: 2 */">
          <QuickFilters
            filters={enhancedQuickFilters}
            activeFilter={activeQuickFilter}
            onFilterSelect={handleQuickFilterChange}
            compact={compact}
          />
        </div>
      )}

      {/* üîÑ MOBILE CLEANUP: MobileFilterDrawer removed */}
      {/* <MobileFilterDrawer
        open={showMobileFilters}
        onClose={() => setShowMobileFilters(false)}
        title="Filtre pren√°jmov"
        quickFilters={enhancedQuickFilters}
        activeQuickFilter={activeQuickFilter}
        onQuickFilterChange={handleQuickFilterChange}
        filterSections={mobileFilterSections}
        filters={advancedFilters}
        onFiltersChange={handleAdvancedFiltersChange}
        onApply={handleAdvancedFiltersChange}
        onReset={() => {
          setAdvancedFilters({});
          setActiveQuickFilter(null);
        }}
        resultCount={rentals?.length}
        hasActiveFilters={Boolean(hasActiveFilters)}
      /> */}

      {/* Results info */}
      {!compact && (
        <Typography
          variant="caption"
          className="/* TODO: Convert display: block */ /* TODO: Convert mt: 1 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert textAlign: right */"
        >
          {hasActiveFilters
            ? 'Filtrovan√© v√Ωsledky'
            : `${rentals?.length || 0} pren√°jmov`}
        </Typography>
      )}
    </div>
  );
};

export default memo(EnhancedRentalSearch);
