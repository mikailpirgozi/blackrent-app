import {
/* Tailwind classes used for styling */
  Add as AddIcon,
  Assignment as AssignmentIcon,
  Build as BuildIcon,
  DirectionsCar as CarIcon,
  CheckCircle as CheckCircleIcon,
  Close as CloseIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Error as ErrorIcon,
  ExpandLess as ExpandLessIcon,
  ExpandMore as ExpandMoreIcon,
  AttachFile as FileIcon,
  FilterList as FilterListIcon,
  LocalShipping as HighwayIcon,
  Assessment as ReportIcon,
  Schedule as ScheduleIcon,
  Search as SearchIcon,
  Security as SecurityIcon,
  Sort as SortIcon,
  Warning as WarningIcon,
} from '@mui/icons-material';
import { Alert,
  Avatar,
  Badge, Button,
  Card,
  CardContent,
  Chip,
  CircularProgress,
  Collapse,
  Dialog,
  Divider,
  Fab,
  FormControl,
  Grid,
  IconButton,
  InputLabel,
  List,
  ListItem,
  ListItemIcon,
  ListItemSecondaryAction,
  ListItemText,
  MenuItem,
  Select,
  TextField,
  Tooltip,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import type { ChipProps } from '@mui/material/Chip';
import { addDays, format, isAfter, isValid, parseISO } from 'date-fns';
import { sk } from 'date-fns/locale';
import { useCallback, useEffect, useMemo, useState } from 'react';
import type { UnifiedDocumentData } from '../common/UnifiedDocumentForm';

import {
  useCreateInsurance,
  useCreateVehicleDocument,
  useDeleteInsurance,
  useDeleteVehicleDocument,
  useInsurancesPaginated,
  useInsurers,
  useUpdateInsurance,
  useUpdateVehicleDocument,
  useVehicleDocuments,
  useVehicles,
} from '../../lib/react-query/hooks';
import type {
  DocumentType,
  Insurance,
  PaymentFrequency,
  Vehicle,
  VehicleDocument,
} from '../../types';
import UnifiedDocumentForm from '../common/UnifiedDocumentForm';

import InsuranceClaimList from './InsuranceClaimList';

// Unified document type for table display
interface UnifiedDocument {
  id: string;
  vehicleId: string;
  type:
    | 'insurance_pzp'
    | 'insurance_kasko'
    | 'insurance_pzp_kasko'
    | 'stk'
    | 'ek'
    | 'vignette'
    | 'technical_certificate';
  documentNumber?: string;
  policyNumber?: string;
  validFrom?: Date | string;
  validTo: Date | string;
  price?: number;
  company?: string;
  paymentFrequency?: PaymentFrequency;
  notes?: string;
  filePath?: string;
  filePaths?: string[];
  createdAt: Date | string;
  originalData: Insurance | VehicleDocument;
  kmState?: number; // üöó Stav kilometrov
}

// Vehicle with documents grouped
interface VehicleWithDocuments {
  vehicle: Vehicle;
  documents: UnifiedDocument[];
  stats: {
    total: number;
    valid: number;
    expiring: number;
    expired: number;
    nextExpiry?: Date;
    hasProblems: boolean;
  };
}

type SortOption = 'name' | 'problems' | 'expiry';

// Interface pre status filter
type StatusFilter = 'all' | 'valid' | 'expiring' | 'expired';

// Interface pre expiry status
interface ExpiryStatus {
  status: 'valid' | 'expiring' | 'expired' | 'invalid';
  text: string;
  color: ChipProps['color'];
  bgColor?: string;
  daysLeft?: number;
}

const getExpiryStatus = (
  validTo: Date | string,
  documentType: string
): ExpiryStatus => {
  try {
    const today = new Date();

    let warningDays: number;
    switch (documentType) {
      case 'insurance':
      case 'vignette':
      case 'greencard':
        warningDays = 15;
        break;
      case 'stk':
      case 'ek':
        warningDays = 30;
        break;
      default:
        warningDays = 30;
    }

    const warningDate = addDays(today, warningDays);
    const validToDate =
      typeof validTo === 'string' ? parseISO(validTo) : validTo;

    if (!isValid(validToDate)) {
      return {
        status: 'invalid',
        color: 'default',
        text: 'Neplatn√Ω d√°tum',
        bgColor: '#f5f5f5',
      };
    }

    if (isAfter(today, validToDate)) {
      return {
        status: 'expired',
        color: 'error',
        text: 'Vypr≈°alo',
        bgColor: '#ffebee',
      };
    } else if (isAfter(validToDate, warningDate)) {
      return {
        status: 'valid',
        color: 'success',
        text: 'Platn√©',
        bgColor: '#e8f5e8',
      };
    } else {
      const daysLeft = Math.ceil(
        (validToDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)
      );
      return {
        status: 'expiring',
        color: 'warning',
        text: `Vypr≈°√≠ za ${daysLeft} dn√≠`,
        bgColor: '#fff3e0',
      };
    }
  } catch (error) {
    return {
      status: 'invalid',
      color: 'default',
      text: 'Neplatn√Ω d√°tum',
      bgColor: '#f5f5f5',
    };
  }
};

const getDocumentTypeInfo = (type: string) => {
  switch (type) {
    case 'insurance_pzp':
      return {
        label: 'Poistka - PZP',
        icon: <SecurityIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#1976d2',
      };
    case 'insurance_kasko':
      return {
        label: 'Poistka - Kasko',
        icon: <SecurityIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#2196f3',
      };
    case 'insurance_pzp_kasko':
      return {
        label: 'Poistka - PZP + Kasko',
        icon: <SecurityIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#9c27b0',
      };
    case 'stk':
      return {
        label: 'STK',
        icon: <BuildIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#388e3c',
      };
    case 'ek':
      return {
        label: 'EK',
        icon: <AssignmentIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#f57c00',
      };
    case 'vignette':
      return {
        label: 'Dialniƒçn√°',
        icon: <HighwayIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#7b1fa2',
      };
    case 'technical_certificate':
      return {
        label: 'Technick√Ω preukaz',
        icon: <FileIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#9c27b0',
      };
    default:
      return {
        label: type,
        icon: <ReportIcon className="/* TODO: Convert fontSize: 20 */" />,
        color: '#666',
      };
  }
};

export default function VehicleCentricInsuranceList() {
  // React Query hooks for data
  const { data: vehicles = [] } = useVehicles();
  const { data: insurers = [] } = useInsurers();
  const { data: vehicleDocuments = [] } = useVehicleDocuments();

  // React Query mutations for vehicle documents
  const createVehicleDocumentMutation = useCreateVehicleDocument();
  const updateVehicleDocumentMutation = useUpdateVehicleDocument();
  const deleteVehicleDocumentMutation = useDeleteVehicleDocument();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));

  // React Query hooks for insurances
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState({
    search: '',
    type: undefined as string | undefined,
    company: undefined as string | undefined,
    status: 'all' as string,
    vehicleId: undefined as string | undefined,
  });

  const {
    data: insurancesData,
    isLoading: loading,
    error,
  } = useInsurancesPaginated({
    page: currentPage,
    limit: 20,
    ...filters,
  });

  // Per-entity cache invalidation is now handled in useInsurances hook

  const insurances = useMemo(
    () => insurancesData?.insurances || [],
    [insurancesData?.insurances]
  );
  const totalCount = insurancesData?.pagination?.totalItems || 0;
  const hasMore = insurancesData?.pagination?.hasMore || false;

  // React Query mutations
  const createInsuranceMutation = useCreateInsurance();
  const updateInsuranceMutation = useUpdateInsurance();
  const deleteInsuranceMutation = useDeleteInsurance();

  const setSearchTerm = useCallback((term: string) => {
    setFilters(prev => ({ ...prev, search: term }));
    setCurrentPage(1);
  }, []);

  const loadMore = () => {
    if (hasMore) {
      setCurrentPage(prev => prev + 1);
    }
  };

  const [activeTab] = useState(0);
  const [openDialog, setOpenDialog] = useState(false);
  const [editingDocument, setEditingDocument] =
    useState<UnifiedDocumentData | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterVehicle, setFilterVehicle] = useState('');
  const [filterCompany, setFilterCompany] = useState('');
  const [filterType, setFilterType] = useState('');
  const [filterStatus, setFilterStatus] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [sortBy, setSortBy] = useState<SortOption>('expiry'); // Default: najbli≈æ≈°ia expir√°cia
  const [expandedVehicles, setExpandedVehicles] = useState<Set<string>>(
    new Set()
  );

  // Synchronize search and filters
  useEffect(() => {
    setSearchTerm(searchQuery);
  }, [searchQuery, setSearchTerm]);

  useEffect(() => {
    setFilters({
      search: searchQuery,
      type: filterType || undefined,
      company: filterCompany || undefined,
      status: (filterStatus as StatusFilter) || 'all',
      vehicleId: filterVehicle || undefined,
    });
    setCurrentPage(1); // Reset page when filters change
  }, [searchQuery, filterType, filterCompany, filterStatus, filterVehicle]);

  // Create unified documents
  const unifiedDocuments = useMemo(() => {
    const docs: UnifiedDocument[] = [];

    // Add insurances
    insurances.forEach((insurance: Insurance) => {
      // Determine insurance type based on existing data
      let insuranceType:
        | 'insurance_pzp'
        | 'insurance_kasko'
        | 'insurance_pzp_kasko' = 'insurance_pzp';

      // Check if it's PZP + Kasko (has both green card and km state)
      if (
        insurance.kmState !== undefined &&
        (insurance.greenCardValidFrom || insurance.greenCardValidTo)
      ) {
        insuranceType = 'insurance_pzp_kasko';
      }
      // If insurance has kmState only, it's Kasko
      else if (insurance.kmState !== undefined) {
        insuranceType = 'insurance_kasko';
      }
      // Check if it's explicitly marked as PZP+Kasko in type field (more specific first)
      else if (
        insurance.type &&
        insurance.type.toLowerCase().includes('pzp') &&
        insurance.type.toLowerCase().includes('kasko')
      ) {
        insuranceType = 'insurance_pzp_kasko';
      }
      // Check if it's explicitly marked as Kasko in type field
      else if (
        insurance.type &&
        insurance.type.toLowerCase().includes('kasko')
      ) {
        insuranceType = 'insurance_kasko';
      }
      // Default to PZP
      else {
        insuranceType = 'insurance_pzp';
      }

      docs.push({
        id: insurance.id,
        vehicleId: insurance.vehicleId,
        type: insuranceType,
        policyNumber: insurance.policyNumber,
        validFrom: insurance.validFrom,
        validTo: insurance.validTo,
        price: insurance.price,
        company: insurance.company,
        paymentFrequency: insurance.paymentFrequency,
        filePath: insurance.filePath,
        filePaths: insurance.filePaths,
        createdAt: insurance.validTo,
        originalData: insurance,
        kmState: insurance.kmState,
      });
    });

    // Add vehicle documents (exclude technical certificates from main list)
    if (vehicleDocuments) {
      vehicleDocuments.forEach(doc => {
        docs.push({
          id: doc.id,
          vehicleId: doc.vehicleId,
          type: doc.documentType,
          documentNumber: doc.documentNumber,
          validFrom: doc.validFrom,
          validTo: doc.validTo,
          price: doc.price,
          notes: doc.notes,
          filePath: doc.filePath,
          createdAt: doc.validTo,
          originalData: doc,
          kmState: doc.kmState, // STK/EK m√¥≈æu ma≈• stav km
        });
      });
    }

    return docs;
  }, [insurances, vehicleDocuments]);

  // Group documents by vehicle
  const vehiclesWithDocuments = useMemo(() => {
    if (!vehicles) return [];

    const vehicleGroups: VehicleWithDocuments[] = [];

    vehicles.forEach(vehicle => {
      const vehicleDocs = unifiedDocuments.filter(
        doc => doc.vehicleId === vehicle.id
      );

      // Skip vehicles with no documents
      if (vehicleDocs.length === 0) return;

      // Apply filtering
      const filteredDocs = vehicleDocs.filter(doc => {
        const vehicleText = `${vehicle.brand} ${vehicle.model} ${vehicle.licensePlate}`;

        const matchesSearch =
          !searchQuery ||
          (doc.policyNumber &&
            doc.policyNumber
              .toLowerCase()
              .includes(searchQuery.toLowerCase())) ||
          (doc.documentNumber &&
            doc.documentNumber
              .toLowerCase()
              .includes(searchQuery.toLowerCase())) ||
          (doc.company &&
            doc.company.toLowerCase().includes(searchQuery.toLowerCase())) ||
          vehicleText.toLowerCase().includes(searchQuery.toLowerCase());

        const matchesVehicle =
          !filterVehicle || doc.vehicleId === filterVehicle;
        const matchesCompany = !filterCompany || doc.company === filterCompany;
        const matchesType = !filterType || doc.type === filterType;
        const matchesStatus =
          !filterStatus ||
          getExpiryStatus(doc.validTo, doc.type).status === filterStatus;

        return (
          matchesSearch &&
          matchesVehicle &&
          matchesCompany &&
          matchesType &&
          matchesStatus
        );
      });

      // Skip if no documents match filters
      if (filteredDocs.length === 0) return;

      // Calculate stats
      const stats = {
        total: filteredDocs.length,
        valid: filteredDocs.filter(
          doc => getExpiryStatus(doc.validTo, doc.type).status === 'valid'
        ).length,
        expiring: filteredDocs.filter(
          doc => getExpiryStatus(doc.validTo, doc.type).status === 'expiring'
        ).length,
        expired: filteredDocs.filter(
          doc => getExpiryStatus(doc.validTo, doc.type).status === 'expired'
        ).length,
        nextExpiry: filteredDocs
          .map(doc =>
            typeof doc.validTo === 'string'
              ? parseISO(doc.validTo)
              : doc.validTo
          )
          .filter(date => isValid(date) && isAfter(date, new Date()))
          .sort((a, b) => a.getTime() - b.getTime())[0],
        hasProblems: false,
      };

      stats.hasProblems = stats.expiring > 0 || stats.expired > 0;

      vehicleGroups.push({
        vehicle,
        documents: filteredDocs,
        stats,
      });
    });

    return vehicleGroups;
  }, [
    vehicles,
    unifiedDocuments,
    searchQuery,
    filterVehicle,
    filterCompany,
    filterType,
    filterStatus,
  ]);

  // Sort vehicles
  const sortedVehicles = useMemo(() => {
    const sorted = [...vehiclesWithDocuments];

    switch (sortBy) {
      case 'name':
        return sorted.sort((a, b) =>
          `${a.vehicle.brand} ${a.vehicle.model}`.localeCompare(
            `${b.vehicle.brand} ${b.vehicle.model}`
          )
        );
      case 'problems':
        return sorted.sort((a, b) => {
          // First by problems (expired + expiring), then by next expiry
          const aProblems = a.stats.expired + a.stats.expiring;
          const bProblems = b.stats.expired + b.stats.expiring;
          if (aProblems !== bProblems) return bProblems - aProblems;

          if (a.stats.nextExpiry && b.stats.nextExpiry) {
            return a.stats.nextExpiry.getTime() - b.stats.nextExpiry.getTime();
          }
          return a.stats.nextExpiry ? -1 : 1;
        });
      case 'expiry':
      default:
        return sorted.sort((a, b) => {
          // 1. Najprv vypr≈°an√© dokumenty (najviac vypr≈°an√Ωch najprv)
          if (a.stats.expired !== b.stats.expired) {
            return b.stats.expired - a.stats.expired;
          }

          // 2. Ak oba maj√∫ vypr≈°an√© dokumenty, zoraƒè podƒæa poƒçtu vypr≈°an√Ωch
          if (a.stats.expired > 0 && b.stats.expired > 0) {
            return b.stats.expired - a.stats.expired;
          }

          // 3. Potom tie ƒço vypr≈°ia ƒçoskoro (podƒæa najbli≈æ≈°ieho d√°tumu)
          if (a.stats.expiring > 0 || b.stats.expiring > 0) {
            // Ak jeden m√° expiruj√∫ce a druh√Ω nie, expiruj√∫ce m√° prioritu
            if (a.stats.expiring > 0 && b.stats.expiring === 0) return -1;
            if (b.stats.expiring > 0 && a.stats.expiring === 0) return 1;

            // Ak oba maj√∫ expiruj√∫ce, zoraƒè podƒæa najbli≈æ≈°ieho d√°tumu
            if (a.stats.nextExpiry && b.stats.nextExpiry) {
              return (
                a.stats.nextExpiry.getTime() - b.stats.nextExpiry.getTime()
              );
            }
          }

          // 4. Nakoniec tie v poriadku - zoraƒè abecedne
          if (
            a.stats.expired === 0 &&
            a.stats.expiring === 0 &&
            b.stats.expired === 0 &&
            b.stats.expiring === 0
          ) {
            return `${a.vehicle.brand} ${a.vehicle.model}`.localeCompare(
              `${b.vehicle.brand} ${b.vehicle.model}`
            );
          }

          // 5. Fallback - ak m√° jeden nextExpiry a druh√Ω nie
          if (a.stats.nextExpiry && b.stats.nextExpiry) {
            return a.stats.nextExpiry.getTime() - b.stats.nextExpiry.getTime();
          }
          if (a.stats.nextExpiry) return -1;
          if (b.stats.nextExpiry) return 1;

          // 6. Posledn√Ω fallback - abecedne
          return `${a.vehicle.brand} ${a.vehicle.model}`.localeCompare(
            `${b.vehicle.brand} ${b.vehicle.model}`
          );
        });
    }
  }, [vehiclesWithDocuments, sortBy]);

  // Overall statistics
  const overallStats = useMemo(() => {
    const allDocs = vehiclesWithDocuments.flatMap(v => v.documents);
    return {
      totalVehicles: vehiclesWithDocuments.length,
      totalDocuments: allDocs.length,
      validDocs: allDocs.filter(
        doc => getExpiryStatus(doc.validTo, doc.type).status === 'valid'
      ).length,
      expiringDocs: allDocs.filter(
        doc => getExpiryStatus(doc.validTo, doc.type).status === 'expiring'
      ).length,
      expiredDocs: allDocs.filter(
        doc => getExpiryStatus(doc.validTo, doc.type).status === 'expired'
      ).length,
    };
  }, [vehiclesWithDocuments]);

  const toggleVehicleExpansion = (vehicleId: string) => {
    const newExpanded = new Set(expandedVehicles);
    if (newExpanded.has(vehicleId)) {
      newExpanded.delete(vehicleId);
    } else {
      newExpanded.add(vehicleId);
    }
    setExpandedVehicles(newExpanded);
  };

  const handleAdd = () => {
    setEditingDocument(null);
    setOpenDialog(true);
  };

  const handleEdit = (doc: UnifiedDocument) => {
    const formData = {
      id: doc.id,
      vehicleId: doc.vehicleId,
      type: doc.type,
      policyNumber: doc.policyNumber,
      company: doc.company,
      paymentFrequency: doc.paymentFrequency,
      documentNumber: doc.documentNumber,
      notes: doc.notes,
      validFrom: doc.validFrom
        ? typeof doc.validFrom === 'string'
          ? new Date(doc.validFrom)
          : doc.validFrom
        : undefined,
      validTo:
        typeof doc.validTo === 'string' ? new Date(doc.validTo) : doc.validTo,
      price: doc.price,
      filePath: doc.filePath,
      filePaths: doc.filePaths || (doc.filePath ? [doc.filePath] : []),
      greenCardValidFrom:
        doc.originalData && 'greenCardValidFrom' in doc.originalData
          ? doc.originalData.greenCardValidFrom
          : undefined,
      greenCardValidTo:
        doc.originalData && 'greenCardValidTo' in doc.originalData
          ? doc.originalData.greenCardValidTo
          : undefined,
      kmState: doc.kmState, // üöó Stav kilometrov
    };
    setEditingDocument(formData);
    setOpenDialog(true);
  };

  const handleDelete = async (doc: UnifiedDocument) => {
    if (window.confirm('Naozaj chcete vymaza≈• tento dokument?')) {
      try {
        if (
          doc.type === 'insurance_pzp' ||
          doc.type === 'insurance_kasko' ||
          doc.type === 'insurance_pzp_kasko'
        ) {
          await deleteInsuranceMutation.mutateAsync(doc.id);
        } else {
          await deleteVehicleDocumentMutation.mutateAsync(doc.id);
        }
      } catch (error) {
        console.error('Chyba pri mazan√≠ dokumentu:', error);
        alert('Chyba pri mazan√≠ dokumentu');
      }
    }
  };

  const handleSave = useCallback(
    (data: UnifiedDocumentData) => {
      const closeDialog = () => {
        setOpenDialog(false);
        setEditingDocument(null);
      };

      if (editingDocument) {
        if (
          editingDocument.type === 'insurance_pzp' ||
          editingDocument.type === 'insurance_kasko' ||
          editingDocument.type === 'insurance_pzp_kasko'
        ) {
          const selectedInsurer = insurers.find(
            insurer => insurer.name === data.company
          );
          const insuranceData = {
            id: editingDocument.id || '',
            vehicleId: data.vehicleId,
            type:
              data.type === 'insurance_kasko'
                ? 'Kasko poistenie'
                : data.type === 'insurance_pzp'
                  ? 'PZP poistenie'
                  : data.type === 'insurance_pzp_kasko'
                    ? 'PZP + Kasko poistenie'
                    : 'Poistenie',
            policyNumber: data.policyNumber || '',
            validFrom: data.validFrom || new Date(),
            validTo: data.validTo,
            price: data.price || 0,
            company: data.company || '',
            insurerId: selectedInsurer?.id || null,
            paymentFrequency: data.paymentFrequency || 'yearly',
            filePath: data.filePath,
            filePaths: data.filePaths,
            greenCardValidFrom: data.greenCardValidFrom,
            greenCardValidTo: data.greenCardValidTo,
            kmState: data.kmState, // üöó Stav kilometrov
          };
          updateInsuranceMutation.mutate(insuranceData, {
            onSuccess: closeDialog,
            onError: error => {
              console.error('Chyba pri ukladan√≠ insurance:', error);
              alert('Chyba pri ukladan√≠ insurance: ' + error.message);
            },
            onSettled: () => {
              // Ensure cache invalidation happens
              console.log('üîÑ onSettled called for updateInsurance');
              // Per-entity cache invalidation is handled in useInsurances hook
            },
          });
        } else {
          // Type guard pre DocumentType
          const isValidDocumentType = (type: string): type is DocumentType => {
            return ['stk', 'ek', 'vignette', 'technical_certificate'].includes(
              type
            );
          };

          if (isValidDocumentType(data.type)) {
            const vehicleDocData = {
              id: editingDocument.id || '',
              vehicleId: data.vehicleId,
              documentType: data.type,
              validFrom: data.validFrom,
              validTo: data.validTo,
              documentNumber: data.documentNumber,
              price: data.price,
              notes: data.notes,
              filePath: data.filePath,
              kmState: data.kmState, // üöó Stav kilometrov pre STK/EK
            };
            updateVehicleDocumentMutation.mutate(vehicleDocData, {
              onSuccess: closeDialog,
              onError: error => {
                console.error('Chyba pri ukladan√≠ vehicle document:', error);
                alert('Chyba pri ukladan√≠ vehicle document: ' + error.message);
              },
            });
          }
        }
      } else {
        if (
          data.type === 'insurance_pzp' ||
          data.type === 'insurance_kasko' ||
          data.type === 'insurance_pzp_kasko'
        ) {
          const insuranceData = {
            id: '',
            vehicleId: data.vehicleId,
            type:
              data.type === 'insurance_kasko'
                ? 'Kasko poistenie'
                : data.type === 'insurance_pzp'
                  ? 'PZP poistenie'
                  : data.type === 'insurance_pzp_kasko'
                    ? 'PZP + Kasko poistenie'
                    : 'Poistenie',
            policyNumber: data.policyNumber || '',
            validFrom: data.validFrom || new Date(),
            validTo: data.validTo,
            price: data.price || 0,
            company: data.company || '',
            paymentFrequency: data.paymentFrequency || 'yearly',
            filePath: data.filePath,
            filePaths: data.filePaths,
            greenCardValidFrom: data.greenCardValidFrom,
            greenCardValidTo: data.greenCardValidTo,
            kmState: data.kmState, // üöó Stav kilometrov pre Kasko
          };
          createInsuranceMutation.mutate(insuranceData, {
            onSuccess: closeDialog,
            onError: error => {
              console.error('Chyba pri ukladan√≠ insurance:', error);
              alert('Chyba pri ukladan√≠ insurance: ' + error.message);
            },
            onSettled: () => {
              // Ensure cache invalidation happens
              console.log('üîÑ onSettled called for createInsurance');
              // Per-entity cache invalidation is handled in useInsurances hook
            },
          });
        } else {
          const vehicleDocData = {
            id: '',
            vehicleId: data.vehicleId,
            documentType: data.type as DocumentType,
            validFrom: data.validFrom,
            validTo: data.validTo,
            documentNumber: data.documentNumber,
            price: data.price,
            notes: data.notes,
            filePath: data.filePath,
            kmState: data.kmState, // üöó Stav kilometrov pre STK/EK
          };
          createVehicleDocumentMutation.mutate(vehicleDocData, {
            onSuccess: closeDialog,
            onError: error => {
              console.error('Chyba pri ukladan√≠ vehicle document:', error);
              alert('Chyba pri ukladan√≠ vehicle document: ' + error.message);
            },
          });
        }
      }
    },
    [
      editingDocument,
      insurers,
      updateInsuranceMutation,
      updateVehicleDocumentMutation,
      createInsuranceMutation,
      createVehicleDocumentMutation,
    ]
  );

  const clearFilters = () => {
    setSearchQuery('');
    setFilterVehicle('');
    setFilterCompany('');
    setFilterType('');
    setFilterStatus('');
  };

  const hasActiveFilters =
    searchQuery || filterVehicle || filterCompany || filterType || filterStatus;

  return (
    <div
      sx={{
        p: { xs: 1, sm: 2, md: 3 },
        width: '100%',
        maxWidth: '100%',
        overflow: 'hidden',
      }}
    >
      {/* Modern Responsive Header */}
      <Card
        sx={{
          mb: { xs: 2, sm: 3 },
          boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
          borderRadius: { xs: 2, sm: 3 },
        }}
      >
        <CardContent
          sx={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            color: 'white',
            position: 'relative',
            p: { xs: 2, sm: 2.5, md: 3 },
          }}
        >
          <div
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: isMobile ? 'flex-start' : 'center',
              flexDirection: isMobile ? 'column' : 'row',
              gap: { xs: 2, sm: 2, md: 2 },
            }}
          >
            <div
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: { xs: 1.5, sm: 2 },
                width: isMobile ? '100%' : 'auto',
              }}
            >
              <SecurityIcon
                sx={{
                  fontSize: { xs: 24, sm: 28, md: 32 },
                  flexShrink: 0,
                }}
              />
              <div className="/* TODO: Convert minWidth: 0 */ /* TODO: Convert flex: 1 */">
                <Typography
                  variant={isMobile ? 'h6' : isTablet ? 'h5' : 'h4'}
                  sx={{
                    fontWeight: 700,
                    mb: 0.5,
                    fontSize: {
                      xs: '1.1rem',
                      sm: '1.25rem',
                      md: '1.5rem',
                      lg: '2rem',
                    },
                    lineHeight: 1.2,
                  }}
                >
                  {isMobile ? 'Poistky & STK' : 'Poistky/STK/Dialniƒçn√©'}
                </Typography>
                <Typography
                  variant={isMobile ? 'body2' : 'body1'}
                  sx={{
                    opacity: 0.9,
                    fontSize: { xs: '0.875rem', sm: '1rem' },
                    display: 'flex',
                    flexWrap: 'wrap',
                    gap: { xs: 0.5, sm: 1 },
                  }}
                >
                  <span>{overallStats.totalVehicles} vozidiel</span>
                  <span>‚Ä¢</span>
                  <span>{overallStats.totalDocuments} dokumentov</span>
                </Typography>
              </div>
            </div>

            {!isMobile && (
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleAdd}
                size={isTablet ? 'medium' : 'large'}
                sx={{
                  backgroundColor: 'rgba(255,255,255,0.2)',
                  backdropFilter: 'blur(10px)',
                  border: '1px solid rgba(255,255,255,0.3)',
                  whiteSpace: 'nowrap',
                  flexShrink: 0,
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.3)',
                  },
                }}
              >
                Prida≈• dokument
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Responsive Statistics Cards */}
      {activeTab === 0 && (
        <Grid
          container
          spacing={{ xs: 1, sm: 2 }}
          sx={{ mb: { xs: 2, sm: 3 } }}
        >
          <Grid item xs={6} sm={6} md={3}>
            <Card
              sx={{
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                color: 'white',
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                height: '100%',
                borderRadius: { xs: 2, sm: 3 },
                transition: 'transform 0.2s ease-in-out',
                '&:hover': {
                  transform: 'translateY(-2px)',
                },
              }}
            >
              <CardContent
                sx={{
                  p: { xs: 1.5, sm: 2, md: 2.5 },
                  '&:last-child': { pb: { xs: 1.5, sm: 2, md: 2.5 } },
                }}
              >
                <div
                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert flexDirection: isMobile ? column : row */ /* TODO: Convert textAlign: isMobile ? center : left */ /* TODO: Convert gap: isMobile ? 1 : 0 */"
                >
                  <div className="/* TODO: Convert order: isMobile ? 2 : 1 */">
                    <Typography
                      variant={
                        isMobile ? 'caption' : isTablet ? 'subtitle2' : 'h6'
                      }
                      sx={{
                        fontWeight: 600,
                        mb: { xs: 0.5, sm: 1 },
                        fontSize: { xs: '0.75rem', sm: '0.875rem', md: '1rem' },
                        letterSpacing: 0.5,
                      }}
                    >
                      VOZIDL√Å
                    </Typography>
                    <Typography
                      variant={isMobile ? 'h6' : isTablet ? 'h5' : 'h4'}
                      sx={{
                        fontWeight: 700,
                        fontSize: { xs: '1.25rem', sm: '1.5rem', md: '2rem' },
                      }}
                    >
                      {overallStats.totalVehicles}
                    </Typography>
                  </div>
                  <CarIcon
                    sx={{
                      fontSize: { xs: 20, sm: 32, md: 40 },
                      opacity: 0.8,
                      order: isMobile ? 1 : 2,
                    }}
                  />
                </div>
              </CardContent>
            </Card>
          </Grid>

          <Grid item xs={6} sm={6} md={3}>
            <Card
              sx={{
                background: 'linear-gradient(135deg, #11998e 0%, #38ef7d 100%)',
                color: 'white',
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                height: '100%',
                borderRadius: { xs: 2, sm: 3 },
                transition: 'transform 0.2s ease-in-out',
                '&:hover': {
                  transform: 'translateY(-2px)',
                },
              }}
            >
              <CardContent
                sx={{
                  p: { xs: 1.5, sm: 2, md: 2.5 },
                  '&:last-child': { pb: { xs: 1.5, sm: 2, md: 2.5 } },
                }}
              >
                <div
                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert flexDirection: isMobile ? column : row */ /* TODO: Convert textAlign: isMobile ? center : left */ /* TODO: Convert gap: isMobile ? 1 : 0 */"
                >
                  <div className="/* TODO: Convert order: isMobile ? 2 : 1 */">
                    <Typography
                      variant={
                        isMobile ? 'caption' : isTablet ? 'subtitle2' : 'h6'
                      }
                      sx={{
                        fontWeight: 600,
                        mb: { xs: 0.5, sm: 1 },
                        fontSize: { xs: '0.75rem', sm: '0.875rem', md: '1rem' },
                        letterSpacing: 0.5,
                      }}
                    >
                      PLATN√â
                    </Typography>
                    <Typography
                      variant={isMobile ? 'h6' : isTablet ? 'h5' : 'h4'}
                      sx={{
                        fontWeight: 700,
                        fontSize: { xs: '1.25rem', sm: '1.5rem', md: '2rem' },
                      }}
                    >
                      {overallStats.validDocs}
                    </Typography>
                  </div>
                  <CheckCircleIcon
                    sx={{
                      fontSize: { xs: 20, sm: 32, md: 40 },
                      opacity: 0.8,
                      order: isMobile ? 1 : 2,
                    }}
                  />
                </div>
              </CardContent>
            </Card>
          </Grid>

          <Grid item xs={6} sm={6} md={3}>
            <Card
              sx={{
                background: 'linear-gradient(135deg, #ffa726 0%, #fb8c00 100%)',
                color: 'white',
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                height: '100%',
                borderRadius: { xs: 2, sm: 3 },
                transition: 'transform 0.2s ease-in-out',
                '&:hover': {
                  transform: 'translateY(-2px)',
                },
              }}
            >
              <CardContent
                sx={{
                  p: { xs: 1.5, sm: 2, md: 2.5 },
                  '&:last-child': { pb: { xs: 1.5, sm: 2, md: 2.5 } },
                }}
              >
                <div
                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert flexDirection: isMobile ? column : row */ /* TODO: Convert textAlign: isMobile ? center : left */ /* TODO: Convert gap: isMobile ? 1 : 0 */"
                >
                  <div className="/* TODO: Convert order: isMobile ? 2 : 1 */">
                    <Typography
                      variant={
                        isMobile ? 'caption' : isTablet ? 'subtitle2' : 'h6'
                      }
                      sx={{
                        fontWeight: 600,
                        mb: { xs: 0.5, sm: 1 },
                        fontSize: { xs: '0.75rem', sm: '0.875rem', md: '1rem' },
                        letterSpacing: 0.5,
                      }}
                    >
                      VYPR≈†√ç
                    </Typography>
                    <Typography
                      variant={isMobile ? 'h6' : isTablet ? 'h5' : 'h4'}
                      sx={{
                        fontWeight: 700,
                        fontSize: { xs: '1.25rem', sm: '1.5rem', md: '2rem' },
                      }}
                    >
                      {overallStats.expiringDocs}
                    </Typography>
                  </div>
                  <ScheduleIcon
                    sx={{
                      fontSize: { xs: 20, sm: 32, md: 40 },
                      opacity: 0.8,
                      order: isMobile ? 1 : 2,
                    }}
                  />
                </div>
              </CardContent>
            </Card>
          </Grid>

          <Grid item xs={6} sm={6} md={3}>
            <Card
              sx={{
                background: 'linear-gradient(135deg, #ef5350 0%, #e53935 100%)',
                color: 'white',
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                height: '100%',
                borderRadius: { xs: 2, sm: 3 },
                transition: 'transform 0.2s ease-in-out',
                '&:hover': {
                  transform: 'translateY(-2px)',
                },
              }}
            >
              <CardContent
                sx={{
                  p: { xs: 1.5, sm: 2, md: 2.5 },
                  '&:last-child': { pb: { xs: 1.5, sm: 2, md: 2.5 } },
                }}
              >
                <div
                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert flexDirection: isMobile ? column : row */ /* TODO: Convert textAlign: isMobile ? center : left */ /* TODO: Convert gap: isMobile ? 1 : 0 */"
                >
                  <div className="/* TODO: Convert order: isMobile ? 2 : 1 */">
                    <Typography
                      variant={
                        isMobile ? 'caption' : isTablet ? 'subtitle2' : 'h6'
                      }
                      sx={{
                        fontWeight: 600,
                        mb: { xs: 0.5, sm: 1 },
                        fontSize: { xs: '0.75rem', sm: '0.875rem', md: '1rem' },
                        letterSpacing: 0.5,
                      }}
                    >
                      VYPR≈†AN√â
                    </Typography>
                    <Typography
                      variant={isMobile ? 'h6' : isTablet ? 'h5' : 'h4'}
                      sx={{
                        fontWeight: 700,
                        fontSize: { xs: '1.25rem', sm: '1.5rem', md: '2rem' },
                      }}
                    >
                      {overallStats.expiredDocs}
                    </Typography>
                  </div>
                  <ErrorIcon
                    sx={{
                      fontSize: { xs: 20, sm: 32, md: 40 },
                      opacity: 0.8,
                      order: isMobile ? 1 : 2,
                    }}
                  />
                </div>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* Responsive Search, Filters and Sorting */}
      {activeTab === 0 && (
        <Card
          sx={{
            mb: { xs: 2, sm: 3 },
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
            borderRadius: { xs: 2, sm: 3 },
          }}
        >
          <CardContent sx={{ p: { xs: 1.5, sm: 2, md: 3 } }}>
            {/* Mobile-first Search and main controls */}
            <div
              sx={{
                display: 'flex',
                gap: { xs: 1, sm: 2 },
                mb: showFilters ? { xs: 1.5, sm: 2 } : 0,
                flexDirection: isMobile ? 'column' : 'row',
                flexWrap: 'wrap',
                alignItems: isMobile ? 'stretch' : 'center',
              }}
            >
              {/* Search Field */}
              <TextField
                placeholder={
                  isMobile
                    ? 'Vyhƒæada≈•...'
                    : 'Vyhƒæada≈• vozidlo alebo dokument...'
                }
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <SearchIcon
                      sx={{
                        color: 'text.secondary',
                        mr: 1,
                        fontSize: { xs: 20, sm: 24 },
                      }}
                    />
                  ),
                }}
                className="/* TODO: Convert flex: isMobile ? none : 1 */ /* TODO: Convert minWidth: isMobile ? 100% : 250px */ /* TODO: Convert order: isMobile ? 1 : 1 */"
                size={isMobile ? 'small' : 'medium'}
                fullWidth={isMobile}
              />

              {/* Controls Row for Mobile */}
              <div
                sx={{
                  display: 'flex',
                  gap: { xs: 1, sm: 2 },
                  order: isMobile ? 2 : 2,
                  width: isMobile ? '100%' : 'auto',
                  flexWrap: 'wrap',
                }}
              >
                {/* Sort dropdown */}
                <FormControl
                  className="/* TODO: Convert minWidth: isMobile ? calc(50% - 4px) : 180 */ /* TODO: Convert flex: isMobile ? 1 : none */"
                  size={isMobile ? 'small' : 'medium'}
                >
                  <InputLabel>
                    {isMobile ? 'Triedi≈•' : 'Triedi≈• podƒæa'}
                  </InputLabel>
                  <Select
                    value={sortBy}
                    label={isMobile ? 'Triedi≈•' : 'Triedi≈• podƒæa'}
                    onChange={e => setSortBy(e.target.value as SortOption)}
                    startAdornment={
                      !isMobile ? (
                        <SortIcon className="/* TODO: Convert mr: 1 */ /* TODO: Convert color: text.secondary */" />
                      ) : undefined
                    }
                  >
                    <MenuItem value="expiry">
                      {isMobile ? 'Expir√°cia' : 'Najbli≈æ≈°ia expir√°cia'}
                    </MenuItem>
                    <MenuItem value="problems">
                      {isMobile ? 'Probl√©my' : 'Poƒçet probl√©mov'}
                    </MenuItem>
                    <MenuItem value="name">
                      {isMobile ? 'N√°zov' : 'N√°zov vozidla'}
                    </MenuItem>
                  </Select>
                </FormControl>

                {/* Filter Button */}
                <Button
                  variant={showFilters ? 'contained' : 'outlined'}
                  startIcon={<FilterListIcon />}
                  onClick={() => setShowFilters(!showFilters)}
                  className="/* TODO: Convert whiteSpace: nowrap */ /* TODO: Convert minWidth: isMobile ? calc(50% - 4px) : auto */ /* TODO: Convert flex: isMobile ? 1 : none */"
                  size={isMobile ? 'small' : 'medium'}
                >
                  {isMobile
                    ? `Filtre${hasActiveFilters ? ` (${Object.values({ searchQuery, filterVehicle, filterCompany, filterType, filterStatus }).filter(Boolean).length})` : ''}`
                    : `Filtre ${hasActiveFilters ? `(${Object.values({ searchQuery, filterVehicle, filterCompany, filterType, filterStatus }).filter(Boolean).length})` : ''}`}
                </Button>

                {/* Clear Filters Button */}
                {hasActiveFilters && (
                  <Button
                    variant="outlined"
                    startIcon={<CloseIcon />}
                    onClick={clearFilters}
                    color="secondary"
                    className="/* TODO: Convert whiteSpace: nowrap */ /* TODO: Convert minWidth: isMobile ? 100% : auto */ /* TODO: Convert order: isMobile ? 3 : unset */"
                    size={isMobile ? 'small' : 'medium'}
                    fullWidth={isMobile}
                  >
                    {isMobile ? 'Zru≈°i≈• filtre' : 'Zru≈°i≈•'}
                  </Button>
                )}
              </div>
            </div>

            {/* Responsive Advanced filters */}
            {showFilters && (
              <>
                <Divider sx={{ my: { xs: 1.5, sm: 2 } }} />
                <Grid container spacing={{ xs: 1.5, sm: 2 }}>
                  <Grid item xs={12} sm={6} md={3}>
                    <FormControl fullWidth size={isMobile ? 'small' : 'medium'}>
                      <InputLabel>Vozidlo</InputLabel>
                      <Select
                        value={filterVehicle}
                        label="Vozidlo"
                        onChange={e => setFilterVehicle(e.target.value)}
                        MenuProps={{
                          PaperProps: {
                            style: {
                              maxHeight: isMobile ? 200 : 300,
                            },
                          },
                        }}
                      >
                        <MenuItem value="">V≈°etky vozidl√°</MenuItem>
                        {vehicles?.map(vehicle => (
                          <MenuItem key={vehicle.id} value={vehicle.id}>
                            <div
                              className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: isMobile ? column : row */ /* TODO: Convert alignItems: isMobile ? flex-start : center */ /* TODO: Convert gap: isMobile ? 0 : 1 */ /* TODO: Convert width: 100% */"
                            >
                              <Typography
                                variant="body2"
                                className="/* TODO: Convert fontWeight: 600 */"
                              >
                                {vehicle.brand} {vehicle.model}
                              </Typography>
                              <Typography
                                variant="caption"
                                color="text.secondary"
                              >
                                {vehicle.licensePlate}
                              </Typography>
                            </div>
                          </MenuItem>
                        )) || []}
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12} sm={6} md={3}>
                    <FormControl fullWidth size={isMobile ? 'small' : 'medium'}>
                      <InputLabel>Typ dokumentu</InputLabel>
                      <Select
                        value={filterType}
                        label="Typ dokumentu"
                        onChange={e => setFilterType(e.target.value)}
                      >
                        <MenuItem value="">V≈°etky typy</MenuItem>
                        <MenuItem value="insurance_pzp">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <SecurityIcon className="/* TODO: Convert fontSize: 16 */" />
                            Poistka - PZP
                          </div>
                        </MenuItem>
                        <MenuItem value="insurance_kasko">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <SecurityIcon className="/* TODO: Convert fontSize: 16 */" />
                            Poistka - Kasko
                          </div>
                        </MenuItem>
                        <MenuItem value="insurance_pzp_kasko">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <SecurityIcon className="/* TODO: Convert fontSize: 16 */" />
                            Poistka - PZP + Kasko
                          </div>
                        </MenuItem>
                        <MenuItem value="stk">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <BuildIcon className="/* TODO: Convert fontSize: 16 */" />
                            STK
                          </div>
                        </MenuItem>
                        <MenuItem value="ek">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <AssignmentIcon className="/* TODO: Convert fontSize: 16 */" />
                            EK
                          </div>
                        </MenuItem>
                        <MenuItem value="vignette">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <HighwayIcon className="/* TODO: Convert fontSize: 16 */" />
                            Dialniƒçn√°
                          </div>
                        </MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12} sm={6} md={3}>
                    <FormControl fullWidth size={isMobile ? 'small' : 'medium'}>
                      <InputLabel>Spoloƒçnos≈•</InputLabel>
                      <Select
                        value={filterCompany}
                        label="Spoloƒçnos≈•"
                        onChange={e => setFilterCompany(e.target.value)}
                        MenuProps={{
                          PaperProps: {
                            style: {
                              maxHeight: isMobile ? 200 : 300,
                            },
                          },
                        }}
                      >
                        <MenuItem value="">V≈°etky spoloƒçnosti</MenuItem>
                        {Array.from(
                          new Set(
                            unifiedDocuments.map(d => d.company).filter(Boolean)
                          )
                        ).map(company => (
                          <MenuItem key={company} value={company}>
                            <Typography variant="body2" noWrap>
                              {company}
                            </Typography>
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12} sm={6} md={3}>
                    <FormControl fullWidth size={isMobile ? 'small' : 'medium'}>
                      <InputLabel>Stav</InputLabel>
                      <Select
                        value={filterStatus}
                        label="Stav"
                        onChange={e => setFilterStatus(e.target.value)}
                      >
                        <MenuItem value="">V≈°etky stavy</MenuItem>
                        <MenuItem value="valid">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <CheckCircleIcon
                              className="/* TODO: Convert fontSize: 16 */ /* TODO: Convert color: success.main */"
                            />
                            Platn√©
                          </div>
                        </MenuItem>
                        <MenuItem value="expiring">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <ScheduleIcon
                              className="/* TODO: Convert fontSize: 16 */ /* TODO: Convert color: warning.main */"
                            />
                            Vypr≈°ia ƒçoskoro
                          </div>
                        </MenuItem>
                        <MenuItem value="expired">
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            <ErrorIcon
                              className="/* TODO: Convert fontSize: 16 */ /* TODO: Convert color: error.main */"
                            />
                            Vypr≈°an√©
                          </div>
                        </MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                </Grid>
              </>
            )}
          </CardContent>
        </Card>
      )}

      {/* Alerts */}
      {activeTab === 0 && overallStats.expiredDocs > 0 && (
        <Alert severity="error" className="/* TODO: Convert mb: 3 */" icon={<WarningIcon />}>
          <Typography variant="body1" className="/* TODO: Convert fontWeight: 600 */">
            Pozor! {overallStats.expiredDocs} dokumentov u≈æ vypr≈°alo
          </Typography>
        </Alert>
      )}

      {activeTab === 0 && overallStats.expiringDocs > 0 && (
        <Alert severity="warning" className="/* TODO: Convert mb: 3 */" icon={<ScheduleIcon />}>
          <Typography variant="body1" className="/* TODO: Convert fontWeight: 600 */">
            Upozornenie: {overallStats.expiringDocs} dokumentov vypr≈°√≠ ƒçoskoro
          </Typography>
        </Alert>
      )}

      {/* Vehicle List */}
      {activeTab === 0 && (
        <div className="/* TODO: Convert mb: 3 */">
          {sortedVehicles.map(vehicleGroup => (
            <VehicleCard
              key={vehicleGroup.vehicle.id}
              vehicleGroup={vehicleGroup}
              expanded={expandedVehicles.has(vehicleGroup.vehicle.id)}
              onToggleExpand={() =>
                toggleVehicleExpansion(vehicleGroup.vehicle.id)
              }
              onEditDocument={handleEdit}
              onDeleteDocument={handleDelete}
              isMobile={isMobile}
              isTablet={isTablet}
            />
          ))}

          {/* Loading indicator */}
          {loading && (
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ p-4">
              <CircularProgress />
            </div>
          )}

          {/* Load more button */}
          {hasMore && !loading && (
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ p-4">
              <Button variant="outlined" onClick={loadMore}>
                Naƒç√≠ta≈• viac ({totalCount - insurances.length} zost√°va)
              </Button>
            </div>
          )}

          {/* Error handling */}
          {error && (
            <Alert severity="error" className="m-4">
              {error instanceof Error ? error.message : String(error)}
            </Alert>
          )}
        </div>
      )}

      {/* Empty State */}
      {activeTab === 0 && sortedVehicles.length === 0 && !loading && (
        <Card className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 6 */ /* TODO: Convert mt: 3 */">
          <CardContent>
            <SecurityIcon
              className="/* TODO: Convert fontSize: 64 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mb: 2 */"
            />
            <Typography variant="h6" color="text.secondary" gutterBottom>
              {hasActiveFilters
                ? '≈Ωiadne vozidl√° nevyhovuj√∫ filtrom'
                : '≈Ωiadne vozidl√° s dokumentmi'}
            </Typography>
            <Typography variant="body2" color="text.secondary" className="/* TODO: Convert mb: 3 */">
              {hasActiveFilters
                ? 'Sk√∫ste zmeni≈• filtre alebo vyhƒæad√°vanie'
                : 'Zaƒçnite pridan√≠m prv√©ho dokumentu'}
            </Typography>
            {!hasActiveFilters && (
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleAdd}
                className="/* TODO: Convert mt: 2 */"
              >
                Prida≈• dokument
              </Button>
            )}
          </CardContent>
        </Card>
      )}

      {/* Insurance Claims Tab */}
      {activeTab === 1 && <InsuranceClaimList />}

      {/* Floating Action Button for Mobile */}
      {isMobile && (
        <Fab
          color="primary"
          aria-label="add"
          onClick={handleAdd}
          sx={{
            position: 'fixed',
            bottom: 24,
            right: 24,
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            '&:hover': {
              background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%)',
            },
          }}
        >
          <AddIcon />
        </Fab>
      )}

      {/* Document Form Dialog */}
      {activeTab === 0 && (
        <Dialog
          open={openDialog}
          onClose={() => setOpenDialog(false)}
          maxWidth="lg"
          fullWidth
          fullScreen={isMobile}
          disableRestoreFocus
          keepMounted={false}
        >
          <UnifiedDocumentForm
            document={editingDocument}
            onSave={handleSave}
            onCancel={() => setOpenDialog(false)}
          />
        </Dialog>
      )}
    </div>
  );
}

// Vehicle Card Component
interface VehicleCardProps {
  vehicleGroup: VehicleWithDocuments;
  expanded: boolean;
  onToggleExpand: () => void;
  onEditDocument: (doc: UnifiedDocument) => void;
  onDeleteDocument: (doc: UnifiedDocument) => void;
  isMobile: boolean;
  isTablet: boolean;
}

function VehicleCard({
  vehicleGroup,
  expanded,
  onToggleExpand,
  onEditDocument,
  onDeleteDocument,
  isMobile,
  isTablet,
}: VehicleCardProps) {
  const { vehicle, documents, stats } = vehicleGroup;

  return (
    <Card
      sx={{
        mb: { xs: 1.5, sm: 2 },
        boxShadow: stats.hasProblems
          ? '0 4px 20px rgba(244, 67, 54, 0.15)'
          : '0 2px 8px rgba(0,0,0,0.1)',
        border: stats.hasProblems ? '1px solid rgba(244, 67, 54, 0.2)' : 'none',
        borderRadius: { xs: 2, sm: 3 },
        transition: 'all 0.2s ease-in-out',
        overflow: 'hidden',
        '&:hover': {
          boxShadow: '0 6px 24px rgba(0,0,0,0.15)',
          transform: isMobile ? 'none' : 'translateY(-2px)',
        },
      }}
    >
      {/* Responsive Vehicle Header */}
      <CardContent
        sx={{
          cursor: 'pointer',
          p: { xs: 1.5, sm: 2, md: 3 },
          '&:hover': {
            backgroundColor: 'rgba(0,0,0,0.02)',
          },
        }}
        onClick={onToggleExpand}
      >
        <div
          sx={{
            display: 'flex',
            alignItems: isMobile ? 'flex-start' : 'center',
            justifyContent: 'space-between',
            flexDirection: isMobile ? 'column' : 'row',
            gap: { xs: 1.5, sm: 2 },
          }}
        >
          <div
            sx={{
              display: 'flex',
              alignItems: 'center',
              gap: { xs: 1.5, sm: 2 },
              flex: 1,
              width: isMobile ? '100%' : 'auto',
              minWidth: 0,
            }}
          >
            {/* Vehicle Avatar/Icon */}
            <Avatar
              sx={{
                bgcolor: stats.hasProblems ? 'error.main' : 'primary.main',
                width: { xs: 36, sm: 40, md: 48 },
                height: { xs: 36, sm: 40, md: 48 },
                flexShrink: 0,
              }}
            >
              <CarIcon sx={{ fontSize: { xs: 18, sm: 20, md: 24 } }} />
            </Avatar>

            {/* Vehicle Info */}
            <div className="/* TODO: Convert flex: 1 */ /* TODO: Convert minWidth: 0 */">
              <Typography
                variant={isMobile ? 'subtitle1' : isTablet ? 'h6' : 'h5'}
                sx={{
                  fontWeight: 700,
                  mb: 0.5,
                  fontSize: { xs: '1rem', sm: '1.1rem', md: '1.25rem' },
                  lineHeight: 1.2,
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap',
                }}
              >
                {vehicle.brand} {vehicle.model}
              </Typography>
              <div>
                <Typography
                  variant="body2"
                  color="text.secondary"
                  sx={{
                    fontSize: { xs: '0.875rem', sm: '0.875rem' },
                    display: 'flex',
                    flexWrap: 'wrap',
                    gap: 0.5,
                    alignItems: 'center',
                  }}
                >
                  <span style={{ fontWeight: 600 }}>
                    {vehicle.licensePlate}
                  </span>
                  <span>‚Ä¢</span>
                  {!isMobile && (
                    <>
                      <span>VIN: {vehicle.vin || 'N/A'}</span>
                      <span>‚Ä¢</span>
                    </>
                  )}
                  <span>{stats.total} dokumentov</span>
                </Typography>
                {isMobile && (
                  <Typography
                    variant="caption"
                    color="text.secondary"
                    className="/* TODO: Convert display: block */ /* TODO: Convert fontSize: 0.75rem */ /* TODO: Convert mt: 0.25 */"
                  >
                    VIN: {vehicle.vin || 'Neuveden√©'}
                  </Typography>
                )}
              </div>

              {/* Next expiry info */}
              {stats.nextExpiry && (
                <Typography
                  variant="caption"
                  color="text.secondary"
                  sx={{
                    display: 'block',
                    mt: 0.5,
                    fontSize: { xs: '0.75rem', sm: '0.75rem' },
                  }}
                >
                  Najbli≈æ≈°ia expir√°cia:{' '}
                  {format(stats.nextExpiry, 'dd.MM.yyyy', { locale: sk })}
                </Typography>
              )}
            </div>
          </div>

          {/* Responsive Status Badges */}
          <div
            sx={{
              display: 'flex',
              alignItems: 'center',
              gap: { xs: 0.5, sm: 1 },
              flexWrap: 'wrap',
              justifyContent: isMobile ? 'space-between' : 'flex-end',
              width: isMobile ? '100%' : 'auto',
            }}
          >
            {/* Status Chips */}
            <div
              sx={{
                display: 'flex',
                gap: { xs: 0.5, sm: 1 },
                flexWrap: 'wrap',
                alignItems: 'center',
              }}
            >
              {stats.expired > 0 && (
                <Badge
                  badgeContent={stats.expired}
                  color="error"
                  sx={{
                    '& .MuiBadge-badge': {
                      fontSize: { xs: '0.625rem', sm: '0.75rem' },
                      minWidth: { xs: 16, sm: 20 },
                      height: { xs: 16, sm: 20 },
                    },
                  }}
                >
                  <Chip
                    label={isMobile ? 'Vypr≈°an√©' : 'Vypr≈°an√©'}
                    color="error"
                    size="small"
                    icon={<ErrorIcon sx={{ fontSize: { xs: 14, sm: 16 } }} />}
                    sx={{
                      fontSize: { xs: '0.75rem', sm: '0.8125rem' },
                      height: { xs: 24, sm: 32 },
                    }}
                  />
                </Badge>
              )}
              {stats.expiring > 0 && (
                <Badge
                  badgeContent={stats.expiring}
                  color="warning"
                  sx={{
                    '& .MuiBadge-badge': {
                      fontSize: { xs: '0.625rem', sm: '0.75rem' },
                      minWidth: { xs: 16, sm: 20 },
                      height: { xs: 16, sm: 20 },
                    },
                  }}
                >
                  <Chip
                    label={isMobile ? 'Vypr≈°√≠' : 'Vypr≈°√≠'}
                    color="warning"
                    size="small"
                    icon={
                      <ScheduleIcon sx={{ fontSize: { xs: 14, sm: 16 } }} />
                    }
                    sx={{
                      fontSize: { xs: '0.75rem', sm: '0.8125rem' },
                      height: { xs: 24, sm: 32 },
                    }}
                  />
                </Badge>
              )}
              {!stats.hasProblems && (
                <Chip
                  label={isMobile ? 'OK' : 'V poriadku'}
                  color="success"
                  size="small"
                  icon={
                    <CheckCircleIcon sx={{ fontSize: { xs: 14, sm: 16 } }} />
                  }
                  sx={{
                    fontSize: { xs: '0.75rem', sm: '0.8125rem' },
                    height: { xs: 24, sm: 32 },
                  }}
                />
              )}
            </div>

            {/* Expand/Collapse Icon */}
            <IconButton
              size="small"
              sx={{
                ml: { xs: 0, sm: 1 },
                p: { xs: 0.5, sm: 1 },
              }}
            >
              {expanded ? (
                <ExpandLessIcon sx={{ fontSize: { xs: 20, sm: 24 } }} />
              ) : (
                <ExpandMoreIcon sx={{ fontSize: { xs: 20, sm: 24 } }} />
              )}
            </IconButton>
          </div>
        </div>
      </CardContent>

      {/* Expandable Documents List */}
      <Collapse in={expanded} timeout="auto" unmountOnExit>
        <Divider />
        <List className="/* TODO: Convert pt: 0 */">
          {documents.map((doc, index) => (
            <DocumentListItem
              key={`${doc.type}-${doc.id || index}`}
              document={doc}
              onEdit={() => onEditDocument(doc)}
              onDelete={() => onDeleteDocument(doc)}
              isMobile={isMobile}
              isLast={index === documents.length - 1}
            />
          ))}
        </List>
      </Collapse>
    </Card>
  );
}

// Document List Item Component
interface DocumentListItemProps {
  document: UnifiedDocument;
  onEdit: () => void;
  onDelete: () => void;
  isMobile: boolean;
  isLast: boolean;
}

function DocumentListItem({
  document,
  onEdit,
  onDelete,
  isMobile,
  isLast,
}: DocumentListItemProps) {
  const typeInfo = getDocumentTypeInfo(document.type);
  const expiryStatus = getExpiryStatus(document.validTo, document.type);

  return (
    <>
      <ListItem
        sx={{
          py: { xs: 1, sm: 1.5, md: 2 },
          px: { xs: 1.5, sm: 2, md: 3 },
          flexDirection: isMobile ? 'column' : 'row',
          alignItems: isMobile ? 'stretch' : 'center',
          gap: isMobile ? 1 : 0,
          '&:hover': {
            backgroundColor: 'rgba(0,0,0,0.02)',
          },
        }}
      >
        {!isMobile && (
          <ListItemIcon sx={{ minWidth: { xs: 32, sm: 40 } }}>
            <div className="/* TODO: Convert color: typeInfo.color */">{typeInfo.icon}</div>
          </ListItemIcon>
        )}

        <ListItemText
          className="/* TODO: Convert flex: 1 */ /* TODO: Convert mr: isMobile ? 0 : 2 */"
          secondaryTypographyProps={{ component: 'div' }}
          primary={
            <span
              style={{
                display: 'flex',
                alignItems: isMobile ? 'flex-start' : 'center',
                gap: '8px',
                flexWrap: 'wrap',
                flexDirection: isMobile ? 'column' : 'row',
              }}
            >
              <span
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  flexWrap: 'wrap',
                }}
              >
                {isMobile && (
                  <span
                    style={{
                      color: typeInfo.color,
                      display: 'flex',
                      alignItems: 'center',
                    }}
                  >
                    {typeInfo.icon}
                  </span>
                )}
                <Typography
                  component="span"
                  variant={isMobile ? 'subtitle2' : 'body1'}
                  sx={{
                    fontWeight: 600,
                    fontSize: { xs: '0.875rem', sm: '1rem' },
                  }}
                >
                  {typeInfo.label}
                </Typography>
                {(document.policyNumber ||
                  document.documentNumber ||
                  document.kmState) && (
                  <Typography
                    component="span"
                    variant="body2"
                    color="text.secondary"
                    sx={{
                      fontSize: { xs: '0.75rem', sm: '0.875rem' },
                      fontFamily: 'monospace',
                    }}
                  >
                    {document.type === 'stk' || document.type === 'ek'
                      ? document.kmState
                        ? `${document.kmState.toLocaleString()} km`
                        : document.documentNumber
                      : document.type === 'insurance_kasko' && document.kmState
                        ? `${document.kmState.toLocaleString()} km`
                        : document.policyNumber || document.documentNumber}
                  </Typography>
                )}
              </span>
            </span>
          }
          secondary={
            <span
              style={{ marginTop: isMobile ? '8px' : '4px', display: 'block' }}
            >
              <span
                style={{
                  display: 'flex',
                  alignItems: isMobile ? 'flex-start' : 'center',
                  gap: isMobile ? '8px' : '16px',
                  flexWrap: 'wrap',
                  flexDirection: isMobile ? 'column' : 'row',
                }}
              >
                {/* Date and Status Row */}
                <span
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    flexWrap: 'wrap',
                  }}
                >
                  <Typography
                    component="span"
                    variant="body2"
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {(() => {
                      try {
                        const date =
                          typeof document.validTo === 'string'
                            ? parseISO(document.validTo)
                            : document.validTo;
                        return isValid(date)
                          ? `Platn√© do ${format(date, 'dd.MM.yyyy', { locale: sk })}`
                          : 'Neplatn√Ω d√°tum';
                      } catch (error) {
                        return 'Neplatn√Ω d√°tum';
                      }
                    })()}
                  </Typography>

                  <span style={{ display: 'inline-flex' }}>
                    <Chip
                      label={expiryStatus.text}
                      color={expiryStatus.color}
                      size="small"
                      variant="filled"
                      sx={{
                        fontSize: { xs: '0.625rem', sm: '0.75rem' },
                        height: { xs: 20, sm: 24 },
                      }}
                    />
                  </span>
                </span>

                {/* Company and Price Row */}
                <span
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    flexWrap: 'wrap',
                  }}
                >
                  {document.company && (
                    <Typography
                      component="span"
                      variant="body2"
                      color="text.secondary"
                      sx={{
                        fontSize: { xs: '0.75rem', sm: '0.875rem' },
                        fontWeight: 500,
                      }}
                    >
                      {document.company}
                    </Typography>
                  )}

                  {document.price && (
                    <Typography
                      component="span"
                      variant="body2"
                      color="text.secondary"
                      sx={{
                        fontSize: { xs: '0.75rem', sm: '0.875rem' },
                        fontWeight: 600,
                        color: 'primary.main',
                      }}
                    >
                      ‚Ç¨{document.price.toFixed(2)}
                    </Typography>
                  )}
                </span>
              </span>

              {/* Green Card info for insurance */}
              {(document.type === 'insurance_pzp' ||
                document.type === 'insurance_kasko' ||
                document.type === 'insurance_pzp_kasko') &&
                document.originalData &&
                'greenCardValidTo' in document.originalData &&
                document.originalData.greenCardValidTo && (
                  <span
                    style={{
                      marginTop: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px',
                    }}
                  >
                    <Typography
                      component="span"
                      variant="caption"
                      color="text.secondary"
                    >
                      üü¢ Biela karta:
                    </Typography>
                    <Typography
                      component="span"
                      variant="caption"
                      color="text.secondary"
                    >
                      {(() => {
                        try {
                          const date =
                            typeof document.originalData.greenCardValidTo ===
                            'string'
                              ? parseISO(document.originalData.greenCardValidTo)
                              : document.originalData.greenCardValidTo;
                          return isValid(date)
                            ? format(date, 'dd.MM.yyyy', { locale: sk })
                            : 'Neplatn√Ω';
                        } catch (error) {
                          return 'Neplatn√Ω';
                        }
                      })()}
                    </Typography>
                    <span style={{ display: 'inline-flex' }}>
                      <Chip
                        label={
                          getExpiryStatus(
                            document.originalData.greenCardValidTo,
                            'greencard'
                          ).text
                        }
                        color={
                          getExpiryStatus(
                            document.originalData.greenCardValidTo,
                            'greencard'
                          ).color
                        }
                        size="small"
                        variant="outlined"
                      />
                    </span>
                  </span>
                )}

              {/* Files */}
              {(() => {
                const filePaths =
                  (document.originalData as Insurance)?.filePaths ||
                  (document.filePath ? [document.filePath] : []);

                if (filePaths.length > 0) {
                  return (
                    <span
                      style={{
                        marginTop: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px',
                        flexWrap: 'wrap',
                      }}
                    >
                      <FileIcon
                        className="/* TODO: Convert fontSize: 16 */ /* TODO: Convert color: text.secondary */"
                      />
                      {filePaths.length === 1 ? (
                        <Button
                          size="small"
                          variant="text"
                          onClick={() => window.open(filePaths[0], '_blank')}
                          className="/* TODO: Convert minWidth: auto */ p-1"
                        >
                          Zobrazi≈• s√∫bor
                        </Button>
                      ) : (
                        <span style={{ display: 'inline-flex' }}>
                          <Chip
                            label={`${filePaths.length} s√∫borov`}
                            size="small"
                            variant="outlined"
                            onClick={() => {
                              // ZIP download logic here
                              console.log('Download ZIP for files:', filePaths);
                            }}
                            className="/* TODO: Convert cursor: pointer */"
                          />
                        </span>
                      )}
                    </span>
                  );
                }
                return null;
              })()}
            </span>
          }
        />

        {/* Responsive Action Buttons */}
        {isMobile ? (
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: flex-end */ gap-1 /* TODO: Convert mt: 1 */ /* TODO: Convert width: 100% */"
          >
            <Button
              size="small"
              variant="outlined"
              startIcon={<EditIcon />}
              onClick={onEdit}
              className="/* TODO: Convert minWidth: auto */ /* TODO: Convert px: 1.5 */ /* TODO: Convert fontSize: 0.75rem */"
            >
              Upravi≈•
            </Button>
            <Button
              size="small"
              variant="outlined"
              color="error"
              startIcon={<DeleteIcon />}
              onClick={onDelete}
              className="/* TODO: Convert minWidth: auto */ /* TODO: Convert px: 1.5 */ /* TODO: Convert fontSize: 0.75rem */"
            >
              Vymaza≈•
            </Button>
          </div>
        ) : (
          <ListItemSecondaryAction>
            <div className="/* TODO: Convert display: flex */ gap-1">
              <Tooltip title="Upravi≈•">
                <IconButton
                  size="small"
                  onClick={onEdit}
                  className="/* TODO: Convert color: primary.main */"
                >
                  <EditIcon sx={{ fontSize: { sm: 18, md: 20 } }} />
                </IconButton>
              </Tooltip>
              <Tooltip title="Vymaza≈•">
                <IconButton
                  size="small"
                  onClick={onDelete}
                  className="/* TODO: Convert color: error.main */"
                >
                  <DeleteIcon sx={{ fontSize: { sm: 18, md: 20 } }} />
                </IconButton>
              </Tooltip>
            </div>
          </ListItemSecondaryAction>
        )}
      </ListItem>
      {!isLast && <Divider variant="inset" component="li" />}
    </>
  );
}
