import {
/* Tailwind classes used for styling */
  Add as AddIcon,
  AccountBalance as BankIcon,
  Business as CompanyIcon,
  Delete as DeleteIcon,
  Euro as EuroIcon,
  FilterList as FilterListIcon,
  TrendingDown as LossIcon,
  TrendingUp as ProfitIcon,
  Assessment as ReportIcon,
  Search as SearchIcon,
  DirectionsCar as VehicleIcon,
  Visibility as ViewIcon,
} from '@mui/icons-material';
import { Button,
  Card,
  CardContent,
  Chip,
  CircularProgress,
  Dialog,
  Divider,
  FormControl,
  Grid,
  IconButton,
  InputLabel,
  MenuItem,
  Select,
  TextField,
  ToggleButton,
  ToggleButtonGroup,
  Tooltip,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';
import { format } from 'date-fns';
import { saveAs } from 'file-saver';
import Papa from 'papaparse';
import React, { useMemo, useState } from 'react';

// import { useApp } from '../../context/AppContext'; // ❌ REMOVED - migrated to React Query
import { useCompanies } from '@/lib/react-query/hooks/useCompanies';
import {
  useCreateSettlement,
  useDeleteSettlement,
  useSettlements,
} from '@/lib/react-query/hooks/useSettlements';
import { useVehicles } from '@/lib/react-query/hooks/useVehicles';
import type { Settlement, Vehicle } from '../../types';

import SettlementDetail from './SettlementDetail';

const SettlementListNew: React.FC = () => {
  // ✅ MIGRATED: React Query hooks instead of AppContext
  const { data: settlements = [] } = useSettlements();
  const { data: vehicles = [] } = useVehicles();
  const { data: companies = [] } = useCompanies();
  const createSettlementMutation = useCreateSettlement();
  const deleteSettlementMutation = useDeleteSettlement();

  // Helper functions for compatibility
  const createSettlement = async (settlement: Settlement) => {
    return createSettlementMutation.mutateAsync(settlement);
  };
  const deleteSettlement = async (id: string) => {
    return deleteSettlementMutation.mutateAsync(id);
  };

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'), { noSsr: true });

  // States
  const [searchQuery, setSearchQuery] = useState('');
  const [companyFilter, setCompanyFilter] = useState('');
  const [vehicleFilter, setVehicleFilter] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [detailOpen, setDetailOpen] = useState(false);
  const [selectedSettlement, setSelectedSettlement] =
    useState<Settlement | null>(null);
  const [loading, setLoading] = useState(false);

  // New settlement creation states
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [selectedCompanies, setSelectedCompanies] = useState<string[]>([]);
  const [selectedVehicleIds, setSelectedVehicleIds] = useState<string[]>([]);
  const [periodFrom, setPeriodFrom] = useState('');
  const [periodTo, setPeriodTo] = useState('');
  const [periodType, setPeriodType] = useState<'month' | 'range'>('month');
  const [selectedMonth, setSelectedMonth] = useState('');

  // Get unique values for filters
  const uniqueCompanies = useMemo(
    () => companies.map(c => c.name).sort(),
    [companies]
  );

  // Vehicle options for autocomplete
  const vehicleOptions = useMemo(
    () =>
      vehicles.map((vehicle: Vehicle) => ({
        id: vehicle.id,
        label: `${vehicle.brand} ${vehicle.model} - ${vehicle.licensePlate}`,
        company: vehicle.company,
      })),
    [vehicles]
  );

  // Get unique companies from settlements for filtering
  const settlementsCompanies = useMemo(
    () =>
      Array.from(
        new Set(
          settlements
            .map((s: Settlement) => s.company)
            .filter((company): company is string => Boolean(company))
        )
      ).sort(),
    [settlements]
  );

  // Filtered settlements
  const filteredSettlements = useMemo(() => {
    return settlements.filter((settlement: Settlement) => {
      const matchesSearch =
        !searchQuery ||
        settlement.company?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        settlement.id.toLowerCase().includes(searchQuery.toLowerCase());

      const matchesCompany =
        !companyFilter || settlement.company === companyFilter;
      const matchesVehicle =
        !vehicleFilter || settlement.vehicleId === vehicleFilter;

      return matchesSearch && matchesCompany && matchesVehicle;
    });
  }, [settlements, searchQuery, companyFilter, vehicleFilter]);

  // Calculate totals
  const totalIncome = useMemo(
    () =>
      filteredSettlements.reduce(
        (sum: number, settlement: Settlement) => sum + settlement.totalIncome,
        0
      ),
    [filteredSettlements]
  );

  const totalExpenses = useMemo(
    () =>
      filteredSettlements.reduce(
        (sum: number, settlement: Settlement) => sum + settlement.totalExpenses,
        0
      ),
    [filteredSettlements]
  );

  const totalProfit = useMemo(
    () =>
      filteredSettlements.reduce(
        (sum: number, settlement: Settlement) => sum + settlement.profit,
        0
      ),
    [filteredSettlements]
  );

  // Note: totalCommission calculated but not used in UI - keeping for potential future use
  // const totalCommission = useMemo(
  //   () =>
  //     filteredSettlements.reduce(
  //       (sum: number, settlement: Settlement) =>
  //         sum + settlement.totalCommission,
  //       0
  //     ),
  //   [filteredSettlements]
  // );

  // Handlers
  const handleCreateSettlement = () => {
    setSelectedCompanies([]);
    setSelectedVehicleIds([]);
    setPeriodFrom('');
    setPeriodTo('');
    setSelectedMonth('');
    setPeriodType('month');
    setCreateDialogOpen(true);
  };

  const handleViewSettlement = (settlement: Settlement) => {
    setSelectedSettlement(settlement);
    setDetailOpen(true);
  };

  const handleDeleteSettlement = async (settlement: Settlement) => {
    if (
      window.confirm(
        `Naozaj chcete zmazať vyúčtovanie za obdobie ${format(new Date(settlement.period.from), 'dd.MM.yyyy')} - ${format(new Date(settlement.period.to), 'dd.MM.yyyy')}?`
      )
    ) {
      try {
        console.log('Delete settlement:', settlement.id);
        await deleteSettlement(settlement.id);
      } catch (error) {
        console.error('Chyba pri mazaní vyúčtovania:', error);
        alert('Chyba pri mazaní vyúčtovania. Skúste to znova.');
      }
    }
  };

  const handleCreateSubmit = async () => {
    let fromDate: Date;
    let toDate: Date;

    if (periodType === 'month') {
      if (!selectedMonth) {
        alert('Prosím vyberte mesiac');
        return;
      }
      // Parse YYYY-MM format
      const [year, month] = selectedMonth.split('-').map(Number);
      fromDate = new Date(year, month - 1, 1); // month is 0-indexed
      toDate = new Date(year, month, 0); // Last day of month
    } else {
      if (!periodFrom || !periodTo) {
        alert('Prosím vyberte obdobie');
        return;
      }
      fromDate = new Date(periodFrom);
      toDate = new Date(periodTo);
    }

    // Validácia - musí byť vybraná aspoň jedna firma alebo vozidlo
    if (selectedCompanies.length === 0 && selectedVehicleIds.length === 0) {
      alert('Prosím vyberte aspoň jednu firmu alebo vozidlo');
      return;
    }

    setLoading(true);
    try {
      // Ak sú vybrané firmy, vytvor settlement pre každú firmu
      if (selectedCompanies.length > 0) {
        for (const company of selectedCompanies) {
          const settlementData: Settlement = {
            id: '', // Backend vygeneruje ID
            period: {
              from: fromDate,
              to: toDate,
            },
            company: company,
            vehicleId: undefined, // Pri výbere firiem nevyberáme konkrétne vozidlo
            totalIncome: 0, // Backend vypočíta
            totalExpenses: 0, // Backend vypočíta
            totalCommission: 0, // Backend vypočíta
            profit: 0, // Backend vypočíta
            rentals: [], // Backend načíta
            expenses: [], // Backend načíta
          };

          await createSettlement(settlementData);
        }
      }

      // Ak sú vybrané vozidlá, vytvor settlement pre každé vozidlo
      if (selectedVehicleIds.length > 0) {
        for (const vehicleId of selectedVehicleIds) {
          const vehicle = vehicles.find((v: Vehicle) => v.id === vehicleId);
          const settlementData: Settlement = {
            id: '', // Backend vygeneruje ID
            period: {
              from: fromDate,
              to: toDate,
            },
            company: vehicle?.company || '',
            vehicleId: vehicleId,
            totalIncome: 0, // Backend vypočíta
            totalExpenses: 0, // Backend vypočíta
            totalCommission: 0, // Backend vypočíta
            profit: 0, // Backend vypočíta
            rentals: [], // Backend načíta
            expenses: [], // Backend načíta
          };

          await createSettlement(settlementData);
        }
      }

      // Settlements sú už pridané cez createSettlement v AppContext
      // Nepotrebujeme volať loadData() ktoré by prepisalo state

      setCreateDialogOpen(false);
      // Clear form
      setSelectedCompanies([]);
      setSelectedVehicleIds([]);
      setPeriodFrom('');
      setPeriodTo('');
      setSelectedMonth('');
    } catch (error) {
      console.error('Error creating settlement:', error);
      alert('Chyba pri vytváraní vyúčtovania');
    } finally {
      setLoading(false);
    }
  };

  const handleExportCSV = () => {
    const csvData = filteredSettlements.map((settlement: Settlement) => ({
      ID: settlement.id,
      'Obdobie od': format(new Date(settlement.period.from), 'dd.MM.yyyy'),
      'Obdobie do': format(new Date(settlement.period.to), 'dd.MM.yyyy'),
      Firma: settlement.company || '',
      Vozidlo: settlement.vehicleId
        ? vehicles.find(v => v.id === settlement.vehicleId)?.licensePlate ||
          settlement.vehicleId
        : '',
      Príjmy: settlement.totalIncome,
      Náklady: settlement.totalExpenses,
      Provízia: settlement.totalCommission,
      Zisk: settlement.profit,
      'Počet prenájmov': settlement.rentals?.length || 0,
      'Počet nákladov': settlement.expenses?.length || 0,
    }));

    const csv = Papa.unparse(csvData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, `vyuctovanie-${format(new Date(), 'yyyy-MM-dd')}.csv`);
  };

  const clearFilters = () => {
    setSearchQuery('');
    setCompanyFilter('');
    setVehicleFilter('');
  };

  return (
    <div sx={{ p: { xs: 1, md: 3 } }}>
      {/* Header */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */">
        <CardContent>
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ /* TODO: Convert flexWrap: wrap */ gap-4"
          >
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
              <ReportIcon className="/* TODO: Convert color: #1976d2 */ /* TODO: Convert fontSize: 28 */" />
              <Typography
                variant="h4"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #1976d2 */"
              >
                Vyúčtovanie
              </Typography>
            </div>
            <div className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert flexWrap: wrap */">
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleCreateSettlement}
                className="/* TODO: Convert minWidth: 120 */"
              >
                Vytvoriť
              </Button>
              <Button
                variant="outlined"
                onClick={handleExportCSV}
                disabled={filteredSettlements.length === 0}
              >
                Export CSV
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Search and Filters */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert boxShadow: 0 2px 8px rgba(0 */">
        <CardContent>
          <div
            className="/* TODO: Convert display: flex */ gap-4 /* TODO: Convert alignItems: center */ /* TODO: Convert flexWrap: wrap */"
          >
            <TextField
              placeholder="Hľadať vyúčtovanie..."
              value={searchQuery}
              onChange={e => setSearchQuery(e.target.value)}
              InputProps={{
                startAdornment: (
                  <SearchIcon className="/* TODO: Convert color: text.secondary */ /* TODO: Convert mr: 1 */" />
                ),
              }}
              className="/* TODO: Convert minWidth: 250 */ /* TODO: Convert flexGrow: 1 */"
            />

            <Button
              variant={showFilters ? 'contained' : 'outlined'}
              startIcon={<FilterListIcon />}
              onClick={() => setShowFilters(!showFilters)}
            >
              Filtre
            </Button>

            {(companyFilter || vehicleFilter) && (
              <Button variant="text" onClick={clearFilters}>
                Vymazať filtre
              </Button>
            )}
          </div>

          {showFilters && (
            <div className="/* TODO: Convert mt: 2 */ /* TODO: Convert pt: 2 */ /* TODO: Convert borderTop: 1px solid #e0e0e0 */">
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6} md={4}>
                  <FormControl fullWidth>
                    <InputLabel>Firma</InputLabel>
                    <Select
                      value={companyFilter}
                      onChange={e => setCompanyFilter(e.target.value)}
                      label="Firma"
                    >
                      <MenuItem value="">Všetky firmy</MenuItem>
                      {settlementsCompanies.map((company: string) => (
                        <MenuItem key={company} value={company}>
                          {company}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={6} md={4}>
                  <FormControl fullWidth>
                    <InputLabel>Vozidlo</InputLabel>
                    <Select
                      value={vehicleFilter}
                      onChange={e => setVehicleFilter(e.target.value)}
                      label="Vozidlo"
                    >
                      <MenuItem value="">Všetky vozidlá</MenuItem>
                      {vehicles.map((vehicle: Vehicle) => (
                        <MenuItem key={vehicle.id} value={vehicle.id}>
                          {vehicle.brand} {vehicle.model} -{' '}
                          {vehicle.licensePlate}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Statistics Cards */}
      <Grid container spacing={2} className="/* TODO: Convert mb: 3 */">
        <Grid item xs={12} sm={6} md={3}>
          <Card
            className="/* TODO: Convert background: linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
          >
            <CardContent>
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
              >
                <div>
                  <Typography variant="h6" className="/* TODO: Convert fontWeight: 600 */">
                    Celkom
                  </Typography>
                  <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
                    {filteredSettlements.length}
                  </Typography>
                </div>
                <ReportIcon className="/* TODO: Convert fontSize: 40 */ /* TODO: Convert opacity: 0.8 */" />
              </div>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card
            className="/* TODO: Convert background: linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
          >
            <CardContent>
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
              >
                <div>
                  <Typography variant="h6" className="/* TODO: Convert fontWeight: 600 */">
                    Príjmy
                  </Typography>
                  <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
                    {totalIncome.toFixed(2)}€
                  </Typography>
                </div>
                <BankIcon className="/* TODO: Convert fontSize: 40 */ /* TODO: Convert opacity: 0.8 */" />
              </div>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card
            className="/* TODO: Convert background: linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
          >
            <CardContent>
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
              >
                <div>
                  <Typography variant="h6" className="/* TODO: Convert fontWeight: 600 */">
                    Náklady
                  </Typography>
                  <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
                    {totalExpenses.toFixed(2)}€
                  </Typography>
                </div>
                <EuroIcon className="/* TODO: Convert fontSize: 40 */ /* TODO: Convert opacity: 0.8 */" />
              </div>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card
            className="/* TODO: Convert background:
                totalProfit >= 0
                  ? linear-gradient(135deg */ /* TODO: Convert #fed6e3 100%)
                  : linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
          >
            <CardContent>
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
              >
                <div>
                  <Typography variant="h6" className="/* TODO: Convert fontWeight: 600 */">
                    {totalProfit >= 0 ? 'Zisk' : 'Strata'}
                  </Typography>
                  <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
                    {totalProfit.toFixed(2)}€
                  </Typography>
                </div>
                {totalProfit >= 0 ? (
                  <ProfitIcon className="/* TODO: Convert fontSize: 40 */ /* TODO: Convert opacity: 0.8 */" />
                ) : (
                  <LossIcon className="/* TODO: Convert fontSize: 40 */ /* TODO: Convert opacity: 0.8 */" />
                )}
              </div>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {loading && (
        <div className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ /* TODO: Convert my: 3 */">
          <CircularProgress />
        </div>
      )}

      {/* Mobile Layout */}
      {isMobile ? (
        <div className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-2">
          {filteredSettlements.length === 0 ? (
            <Card className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */">
              <CardContent className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */">
                <ReportIcon
                  className="/* TODO: Convert fontSize: 48 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mb: 2 */"
                />
                <Typography variant="h6" color="text.secondary">
                  Žiadne vyúčtovania nenájdené
                </Typography>
              </CardContent>
            </Card>
          ) : (
            filteredSettlements.map((settlement: Settlement, index: number) => {
              const vehicle = settlement.vehicleId
                ? vehicles.find((v: Vehicle) => v.id === settlement.vehicleId)
                : null;
              const isProfit = settlement.profit >= 0;

              return (
                <Card
                  key={settlement.id || `settlement-mobile-${index}`}
                  sx={{
                    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                    borderRadius: 2,
                    '&:hover': {
                      boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                      transform: 'translateY(-2px)',
                    },
                    transition: 'all 0.2s ease',
                  }}
                >
                  <CardContent className="p-4">
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: flex-start */ /* TODO: Convert mb: 2 */"
                    >
                      <div className="/* TODO: Convert flexGrow: 1 */ /* TODO: Convert mr: 2 */">
                        <Typography
                          variant="h6"
                          className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 0.5 */ /* TODO: Convert wordWrap: break-word */"
                        >
                          {format(
                            new Date(settlement.period.from),
                            'dd.MM.yyyy'
                          )}{' '}
                          -{' '}
                          {format(new Date(settlement.period.to), 'dd.MM.yyyy')}
                        </Typography>
                        <div
                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 1 */"
                        >
                          <Chip
                            icon={
                              isProfit ? (
                                <ProfitIcon fontSize="small" />
                              ) : (
                                <LossIcon fontSize="small" />
                              )
                            }
                            label={isProfit ? 'Zisk' : 'Strata'}
                            color={isProfit ? 'success' : 'error'}
                            size="small"
                            className="/* TODO: Convert fontWeight: 600 */"
                          />
                          <Typography
                            variant="h6"
                            className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: isProfit ? #4caf50 : #f44336 */"
                          >
                            {settlement.profit.toFixed(2)}€
                          </Typography>
                        </div>
                      </div>

                      <div className="/* TODO: Convert display: flex */ gap-1">
                        <IconButton
                          size="small"
                          onClick={() => handleViewSettlement(settlement)}
                          sx={{
                            backgroundColor: '#e3f2fd',
                            color: '#1976d2',
                            '&:hover': { backgroundColor: '#bbdefb' },
                          }}
                        >
                          <ViewIcon fontSize="small" />
                        </IconButton>
                        <IconButton
                          size="small"
                          onClick={() => handleDeleteSettlement(settlement)}
                          sx={{
                            backgroundColor: '#ffebee',
                            color: '#d32f2f',
                            '&:hover': { backgroundColor: '#ffcdd2' },
                          }}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </div>
                    </div>

                    <Divider className="/* TODO: Convert my: 1 */" />

                    <Grid container spacing={1} className="/* TODO: Convert fontSize: 0.875rem */">
                      <Grid item xs={6}>
                        <div
                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
                        >
                          <BankIcon
                            fontSize="small"
                            className="/* TODO: Convert color: text.secondary */"
                          />
                          <Typography variant="body2" color="text.secondary">
                            Príjmy: {settlement.totalIncome.toFixed(2)}€
                          </Typography>
                        </div>
                      </Grid>
                      <Grid item xs={6}>
                        <div
                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
                        >
                          <EuroIcon
                            fontSize="small"
                            className="/* TODO: Convert color: text.secondary */"
                          />
                          <Typography variant="body2" color="text.secondary">
                            Náklady: {settlement.totalExpenses.toFixed(2)}€
                          </Typography>
                        </div>
                      </Grid>
                      {settlement.company && (
                        <Grid item xs={6}>
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
                          >
                            <CompanyIcon
                              fontSize="small"
                              className="/* TODO: Convert color: text.secondary */"
                            />
                            <Typography
                              variant="body2"
                              color="text.secondary"
                              noWrap
                            >
                              {settlement.company}
                            </Typography>
                          </div>
                        </Grid>
                      )}
                      {vehicle && (
                        <Grid item xs={6}>
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
                          >
                            <VehicleIcon
                              fontSize="small"
                              className="/* TODO: Convert color: text.secondary */"
                            />
                            <Typography
                              variant="body2"
                              color="text.secondary"
                              noWrap
                            >
                              {vehicle.licensePlate}
                            </Typography>
                          </div>
                        </Grid>
                      )}
                      <Grid item xs={12}>
                        <Typography
                          variant="body2"
                          className="/* TODO: Convert color: text.secondary */ /* TODO: Convert mt: 1 */ p-2 /* TODO: Convert backgroundColor: #f5f5f5 */ rounded"
                        >
                          {settlement.rentals?.length || 0} prenájmov •{' '}
                          {settlement.expenses?.length || 0} nákladov
                        </Typography>
                      </Grid>
                    </Grid>
                  </CardContent>
                </Card>
              );
            })
          )}
        </div>
      ) : (
        /* Desktop Layout */
        <Card className="/* TODO: Convert boxShadow: 0 4px 12px rgba(0 */">
          <div
            className="/* TODO: Convert position: sticky */ /* TODO: Convert top: 0 */ /* TODO: Convert backgroundColor: white */ /* TODO: Convert zIndex: 1 */ /* TODO: Convert borderBottom: 2px solid #f0f0f0 */"
          >
            <div
              className="/* TODO: Convert display: grid */ /* TODO: Convert gridTemplateColumns: 2fr 1fr 1fr 1fr 1fr 1fr 1fr 120px */ gap-4 p-4 /* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #1976d2 */ /* TODO: Convert backgroundColor: #f8f9fa */"
            >
              <Typography
                key="obdobie"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */"
              >
                Obdobie
              </Typography>
              <Typography
                key="firma"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */"
              >
                Firma
              </Typography>
              <Typography
                key="vozidlo"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */"
              >
                Vozidlo
              </Typography>
              <Typography
                key="prijmy"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */"
              >
                Príjmy
              </Typography>
              <Typography
                key="naklady"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */"
              >
                Náklady
              </Typography>
              <Typography
                key="provizia"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */"
              >
                Provízia
              </Typography>
              <Typography
                key="zisk"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */"
              >
                Zisk
              </Typography>
              <Typography
                key="akcie"
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert textAlign: center */"
              >
                Akcie
              </Typography>
            </div>
          </div>

          <div className="/* TODO: Convert maxHeight: 600px */ /* TODO: Convert overflow: auto */">
            {filteredSettlements.length === 0 ? (
              <div className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 8 */">
                <ReportIcon
                  className="/* TODO: Convert fontSize: 48 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mb: 2 */"
                />
                <Typography variant="h6" color="text.secondary">
                  Žiadne vyúčtovania nenájdené
                </Typography>
              </div>
            ) : (
              filteredSettlements.map(
                (settlement: Settlement, index: number) => {
                  const vehicle = settlement.vehicleId
                    ? vehicles.find(
                        (v: Vehicle) => v.id === settlement.vehicleId
                      )
                    : null;
                  const isProfit = settlement.profit >= 0;

                  return (
                    <div
                      key={settlement.id || `settlement-${index}`}
                      sx={{
                        display: 'grid',
                        gridTemplateColumns:
                          '2fr 1fr 1fr 1fr 1fr 1fr 1fr 120px',
                        gap: 2,
                        p: 2,
                        borderBottom: '1px solid #e0e0e0',
                        backgroundColor: index % 2 === 0 ? '#fafafa' : 'white',
                        '&:hover': {
                          backgroundColor: '#f0f7ff',
                          cursor: 'pointer',
                        },
                        transition: 'background-color 0.2s ease',
                      }}
                    >
                      <div>
                        <Typography
                          variant="body1"
                          className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 0.5 */"
                        >
                          {format(
                            new Date(settlement.period.from),
                            'dd.MM.yyyy'
                          )}{' '}
                          -{' '}
                          {format(new Date(settlement.period.to), 'dd.MM.yyyy')}
                        </Typography>
                        <Typography
                          variant="body2"
                          className="/* TODO: Convert color: text.secondary */"
                        >
                          {settlement.rentals?.length || 0} prenájmov •{' '}
                          {settlement.expenses?.length || 0} nákladov
                        </Typography>
                      </div>

                      <Typography
                        variant="body2"
                        className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                        noWrap
                      >
                        {settlement.company || '-'}
                      </Typography>

                      <Typography
                        variant="body2"
                        className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                        noWrap
                      >
                        {vehicle
                          ? `${vehicle.brand} ${vehicle.model} - ${vehicle.licensePlate}`
                          : '-'}
                      </Typography>

                      <Typography
                        variant="body1"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #4caf50 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                      >
                        {settlement.totalIncome.toFixed(2)}€
                      </Typography>

                      <Typography
                        variant="body1"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #f44336 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                      >
                        {settlement.totalExpenses.toFixed(2)}€
                      </Typography>

                      <Typography
                        variant="body1"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #ff9800 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                      >
                        {settlement.totalCommission.toFixed(2)}€
                      </Typography>

                      <Typography
                        variant="body1"
                        className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: isProfit ? #4caf50 : #f44336 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                      >
                        {settlement.profit.toFixed(2)}€
                      </Typography>

                      <div
                        className="/* TODO: Convert display: flex */ gap-1 /* TODO: Convert justifyContent: center */"
                      >
                        <Tooltip title="Zobraziť detail">
                          <IconButton
                            size="small"
                            onClick={() => handleViewSettlement(settlement)}
                            sx={{
                              backgroundColor: '#e3f2fd',
                              color: '#1976d2',
                              '&:hover': { backgroundColor: '#bbdefb' },
                            }}
                          >
                            <ViewIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Zmazať">
                          <IconButton
                            size="small"
                            onClick={() => handleDeleteSettlement(settlement)}
                            sx={{
                              backgroundColor: '#ffebee',
                              color: '#d32f2f',
                              '&:hover': { backgroundColor: '#ffcdd2' },
                            }}
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                      </div>
                    </div>
                  );
                }
              )
            )}
          </div>
        </Card>
      )}

      {/* Create Settlement Dialog */}
      <Dialog
        open={createDialogOpen}
        onClose={() => setCreateDialogOpen(false)}
        maxWidth="sm"
        fullWidth
        fullScreen={isMobile}
      >
        <div className="p-6">
          <Typography variant="h5" className="/* TODO: Convert mb: 3 */ /* TODO: Convert fontWeight: 600 */">
            Vytvoriť vyúčtovanie
          </Typography>

          <Grid container spacing={2}>
            <Grid item xs={12}>
              <div className="/* TODO: Convert mb: 2 */">
                <Typography variant="subtitle2" className="/* TODO: Convert mb: 1 */">
                  Typ obdobia
                </Typography>
                <ToggleButtonGroup
                  value={periodType}
                  exclusive
                  onChange={(e, newType) => {
                    if (newType !== null) {
                      setPeriodType(newType);
                      // Clear values when switching
                      setPeriodFrom('');
                      setPeriodTo('');
                      setSelectedMonth('');
                    }
                  }}
                  aria-label="period type"
                  size="small"
                  fullWidth
                >
                  <ToggleButton value="month" aria-label="mesiac">
                    Mesiac
                  </ToggleButton>
                  <ToggleButton value="range" aria-label="obdobie">
                    Časové obdobie
                  </ToggleButton>
                </ToggleButtonGroup>
              </div>
            </Grid>

            {periodType === 'month' ? (
              <Grid item xs={12}>
                <TextField
                  label="Mesiac"
                  type="month"
                  value={selectedMonth}
                  onChange={e => setSelectedMonth(e.target.value)}
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                  helperText="Vyberte mesiac pre vyúčtovanie"
                />
              </Grid>
            ) : (
              <>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label="Od dátumu"
                    type="date"
                    value={periodFrom}
                    onChange={e => setPeriodFrom(e.target.value)}
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label="Do dátumu"
                    type="date"
                    value={periodTo}
                    onChange={e => setPeriodTo(e.target.value)}
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
              </>
            )}
            <Grid item xs={12}>
              <Typography variant="body2" color="text.secondary" className="/* TODO: Convert mb: 2 */">
                Vyberte firmy alebo vozidlá na vyúčtovanie. Môžete vybrať
                viacero položiek naraz.
              </Typography>
              <Autocomplete
                multiple
                fullWidth
                options={uniqueCompanies}
                value={selectedCompanies}
                onChange={(event, newValue) => {
                  setSelectedCompanies(newValue);
                }}
                getOptionLabel={option => option}
                isOptionEqualToValue={(option, value) => option === value}
                filterOptions={(options, { inputValue }) => {
                  return options.filter(option =>
                    option.toLowerCase().includes(inputValue.toLowerCase())
                  );
                }}
                renderInput={params => (
                  <TextField
                    {...params}
                    label="Firmy (voliteľné)"
                    placeholder="Začnite písať pre vyhľadávanie firiem..."
                  />
                )}
                noOptionsText="Žiadne firmy nenájdené"
                renderTags={(value, getTagProps) =>
                  value.map((option, index) => (
                    <Chip
                      variant="outlined"
                      label={option}
                      {...getTagProps({ index })}
                      key={option}
                    />
                  ))
                }
              />
            </Grid>
            <Grid item xs={12}>
              <Autocomplete
                multiple
                fullWidth
                options={vehicleOptions}
                value={
                  selectedVehicleIds
                    .map(id => vehicleOptions.find(v => v.id === id))
                    .filter(Boolean) as typeof vehicleOptions
                }
                onChange={(event, newValue) => {
                  setSelectedVehicleIds(newValue.map(v => v.id));
                }}
                getOptionLabel={option => option.label}
                isOptionEqualToValue={(option, value) => option.id === value.id}
                filterOptions={(options, { inputValue }) => {
                  return options.filter(option =>
                    option.label
                      .toLowerCase()
                      .includes(inputValue.toLowerCase())
                  );
                }}
                renderInput={params => (
                  <TextField
                    {...params}
                    label="Vozidlá (voliteľné)"
                    placeholder="Začnite písať pre vyhľadávanie vozidiel..."
                  />
                )}
                noOptionsText="Žiadne vozidlá nenájdené"
                renderTags={(value, getTagProps) =>
                  value.map((option, index) => (
                    <Chip
                      variant="outlined"
                      label={option.label}
                      {...getTagProps({ index })}
                      key={option.id}
                    />
                  ))
                }
              />
            </Grid>
          </Grid>

          <div
            className="/* TODO: Convert display: flex */ gap-4 /* TODO: Convert mt: 3 */ /* TODO: Convert justifyContent: flex-end */"
          >
            <Button
              variant="outlined"
              onClick={() => setCreateDialogOpen(false)}
              disabled={loading}
            >
              Zrušiť
            </Button>
            <Button
              variant="contained"
              onClick={handleCreateSubmit}
              disabled={loading}
            >
              {loading ? <CircularProgress size={20} /> : 'Vytvoriť'}
            </Button>
          </div>
        </div>
      </Dialog>

      {/* Settlement Detail Dialog */}
      <Dialog
        open={detailOpen}
        onClose={() => setDetailOpen(false)}
        maxWidth={false}
        fullWidth
        fullScreen={isMobile}
        sx={{
          '& .MuiDialog-paper': {
            maxWidth: isMobile ? '100%' : '95vw',
            width: isMobile ? '100%' : '95vw',
            height: isMobile ? '100%' : 'auto',
            maxHeight: isMobile ? '100%' : '90vh',
          },
        }}
      >
        {selectedSettlement && (
          <SettlementDetail
            settlement={selectedSettlement}
            onClose={() => setDetailOpen(false)}
          />
        )}
      </Dialog>
    </div>
  );
};

export default SettlementListNew;
