import {
/* Tailwind classes used for styling */
  Add as AddIcon,
  Business as CompanyIcon,
  DateRange as DateIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Euro as EuroIcon,
  FilterList as FilterListIcon,
  LocalGasStation as FuelIcon,
  Security as InsuranceIcon,
  Category as OtherIcon,
  Receipt as ReceiptIcon,
  Repeat as RepeatIcon,
  Search as SearchIcon,
  Build as ServiceIcon,
  Settings as SettingsIcon,
  DirectionsCar as VehicleIcon,
} from '@mui/icons-material';
import { Button,
  Card,
  CardContent,
  Chip,
  CircularProgress,
  Dialog,
  Divider,
  FormControl,
  Grid,
  IconButton,
  InputLabel,
  MenuItem,
  Select,
  TextField,
  Tooltip,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import { format } from 'date-fns';
import { saveAs } from 'file-saver';
import * as Papa from 'papaparse';
import React, { useEffect, useMemo, useState } from 'react';

// import { useApp } from '../../context/AppContext'; // ‚ùå REMOVED - migrated to React Query
import {
  useCreateExpense,
  useDeleteExpense,
  useExpenses,
  useUpdateExpense,
} from '@/lib/react-query/hooks/useExpenses';
import { useVehicles } from '@/lib/react-query/hooks/useVehicles';
import { apiService } from '../../services/api';
import type { Expense, ExpenseCategory, Vehicle } from '../../types';
import { textContains } from '../../utils/textNormalization';

import ExpenseCategoryManager from './ExpenseCategoryManager';
import ExpenseForm from './ExpenseForm';
import RecurringExpenseManager from './RecurringExpenseManager';

// Helper funkcie pre dynamick√© kateg√≥rie
const getCategoryIcon = (
  categoryName: string,
  categories: ExpenseCategory[]
) => {
  const category = categories.find(c => c.name === categoryName);
  if (!category) return <ReceiptIcon fontSize="small" />;

  // Mapovanie ikon na Material UI komponenty
  const iconMap: Record<string, React.ReactElement> = {
    local_gas_station: <FuelIcon fontSize="small" />,
    build: <ServiceIcon fontSize="small" />,
    security: <InsuranceIcon fontSize="small" />,
    category: <OtherIcon fontSize="small" />,
    receipt: <ReceiptIcon fontSize="small" />,
  };

  return iconMap[category.icon] || <ReceiptIcon fontSize="small" />;
};

const getCategoryText = (
  categoryName: string,
  categories: ExpenseCategory[]
) => {
  const category = categories.find(c => c.name === categoryName);
  return category?.displayName || categoryName;
};

const getCategoryColor = (
  categoryName: string,
  categories: ExpenseCategory[]
): 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info' => {
  const category = categories.find(c => c.name === categoryName);
  return category?.color || 'primary';
};

const ExpenseListNew: React.FC = () => {
  // ‚úÖ MIGRATED: React Query hooks instead of AppContext
  const { data: expenses = [] } = useExpenses();
  const { data: vehiclesData = [] } = useVehicles();
  const createExpenseMutation = useCreateExpense();
  const updateExpenseMutation = useUpdateExpense();
  const deleteExpenseMutation = useDeleteExpense();

  // Helper functions for compatibility
  const getFilteredExpenses = () => expenses; // Simple implementation for now
  const getFilteredVehicles = () => vehiclesData; // Simple implementation for now
  const createExpense = async (expense: Expense) => {
    return createExpenseMutation.mutateAsync(expense);
  };
  const updateExpense = async (expense: Expense) => {
    return updateExpenseMutation.mutateAsync(expense);
  };
  const deleteExpense = async (id: string) => {
    return deleteExpenseMutation.mutateAsync(id);
  };
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'), { noSsr: true });

  // Get data from React Query hooks
  const filteredExpenses = getFilteredExpenses();
  const vehicles = getFilteredVehicles();

  // States
  const [searchQuery, setSearchQuery] = useState('');
  const [categoryFilter, setCategoryFilter] = useState<string | 'all'>('all');
  const [companyFilter, setCompanyFilter] = useState('');
  const [vehicleFilter, setVehicleFilter] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [formOpen, setFormOpen] = useState(false);
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null);
  const [loading, setLoading] = useState(false);
  const [categoriesManagerOpen, setCategoriesManagerOpen] = useState(false);
  const [recurringManagerOpen, setRecurringManagerOpen] = useState(false);

  // Dynamick√© kateg√≥rie
  const [expenseCategories, setExpenseCategories] = useState<ExpenseCategory[]>(
    []
  );

  // Get unique values for filters
  const uniqueCompanies = useMemo(
    () =>
      Array.from(
        new Set(filteredExpenses.map((e: Expense) => e.company).filter(Boolean))
      ).sort(),
    [filteredExpenses]
  );

  // Naƒç√≠tanie kateg√≥ri√≠ z API
  const loadCategories = async () => {
    try {
      const categories = await apiService.getExpenseCategories();
      setExpenseCategories(categories);
    } catch (error) {
      console.error('Error loading expense categories:', error);
    }
  };

  useEffect(() => {
    loadCategories();
  }, []);

  // Filtered expenses
  const finalFilteredExpenses = useMemo(() => {
    return filteredExpenses.filter((expense: Expense) => {
      const matchesSearch =
        !searchQuery ||
        textContains(expense.description, searchQuery) ||
        textContains(expense.note, searchQuery) ||
        textContains(expense.company, searchQuery);

      const matchesCategory =
        categoryFilter === 'all' || expense.category === categoryFilter;
      const matchesCompany =
        !companyFilter || expense.company === companyFilter;
      const matchesVehicle =
        !vehicleFilter || expense.vehicleId === vehicleFilter;

      return (
        matchesSearch && matchesCategory && matchesCompany && matchesVehicle
      );
    });
  }, [
    filteredExpenses,
    searchQuery,
    categoryFilter,
    companyFilter,
    vehicleFilter,
  ]);

  // Calculate totals
  const totalAmount = useMemo(
    () =>
      finalFilteredExpenses.reduce(
        (sum: number, expense: Expense) => sum + expense.amount,
        0
      ),
    [finalFilteredExpenses]
  );

  const categoryTotals = useMemo(() => {
    const totals: Record<string, number> = {};

    // Inicializuj v≈°etky kateg√≥rie na 0
    expenseCategories.forEach(category => {
      totals[category.name] = 0;
    });

    // Spoƒç√≠taj sumy pre ka≈æd√∫ kateg√≥riu
    finalFilteredExpenses.forEach((expense: Expense) => {
      if (totals[expense.category] !== undefined) {
        totals[expense.category] += expense.amount;
      }
    });

    return totals;
  }, [finalFilteredExpenses, expenseCategories]);

  // Handlers
  const handleAddExpense = () => {
    setEditingExpense(null);
    setFormOpen(true);
  };

  const handleEditExpense = (expense: Expense) => {
    setEditingExpense(expense);
    setFormOpen(true);
  };

  const handleDeleteExpense = async (expense: Expense) => {
    if (
      window.confirm(`Naozaj chcete zmaza≈• n√°klad "${expense.description}"?`)
    ) {
      setLoading(true);
      try {
        await deleteExpense(expense.id);
      } catch (error) {
        console.error('Error deleting expense:', error);
      } finally {
        setLoading(false);
      }
    }
  };

  const handleFormSubmit = async (expenseData: Partial<Expense>) => {
    setLoading(true);
    try {
      if (editingExpense && expenseData.id) {
        await updateExpense({ ...editingExpense, ...expenseData } as Expense);
      } else {
        await createExpense(expenseData as Expense);
      }
      setFormOpen(false);
      setEditingExpense(null);
    } catch (error) {
      console.error('Error saving expense:', error);
    } finally {
      setLoading(false);
    }
  };

  // CSV funkcionalita
  const handleExportCSV = async () => {
    try {
      const { apiService } = await import('../../services/api');
      const blob = await apiService.exportExpensesCSV();
      const filename = `naklady-${new Date().toISOString().split('T')[0]}.csv`;
      saveAs(blob, filename);

      alert('CSV export √∫spe≈°n√Ω');
    } catch (error) {
      console.error('CSV export error:', error);
      alert('Chyba pri CSV exporte');
    }
  };

  const handleImportCSV = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    Papa.parse(file, {
      complete: async (results: {
        data: unknown[][];
        errors: unknown[];
        meta: unknown;
      }) => {
        try {
          console.log('üì• Parsing CSV file for batch expense import...');

          if (!results.data || results.data.length < 2) {
            alert('CSV s√∫bor mus√≠ obsahova≈• aspo≈à hlaviƒçku a jeden riadok d√°t');
            return;
          }

          // Z√≠skaj hlaviƒçku pre inteligentn√© mapovanie
          const headers = results.data[0] as string[];
          const dataRows = results.data.slice(1) as unknown[][];
          const batchExpenses = [];

          console.log('üìã CSV Headers:', headers);
          console.log(`üì¶ Processing ${dataRows.length} expense rows...`);

          // Inteligentn√© mapovanie stƒ∫pcov
          const getColumnIndex = (possibleNames: string[]) => {
            for (const name of possibleNames) {
              const index = headers.findIndex(
                (h: string) =>
                  h && h.toString().toLowerCase().trim() === name.toLowerCase()
              );
              if (index !== -1) return index;
            }
            return -1;
          };

          const columnMap = {
            id: getColumnIndex(['id', 'ID']),
            description: getColumnIndex([
              'description',
              'popis',
              'Description',
              'Popis',
            ]),
            amount: getColumnIndex([
              'amount',
              'suma',
              'Amount',
              'Suma',
              'cena',
              'Cena',
            ]),
            date: getColumnIndex(['date', 'datum', 'Date', 'D√°tum']),
            category: getColumnIndex([
              'category',
              'kategoria',
              'Category',
              'Kateg√≥ria',
            ]),
            company: getColumnIndex(['company', 'firma', 'Company', 'Firma']),
            vehicleId: getColumnIndex([
              'vehicleId',
              'vehicle_id',
              'vozidlo_id',
            ]),
            vehicleLicensePlate: getColumnIndex([
              'vehicleLicensePlate',
              'spz',
              'SPZ',
              'license_plate',
            ]),
            note: getColumnIndex(['note', 'poznamka', 'Note', 'Pozn√°mka']),
          };

          console.log('üó∫Ô∏è Column mapping:', columnMap);

          for (let i = 0; i < dataRows.length; i++) {
            const row = dataRows[i];

            // Preskoƒç√≠me pr√°zdne riadky
            if (
              !row ||
              row.length === 0 ||
              !row.some((cell: unknown) => cell && cell.toString().trim())
            ) {
              continue;
            }

            // Mapovanie pol√≠ pomocou inteligentn√©ho mapovania
            const description =
              columnMap.description >= 0
                ? row[columnMap.description]
                : undefined;
            const amount =
              columnMap.amount >= 0 ? row[columnMap.amount] : undefined;
            const date = columnMap.date >= 0 ? row[columnMap.date] : undefined;
            const category =
              columnMap.category >= 0 ? row[columnMap.category] : undefined;
            const company =
              columnMap.company >= 0 ? row[columnMap.company] : undefined;
            const vehicleId =
              columnMap.vehicleId >= 0 ? row[columnMap.vehicleId] : undefined;
            const note = columnMap.note >= 0 ? row[columnMap.note] : undefined;

            // Kontrola povinn√Ωch pol√≠
            if (!description || description.toString().trim() === '') {
              console.warn(`Riadok ${i + 2}: Preskakujem - ch√Ωba popis`);
              continue;
            }

            // Parsuj sumu
            let parsedAmount = 0;
            if (amount && amount.toString().trim() !== '') {
              parsedAmount = parseFloat(amount.toString().replace(',', '.'));
              if (isNaN(parsedAmount)) {
                console.warn(
                  `Riadok ${i + 2}: Neplatn√° suma "${amount}", nastavujem na 0`
                );
                parsedAmount = 0;
              }
            }

            // Parsuj d√°tum
            let parsedDate = new Date();
            if (date && date.toString().trim()) {
              const dateStr = date.toString().trim();

              // Form√°t MM/YYYY sa zmen√≠ na 01.MM.YYYY
              if (/^\d{1,2}\/\d{4}$/.test(dateStr)) {
                const [month, year] = dateStr.split('/');
                parsedDate = new Date(parseInt(year), parseInt(month) - 1, 1);
              } else {
                // ≈†tandardn√© parsovanie d√°tumu
                const tempDate = new Date(dateStr);
                if (!isNaN(tempDate.getTime())) {
                  parsedDate = tempDate;
                }
              }
            }

            // Mapovanie kateg√≥ri√≠
            let mappedCategory = 'other';
            if (category && category.toString().trim()) {
              const categoryStr = category.toString().toLowerCase().trim();
              const categoryMap: { [key: string]: string } = {
                fuel: 'fuel',
                palivo: 'fuel',
                benz√≠n: 'fuel',
                nafta: 'fuel',
                service: 'service',
                servis: 'service',
                oprava: 'service',
                √∫dr≈æba: 'service',
                insurance: 'insurance',
                poistenie: 'insurance',
                other: 'other',
                ostatn√©: 'other',
                in√©: 'other',
              };
              mappedCategory = categoryMap[categoryStr] || 'other';
            }

            // Vytvor expense objekt
            const expenseData = {
              description: description.toString().trim(),
              amount: parsedAmount,
              date: parsedDate,
              category: mappedCategory,
              vehicleId:
                vehicleId && vehicleId.toString().trim() !== ''
                  ? vehicleId.toString().trim()
                  : undefined,
              company:
                company && company.toString().trim() !== ''
                  ? company.toString().trim()
                  : 'Black Holding',
              note:
                note && note.toString().trim() !== ''
                  ? note.toString().trim()
                  : undefined,
            };

            console.log(
              `üí∞ Expense ${i + 2}: ${expenseData.description} - ${expenseData.amount}‚Ç¨ - Company: "${expenseData.company}"`
            );

            batchExpenses.push(expenseData);
          }

          console.log(
            `üì¶ Pripraven√Ωch ${batchExpenses.length} n√°kladov pre batch import`
          );

          // Pou≈æij batch import namiesto CSV importu
          const result = await apiService.batchImportExpenses(batchExpenses);

          console.log('üì• CSV Import result:', result);

          // Result u≈æ obsahuje priamo d√°ta, nie je wrapped v success/data
          const {
            created,
            updated,
            errorsCount,
            successRate,
            processed,
            total,
          } = result;

          if (created > 0 || updated > 0) {
            alert(
              `üöÄ BATCH IMPORT √öSPE≈†N√ù!\n\nüìä V√Ωsledky:\n‚Ä¢ Vytvoren√Ωch: ${created}\n‚Ä¢ Aktualizovan√Ωch: ${updated}\n‚Ä¢ Spracovan√Ωch: ${processed}/${total}\n‚Ä¢ Ch√Ωb: ${errorsCount}\n‚Ä¢ √öspe≈°nos≈•: ${successRate}\n\nStr√°nka sa obnov√≠ za 3 sekundy...`
            );
            setTimeout(() => window.location.reload(), 3000);
          } else if (errorsCount > 0) {
            alert(
              `‚ö†Ô∏è Import dokonƒçen√Ω, ale ≈æiadne n√°klady neboli pridan√©.\n\nüìä V√Ωsledky:\n‚Ä¢ Vytvoren√Ωch: ${created}\n‚Ä¢ Aktualizovan√Ωch: ${updated}\n‚Ä¢ Ch√Ωb: ${errorsCount}\n‚Ä¢ √öspe≈°nos≈•: ${successRate}\n\nSkontrolujte form√°t CSV s√∫boru.`
            );
          } else {
            alert(
              `‚ö†Ô∏è Import dokonƒçen√Ω, ale ≈æiadne n√°klady neboli pridan√©.\nSkontrolujte form√°t CSV s√∫boru.`
            );
          }
        } catch (error) {
          console.error('‚ùå CSV import error:', error);
          // ‚úÖ ZLEP≈†EN√â ERROR HANDLING - menej dramatick√©
          alert(
            `‚ö†Ô∏è Import dokonƒçen√Ω s upozornen√≠m: ${error instanceof Error ? error.message : 'Sie≈•ov√° chyba'}\n\nSkontrolujte v√Ωsledok po obnoven√≠ str√°nky.`
          );
          // Aj tak sk√∫s refresh - mo≈æno sa import dokonƒçil
          setTimeout(() => window.location.reload(), 2000);
        }
      },
      header: false,
      skipEmptyLines: true,
    });

    // Reset input
    event.target.value = '';
  };

  const clearFilters = () => {
    setSearchQuery('');
    setCategoryFilter('all');
    setCompanyFilter('');
    setVehicleFilter('');
  };

  return (
    <div sx={{ p: { xs: 1, md: 3 } }}>
      {/* Header */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */">
        <CardContent>
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ /* TODO: Convert flexWrap: wrap */ gap-4"
          >
            <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
              <ReceiptIcon className="/* TODO: Convert color: #1976d2 */ /* TODO: Convert fontSize: 28 */" />
              <Typography
                variant="h4"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #1976d2 */"
              >
                N√°klady
              </Typography>
            </div>
            <div className="/* TODO: Convert display: flex */ gap-2 /* TODO: Convert flexWrap: wrap */">
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleAddExpense}
                className="/* TODO: Convert minWidth: 120 */"
              >
                Prida≈•
              </Button>
              <Button
                variant="outlined"
                startIcon={<RepeatIcon />}
                onClick={() => setRecurringManagerOpen(true)}
                sx={{
                  borderColor: '#4caf50',
                  color: '#4caf50',
                  '&:hover': {
                    borderColor: '#388e3c',
                    bgcolor: 'rgba(76, 175, 80, 0.04)',
                  },
                }}
              >
                Pravideln√© n√°klady
              </Button>
              <Button
                variant="outlined"
                startIcon={<SettingsIcon />}
                onClick={() => setCategoriesManagerOpen(true)}
                sx={{
                  borderColor: '#1976d2',
                  color: '#1976d2',
                  '&:hover': {
                    borderColor: '#1565c0',
                    bgcolor: 'rgba(25, 118, 210, 0.04)',
                  },
                }}
              >
                Spravova≈• kateg√≥rie
              </Button>
              {/* CSV tlaƒçidl√° - len na desktope */}
              {!isMobile && (
                <>
                  <Button
                    variant="outlined"
                    onClick={handleExportCSV}
                    disabled={finalFilteredExpenses.length === 0}
                  >
                    üìä Export CSV
                  </Button>

                  <Button
                    variant="outlined"
                    component="label"
                    sx={{
                      borderColor: '#1976d2',
                      color: '#1976d2',
                      '&:hover': {
                        borderColor: '#1565c0',
                        bgcolor: 'rgba(25, 118, 210, 0.04)',
                      },
                    }}
                  >
                    üì• Import CSV
                    <input
                      type="file"
                      accept=".csv"
                      onChange={handleImportCSV}
                      style={{ display: 'none' }}
                    />
                  </Button>
                </>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Search and Filters */}
      <Card className="/* TODO: Convert mb: 3 */ /* TODO: Convert boxShadow: 0 2px 8px rgba(0 */">
        <CardContent>
          <div
            className="/* TODO: Convert display: flex */ gap-4 /* TODO: Convert alignItems: center */ /* TODO: Convert flexWrap: wrap */"
          >
            <TextField
              placeholder="Hƒæada≈• n√°klady..."
              value={searchQuery}
              onChange={e => setSearchQuery(e.target.value)}
              InputProps={{
                startAdornment: (
                  <SearchIcon className="/* TODO: Convert color: text.secondary */ /* TODO: Convert mr: 1 */" />
                ),
              }}
              className="/* TODO: Convert minWidth: 250 */ /* TODO: Convert flexGrow: 1 */"
            />

            <Button
              variant={showFilters ? 'contained' : 'outlined'}
              startIcon={<FilterListIcon />}
              onClick={() => setShowFilters(!showFilters)}
            >
              Filtre
            </Button>

            {(categoryFilter !== 'all' || companyFilter || vehicleFilter) && (
              <Button variant="text" onClick={clearFilters}>
                Vymaza≈• filtre
              </Button>
            )}
          </div>

          {showFilters && (
            <div className="/* TODO: Convert mt: 2 */ /* TODO: Convert pt: 2 */ /* TODO: Convert borderTop: 1px solid #e0e0e0 */">
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6} md={3}>
                  <FormControl fullWidth>
                    <InputLabel>Kateg√≥ria</InputLabel>
                    <Select
                      value={categoryFilter}
                      onChange={e => setCategoryFilter(e.target.value)}
                      label="Kateg√≥ria"
                    >
                      <MenuItem value="all">V≈°etky kateg√≥rie</MenuItem>
                      {expenseCategories.map(category => (
                        <MenuItem key={category.name} value={category.name}>
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                          >
                            {getCategoryIcon(category.name, expenseCategories)}
                            {getCategoryText(category.name, expenseCategories)}
                          </div>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={6} md={3}>
                  <FormControl fullWidth>
                    <InputLabel>Firma</InputLabel>
                    <Select
                      value={companyFilter}
                      onChange={e => setCompanyFilter(e.target.value)}
                      label="Firma"
                    >
                      <MenuItem value="">V≈°etky firmy</MenuItem>
                      {uniqueCompanies.map((company: string) => (
                        <MenuItem key={company} value={company}>
                          {company}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={6} md={3}>
                  <FormControl fullWidth>
                    <InputLabel>Vozidlo</InputLabel>
                    <Select
                      value={vehicleFilter}
                      onChange={e => setVehicleFilter(e.target.value)}
                      label="Vozidlo"
                    >
                      <MenuItem value="">V≈°etky vozidl√°</MenuItem>
                      {vehicles.map((vehicle: Vehicle) => (
                        <MenuItem key={vehicle.id} value={vehicle.id}>
                          {vehicle.brand} {vehicle.model} -{' '}
                          {vehicle.licensePlate}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Statistics Cards */}
      <Grid container spacing={2} className="/* TODO: Convert mb: 3 */">
        <Grid item xs={12} sm={6} md={3}>
          <Card
            className="/* TODO: Convert background: linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
          >
            <CardContent>
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
              >
                <div>
                  <Typography variant="h6" className="/* TODO: Convert fontWeight: 600 */">
                    Celkom
                  </Typography>
                  <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
                    {finalFilteredExpenses.length}
                  </Typography>
                </div>
                <ReceiptIcon className="/* TODO: Convert fontSize: 40 */ /* TODO: Convert opacity: 0.8 */" />
              </div>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card
            className="/* TODO: Convert background: linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
          >
            <CardContent>
              <div
                className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
              >
                <div>
                  <Typography variant="h6" className="/* TODO: Convert fontWeight: 600 */">
                    Suma
                  </Typography>
                  <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
                    {totalAmount.toFixed(2)}‚Ç¨
                  </Typography>
                </div>
                <EuroIcon className="/* TODO: Convert fontSize: 40 */ /* TODO: Convert opacity: 0.8 */" />
              </div>
            </CardContent>
          </Card>
        </Grid>

        {/* Dynamick√© karty pre top 2 kateg√≥rie */}
        {expenseCategories.slice(0, 2).map((category, index) => (
          <Grid item xs={12} sm={6} md={3} key={category.name}>
            <Card
              className="/* TODO: Convert background:
                  index === 0
                    ? linear-gradient(135deg */ /* TODO: Convert #00f2fe 100%)
                    : linear-gradient(135deg */ /* TODO: Convert color: white */ /* TODO: Convert boxShadow: 0 4px 12px rgba(0 */"
            >
              <CardContent>
                <div
                  className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */"
                >
                  <div>
                    <Typography variant="h6" className="/* TODO: Convert fontWeight: 600 */">
                      {category.displayName}
                    </Typography>
                    <Typography variant="h4" className="/* TODO: Convert fontWeight: 700 */">
                      {(categoryTotals[category.name] || 0).toFixed(2)}‚Ç¨
                    </Typography>
                  </div>
                  {getCategoryIcon(category.name, expenseCategories)}
                </div>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {loading && (
        <div className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ /* TODO: Convert my: 3 */">
          <CircularProgress />
        </div>
      )}

      {/* Mobile Layout */}
      {isMobile ? (
        <div className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-2">
          {finalFilteredExpenses.length === 0 ? (
            <Card className="/* TODO: Convert boxShadow: 0 2px 8px rgba(0 */">
              <CardContent className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */">
                <ReceiptIcon
                  className="/* TODO: Convert fontSize: 48 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mb: 2 */"
                />
                <Typography variant="h6" color="text.secondary">
                  ≈Ωiadne n√°klady nen√°jden√©
                </Typography>
              </CardContent>
            </Card>
          ) : (
            finalFilteredExpenses.map((expense: Expense) => {
              const vehicle = expense.vehicleId
                ? vehicles.find((v: Vehicle) => v.id === expense.vehicleId)
                : null;

              return (
                <Card
                  key={expense.id}
                  sx={{
                    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                    borderRadius: 2,
                    '&:hover': {
                      boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
                      transform: 'translateY(-2px)',
                    },
                    transition: 'all 0.2s ease',
                  }}
                >
                  <CardContent className="p-4">
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: flex-start */ /* TODO: Convert mb: 2 */"
                    >
                      <div className="/* TODO: Convert flexGrow: 1 */ /* TODO: Convert mr: 2 */">
                        <Typography
                          variant="h6"
                          className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 0.5 */ /* TODO: Convert wordWrap: break-word */"
                        >
                          {expense.description}
                        </Typography>
                        <div
                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 1 */"
                        >
                          <Chip
                            icon={getCategoryIcon(
                              expense.category,
                              expenseCategories
                            )}
                            label={getCategoryText(
                              expense.category,
                              expenseCategories
                            )}
                            color={getCategoryColor(
                              expense.category,
                              expenseCategories
                            )}
                            size="small"
                            className="/* TODO: Convert fontWeight: 600 */"
                          />
                          <Typography
                            variant="h6"
                            className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #1976d2 */"
                          >
                            {expense.amount.toFixed(2)}‚Ç¨
                          </Typography>
                        </div>
                      </div>

                      <div className="/* TODO: Convert display: flex */ gap-1">
                        <IconButton
                          size="small"
                          onClick={() => handleEditExpense(expense)}
                          sx={{
                            backgroundColor: '#f5f5f5',
                            '&:hover': { backgroundColor: '#e0e0e0' },
                          }}
                        >
                          <EditIcon fontSize="small" />
                        </IconButton>
                        <IconButton
                          size="small"
                          onClick={() => handleDeleteExpense(expense)}
                          sx={{
                            backgroundColor: '#ffebee',
                            color: '#d32f2f',
                            '&:hover': { backgroundColor: '#ffcdd2' },
                          }}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </div>
                    </div>

                    <Divider className="/* TODO: Convert my: 1 */" />

                    <Grid container spacing={1} className="/* TODO: Convert fontSize: 0.875rem */">
                      <Grid item xs={6}>
                        <div
                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
                        >
                          <DateIcon
                            fontSize="small"
                            className="/* TODO: Convert color: text.secondary */"
                          />
                          <Typography variant="body2" color="text.secondary">
                            {format(new Date(expense.date), 'dd.MM.yyyy')}
                          </Typography>
                        </div>
                      </Grid>
                      <Grid item xs={6}>
                        <div
                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
                        >
                          <CompanyIcon
                            fontSize="small"
                            className="/* TODO: Convert color: text.secondary */"
                          />
                          <Typography
                            variant="body2"
                            color="text.secondary"
                            noWrap
                          >
                            {expense.company}
                          </Typography>
                        </div>
                      </Grid>
                      {vehicle && (
                        <Grid item xs={12}>
                          <div
                            className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
                          >
                            <VehicleIcon
                              fontSize="small"
                              className="/* TODO: Convert color: text.secondary */"
                            />
                            <Typography variant="body2" color="text.secondary">
                              {vehicle.brand} {vehicle.model} -{' '}
                              {vehicle.licensePlate}
                            </Typography>
                          </div>
                        </Grid>
                      )}
                      {expense.note && (
                        <Grid item xs={12}>
                          <Typography
                            variant="body2"
                            className="/* TODO: Convert fontStyle: italic */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mt: 1 */ p-2 /* TODO: Convert backgroundColor: #f5f5f5 */ rounded"
                          >
                            {expense.note}
                          </Typography>
                        </Grid>
                      )}
                    </Grid>
                  </CardContent>
                </Card>
              );
            })
          )}
        </div>
      ) : (
        /* Desktop Layout */
        <Card className="/* TODO: Convert boxShadow: 0 4px 12px rgba(0 */">
          <div
            className="/* TODO: Convert position: sticky */ /* TODO: Convert top: 0 */ /* TODO: Convert backgroundColor: white */ /* TODO: Convert zIndex: 1 */ /* TODO: Convert borderBottom: 2px solid #f0f0f0 */"
          >
            <div
              className="/* TODO: Convert display: grid */ /* TODO: Convert gridTemplateColumns: 2fr 1fr 1fr 1fr 1fr 1fr 120px */ gap-4 p-4 /* TODO: Convert fontWeight: 600 */ /* TODO: Convert color: #1976d2 */ /* TODO: Convert backgroundColor: #f8f9fa */"
            >
              <Typography variant="subtitle1" className="/* TODO: Convert fontWeight: 700 */">
                Popis
              </Typography>
              <Typography variant="subtitle1" className="/* TODO: Convert fontWeight: 700 */">
                Kateg√≥ria
              </Typography>
              <Typography variant="subtitle1" className="/* TODO: Convert fontWeight: 700 */">
                Suma
              </Typography>
              <Typography variant="subtitle1" className="/* TODO: Convert fontWeight: 700 */">
                D√°tum
              </Typography>
              <Typography variant="subtitle1" className="/* TODO: Convert fontWeight: 700 */">
                Firma
              </Typography>
              <Typography variant="subtitle1" className="/* TODO: Convert fontWeight: 700 */">
                Vozidlo
              </Typography>
              <Typography
                variant="subtitle1"
                className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert textAlign: center */"
              >
                Akcie
              </Typography>
            </div>
          </div>

          <div className="/* TODO: Convert maxHeight: 600px */ /* TODO: Convert overflow: auto */">
            {finalFilteredExpenses.length === 0 ? (
              <div className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 8 */">
                <ReceiptIcon
                  className="/* TODO: Convert fontSize: 48 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mb: 2 */"
                />
                <Typography variant="h6" color="text.secondary">
                  ≈Ωiadne n√°klady nen√°jden√©
                </Typography>
              </div>
            ) : (
              finalFilteredExpenses.map((expense: Expense, index: number) => {
                const vehicle = expense.vehicleId
                  ? vehicles.find((v: Vehicle) => v.id === expense.vehicleId)
                  : null;

                return (
                  <div
                    key={expense.id}
                    sx={{
                      display: 'grid',
                      gridTemplateColumns: '2fr 1fr 1fr 1fr 1fr 1fr 120px',
                      gap: 2,
                      p: 2,
                      borderBottom: '1px solid #e0e0e0',
                      backgroundColor: index % 2 === 0 ? '#fafafa' : 'white',
                      '&:hover': {
                        backgroundColor: '#f0f7ff',
                        cursor: 'pointer',
                      },
                      transition: 'background-color 0.2s ease',
                    }}
                  >
                    <div>
                      <Typography
                        variant="body1"
                        className="/* TODO: Convert fontWeight: 600 */ /* TODO: Convert mb: 0.5 */"
                      >
                        {expense.description}
                      </Typography>
                      {expense.note && (
                        <Typography
                          variant="body2"
                          className="/* TODO: Convert color: text.secondary */ /* TODO: Convert fontStyle: italic */"
                        >
                          {expense.note}
                        </Typography>
                      )}
                    </div>

                    <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */">
                      <Chip
                        icon={getCategoryIcon(
                          expense.category,
                          expenseCategories
                        )}
                        label={getCategoryText(
                          expense.category,
                          expenseCategories
                        )}
                        color={getCategoryColor(
                          expense.category,
                          expenseCategories
                        )}
                        size="small"
                        className="/* TODO: Convert fontWeight: 600 */"
                      />
                    </div>

                    <Typography
                      variant="body1"
                      className="/* TODO: Convert fontWeight: 700 */ /* TODO: Convert color: #1976d2 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                    >
                      {expense.amount.toFixed(2)}‚Ç¨
                    </Typography>

                    <Typography
                      variant="body2"
                      className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                    >
                      {format(new Date(expense.date), 'dd.MM.yyyy')}
                    </Typography>

                    <Typography
                      variant="body2"
                      className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                      noWrap
                    >
                      {expense.company}
                    </Typography>

                    <Typography
                      variant="body2"
                      className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */"
                      noWrap
                    >
                      {vehicle
                        ? `${vehicle.brand} ${vehicle.model} - ${vehicle.licensePlate}`
                        : '-'}
                    </Typography>

                    <div
                      className="/* TODO: Convert display: flex */ gap-1 /* TODO: Convert justifyContent: center */"
                    >
                      <Tooltip title="Upravi≈•">
                        <IconButton
                          size="small"
                          onClick={() => handleEditExpense(expense)}
                          sx={{
                            backgroundColor: '#f5f5f5',
                            '&:hover': { backgroundColor: '#e0e0e0' },
                          }}
                        >
                          <EditIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Zmaza≈•">
                        <IconButton
                          size="small"
                          onClick={() => handleDeleteExpense(expense)}
                          sx={{
                            backgroundColor: '#ffebee',
                            color: '#d32f2f',
                            '&:hover': { backgroundColor: '#ffcdd2' },
                          }}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    </div>
                  </div>
                );
              })
            )}
          </div>
        </Card>
      )}

      {/* Form Dialog */}
      <Dialog
        open={formOpen}
        onClose={() => setFormOpen(false)}
        maxWidth="md"
        fullWidth
        fullScreen={isMobile}
      >
        <ExpenseForm
          expense={editingExpense}
          onSave={handleFormSubmit}
          onCancel={() => setFormOpen(false)}
          categories={expenseCategories}
        />
      </Dialog>

      {/* Categories Manager Dialog */}
      <ExpenseCategoryManager
        open={categoriesManagerOpen}
        onClose={() => setCategoriesManagerOpen(false)}
        onCategoriesChanged={loadCategories}
      />

      {/* Recurring Expenses Manager Dialog */}
      <RecurringExpenseManager
        open={recurringManagerOpen}
        onClose={() => setRecurringManagerOpen(false)}
        onExpensesChanged={() => {
          // Refresh expenses list when recurring expenses are generated
          window.location.reload();
        }}
      />
    </div>
  );
};

export default ExpenseListNew;
