import {
/* Tailwind classes used for styling */
  AccountCircle as AccountIcon,
  LockOutlined as LockIcon,
} from '@mui/icons-material';
import { Avatar, Checkbox,
  Container,
  Divider,
  FormControlLabel,
  Paper,
  TextField,
  Typography, } from '@mui/material';
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { useAuth } from '../../context/AuthContext';
import { useAuthError } from '../../hooks/useEnhancedError';
import type { LoginCredentials } from '../../types';
import { EnhancedErrorToast } from '../common/EnhancedErrorToast';
import { DefaultCard, PrimaryButton, SecondaryButton, StatusChip } from '../ui';

interface LoginFormProps {
  onLoginSuccess?: () => void;
}

export default function LoginForm({ onLoginSuccess }: LoginFormProps) {
  const { login, state } = useAuth();
  const navigate = useNavigate();
  const [credentials, setCredentials] = useState<LoginCredentials>({
    username: '',
    password: '',
  });
  const [rememberMe, setRememberMe] = useState(true); // defaultne zapnut√©
  const { error, showError, clearError, executeWithErrorHandling } =
    useAuthError();
  const [showDemo, setShowDemo] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setCredentials(prev => ({ ...prev, [name]: value }));
    if (error) clearError();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    clearError();

    if (!credentials.username || !credentials.password) {
      showError('Pros√≠m zadajte pou≈æ√≠vateƒæsk√© meno a heslo', {
        action: 'login',
        entity: 'credentials',
      });
      return;
    }

    const success = await executeWithErrorHandling(
      async () => {
        const result = await login(credentials, rememberMe);
        if (!result) {
          throw new Error('Nespr√°vne pou≈æ√≠vateƒæsk√© meno alebo heslo');
        }
        return result;
      },
      { action: 'login', entity: 'user' }
    );

    if (success) {
      onLoginSuccess?.();
      // üöÄ DIRECT navigation to /rentals to bypass root redirect timing issue
      setTimeout(() => {
        navigate('/rentals');
      }, 100);
    }
  };

  const demoAccounts = [
    {
      username: 'admin',
      label: 'Admin',
      role: 'Administr√°tor',
      desc: 'V≈°etky pr√°va',
      password: 'admin123',
    },
    {
      username: 'employee',
      label: 'Zamestnanec',
      role: 'Zamestnanec',
      desc: 'Obmedzen√© pr√°va',
      password: 'employee123',
    },
    {
      username: 'company1',
      label: 'Firma',
      role: 'Firma',
      desc: 'Iba vlastn√© d√°ta',
      password: 'company123',
    },
  ];

  const handleDemoLogin = async (username: string) => {
    const account = demoAccounts.find(acc => acc.username === username);
    if (account) {
      const success = await login(
        { username, password: account.password },
        rememberMe
      );
      if (success) {
        onLoginSuccess?.();
        // üöÄ DIRECT navigation to /rentals to bypass root redirect timing issue
        setTimeout(() => {
          navigate('/rentals');
        }, 100);
      }
    }
  };

  return (
    <Container component="main" maxWidth="sm">
      <div
        className="/* TODO: Convert marginTop: 8 */ /* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ /* TODO: Convert alignItems: center */ /* TODO: Convert minHeight: 100vh */"
      >
        <DefaultCard
          className="/* TODO: Convert width: 100% */ /* TODO: Convert maxWidth: 400 */ /* TODO: Convert mt: 4 */"
          padding="large"
        >
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ /* TODO: Convert alignItems: center */ /* TODO: Convert mb: 3 */"
          >
            <Avatar className="m-2 /* TODO: Convert bgcolor: primary.main */">
              <LockIcon />
            </Avatar>
            <Typography
              component="h1"
              variant="h4"
              color="text.primary"
              className="/* TODO: Convert fontWeight: bold */"
            >
              BlackRent
            </Typography>
            <Typography variant="h6" className="/* TODO: Convert color: text.secondary */ /* TODO: Convert mt: 1 */">
              Prihl√°senie do syst√©mu
            </Typography>
          </div>

          {/* Error handling sa teraz zobrazuje cez EnhancedErrorToast */}

          <div component="form" onSubmit={handleSubmit} className="/* TODO: Convert width: 100% */">
            <TextField
              margin="normal"
              required
              fullWidth
              id="username"
              label="Pou≈æ√≠vateƒæsk√© meno"
              name="username"
              autoComplete="username"
              autoFocus
              value={credentials.username}
              onChange={handleChange}
              disabled={state.isLoading}
              className="/* TODO: Convert mb: 2 */"
            />
            <TextField
              margin="normal"
              required
              fullWidth
              name="password"
              label="Heslo"
              type="password"
              id="password"
              autoComplete="current-password"
              value={credentials.password}
              onChange={handleChange}
              disabled={state.isLoading}
              className="/* TODO: Convert mb: 2 */"
            />

            <FormControlLabel
              control={
                <Checkbox
                  checked={rememberMe}
                  onChange={e => setRememberMe(e.target.checked)}
                  name="rememberMe"
                  color="primary"
                />
              }
              label={
                <Typography color="text.primary" className="/* TODO: Convert fontWeight: bold */">
                  Zapam√§ta≈• si prihl√°senie
                </Typography>
              }
              className="/* TODO: Convert mb: 2 */"
            />

            <PrimaryButton
              type="submit"
              fullWidth
              className="/* TODO: Convert mb: 2 */ /* TODO: Convert py: 1.5 */ /* TODO: Convert fontSize: 1.1rem */"
              disabled={state.isLoading}
              loading={state.isLoading}
              loadingText="Prihlasuje sa..."
            >
              Prihl√°si≈• sa
            </PrimaryButton>
          </div>

          <Divider className="/* TODO: Convert my: 2 */">
            <Typography variant="body2" color="text.secondary">
              alebo
            </Typography>
          </Divider>

          <div className="/* TODO: Convert textAlign: center */ /* TODO: Convert mb: 2 */">
            <SecondaryButton onClick={() => setShowDemo(!showDemo)}>
              {showDemo ? 'Skry≈• demo √∫ƒçty' : 'Uk√°za≈• demo √∫ƒçty'}
            </SecondaryButton>
          </div>

          {showDemo && (
            <div className="/* TODO: Convert mt: 2 */">
              <Typography
                variant="body2"
                className="/* TODO: Convert mb: 2 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert textAlign: center */"
              >
                Demo √∫ƒçty (kliknite na √∫ƒçet alebo zadajte √∫daje manu√°lne):
              </Typography>
              {demoAccounts.map(account => (
                <Paper
                  key={account.username}
                  sx={{
                    p: 2,
                    mb: 1,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    bgcolor: 'background.paper',
                    cursor: 'pointer',
                    '&:hover': { bgcolor: 'action.hover' },
                  }}
                  onClick={() => handleDemoLogin(account.username)}
                >
                  <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4">
                    <AccountIcon color="primary" />
                    <div>
                      <Typography
                        variant="body1"
                        color="text.primary"
                        className="/* TODO: Convert fontWeight: bold */"
                      >
                        {account.label}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {account.desc}
                      </Typography>
                      <Typography variant="caption" color="primary">
                        {account.username} / {account.password}
                      </Typography>
                    </div>
                  </div>
                  <StatusChip
                    label={account.role}
                    size="small"
                    chipColor="primary"
                  />
                </Paper>
              ))}
            </div>
          )}
        </DefaultCard>

        <div className="/* TODO: Convert mt: 4 */ /* TODO: Convert textAlign: center */">
          <Typography variant="body2" color="text.secondary">
            ¬© 2024 BlackRent - Syst√©m spr√°vy pren√°jmu vozidiel
          </Typography>

          {/* Mal√° n√°poveda o funkcii zapam√§tania */}
          <Typography
            variant="caption"
            color="text.secondary"
            className="/* TODO: Convert mt: 1 */ /* TODO: Convert display: block */"
          >
            {rememberMe
              ? 'Prihl√°senie zostane akt√≠vne aj po zatvoren√≠ prehliadaƒça'
              : 'Prihl√°senie sa ukonƒç√≠ po zatvoren√≠ prehliadaƒça'}
          </Typography>
        </div>
      </div>

      {/* Enhanced Error Toast */}
      <EnhancedErrorToast
        error={error}
        context={{ action: 'login', location: 'auth' }}
        onClose={clearError}
        position="top"
      />
    </Container>
  );
}
