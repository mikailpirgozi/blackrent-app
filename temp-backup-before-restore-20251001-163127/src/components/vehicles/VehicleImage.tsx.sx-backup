/**
 * üöó VEHICLE IMAGE COMPONENT
 *
 * Optimalizovan√Ω komponent pre zobrazenie vehicle obr√°zkov s lazy loading
 */

import {
/* Tailwind classes used for styling */
  DirectionsCar as CarIcon,
  PhotoCamera as PhotoIcon,
  LocalShipping as TruckIcon,
} from '@mui/icons-material';
import { Typography } from '@mui/material';
import React, { memo, useCallback, useState } from 'react';

import {
  ImagePerformanceMonitor,
  VehicleImageUtils,
} from '../../utils/imageOptimization';
import LazyImage from '../common/LazyImage';
import { CompactChip } from '../ui';

interface VehicleImageProps {
  vehicleId?: string;
  vehicleBrand?: string;
  vehicleModel?: string;
  vehicleType?: 'car' | 'truck' | 'van' | 'motorcycle';
  size: 'thumbnail' | 'card' | 'detail' | 'fullsize';
  width?: number | string;
  height?: number | string;
  borderRadius?: number;
  showBrand?: boolean;
  showType?: boolean;
  fallbackColor?: string;
  onClick?: () => void;
  className?: string;
}

const VehicleImage: React.FC<VehicleImageProps> = ({
  vehicleId,
  vehicleBrand,
  vehicleModel,
  vehicleType = 'car',
  size,
  width,
  height,
  borderRadius = 2,
  showBrand = false,
  showType = false,
  fallbackColor,
  onClick,
  className,
}) => {
  const [imageLoadTime] = useState(performance.now());

  // Generate image URLs
  const imageUrl = vehicleId
    ? VehicleImageUtils.getVehicleImageUrl(vehicleId, size)
    : null;

  // const placeholderUrl = VehicleImageUtils.getVehiclePlaceholder(
  //   vehicleType,
  //   fallbackColor
  // ); // Nepou≈æ√≠van√©
  const lowQualityUrl = vehicleId
    ? VehicleImageUtils.getVehicleImageUrl(vehicleId, 'thumbnail')
    : null;

  // Performance callbacks
  const handleImageLoad = useCallback(() => {
    const loadTime = performance.now() - imageLoadTime;
    if (imageUrl) {
      ImagePerformanceMonitor.onImageLoad(imageUrl, loadTime);
    }
  }, [imageUrl, imageLoadTime]);

  const handleImageError = useCallback(
    (error: React.SyntheticEvent<HTMLImageElement>) => {
      if (imageUrl) {
        ImagePerformanceMonitor.onImageError(imageUrl, error);
      }
    },
    [imageUrl]
  );

  // Get vehicle type icon
  const getVehicleTypeIcon = () => {
    switch (vehicleType) {
      case 'truck':
        return <TruckIcon />;
      case 'motorcycle':
        return <CarIcon />; // Could add motorcycle icon
      default:
        return <CarIcon />;
    }
  };

  // Get default dimensions based on size
  const getDimensions = () => {
    const sizeConfig = {
      thumbnail: { width: 100, height: 75 },
      card: { width: 300, height: 200 },
      detail: { width: 600, height: 400 },
      fullsize: { width: '100%', height: 400 },
    };

    const config = sizeConfig[size];
    return {
      width: width || config.width,
      height: height || config.height,
    };
  };

  const dimensions = getDimensions();

  // Custom placeholder for vehicles
  const vehiclePlaceholder = (
    <div
      className="/* TODO: Convert width: 100% */ /* TODO: Convert height: 100% */ /* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ gap-2 /* TODO: Convert backgroundColor: fallbackColor || grey.100 */ /* TODO: Convert color: text.disabled */"
    >
      {getVehicleTypeIcon()}
      <Typography variant="caption" align="center">
        {vehicleBrand && vehicleModel
          ? `${vehicleBrand} ${vehicleModel}`
          : 'Obr√°zok vozidla'}
      </Typography>
      <PhotoIcon className="/* TODO: Convert fontSize: 16 */ /* TODO: Convert opacity: 0.5 */" />
    </div>
  );

  return (
    <div
      className={className}
      className="/* TODO: Convert position: relative */ /* TODO: Convert cursor: onClick ? pointer : default */"
      onClick={onClick}
    >
      {/* Main Image */}
      {imageUrl ? (
        <LazyImage
          src={imageUrl}
          lowQualitySrc={lowQualityUrl || undefined}
          alt={`${vehicleBrand} ${vehicleModel}`.trim() || 'Vozidlo'}
          width={dimensions.width}
          height={dimensions.height}
          borderRadius={borderRadius}
          placeholder={vehiclePlaceholder}
          onLoad={handleImageLoad}
          onError={handleImageError}
          onClick={onClick}
          threshold={0.2} // Load slightly earlier for better UX
          rootMargin="100px" // Larger margin for vehicles
        />
      ) : (
        <div
          className="/* TODO: Convert width: dimensions.width */ /* TODO: Convert height: dimensions.height */ /* TODO: Convert overflow: hidden */ /* TODO: Convert cursor: onClick ? pointer : default */"
          onClick={onClick}
        >
          {vehiclePlaceholder}
        </div>
      )}

      {/* Brand Badge */}
      {showBrand && vehicleBrand && (
        <CompactChip
          label={vehicleBrand}
          size="small"
          sx={{
            position: 'absolute',
            top: 8,
            left: 8,
            backgroundColor: 'rgba(0,0,0,0.7)',
            color: 'white',
            fontSize: '0.7rem',
            '& .MuiChip-label': {
              px: 1,
            },
          }}
        />
      )}

      {/* Vehicle Type Badge */}
      {showType && (
        <div
          className="/* TODO: Convert position: absolute */ /* TODO: Convert top: 8 */ /* TODO: Convert right: 8 */ /* TODO: Convert backgroundColor: rgba(255 */ rounded p-1 /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert color: text.secondary */"
        >
          {getVehicleTypeIcon()}
        </div>
      )}
    </div>
  );
};

// Export with memo for performance
export default memo(VehicleImage, (prevProps, nextProps) => {
  // Custom comparison to prevent unnecessary re-renders
  return (
    prevProps.vehicleId === nextProps.vehicleId &&
    prevProps.size === nextProps.size &&
    prevProps.vehicleBrand === nextProps.vehicleBrand &&
    prevProps.vehicleModel === nextProps.vehicleModel &&
    prevProps.width === nextProps.width &&
    prevProps.height === nextProps.height &&
    prevProps.showBrand === nextProps.showBrand &&
    prevProps.showType === nextProps.showType
  );
});
