/**
 * ðŸŽ‰ SUCCESS TOAST COMPONENT
 *
 * Pleasant success notifications:
 * - Protocol status loaded
 * - Data synced
 * - Actions completed
 * - Smooth animations
 */

import {
/* Tailwind classes used for styling */
  CheckCircle as CheckCircleIcon,
  Close as CloseIcon,
  CloudDone as CloudDoneIcon,
  Refresh as RefreshIcon,
  Speed as SpeedIcon,
} from '@mui/icons-material';
import { Alert, Chip,
  Fade,
  IconButton,
  Slide,
  Snackbar,
  Typography, } from '@mui/material';
import React, { useEffect, useState } from 'react';

interface SuccessToastProps {
  message: string | null;
  onClose: () => void;
  icon?: 'check' | 'speed' | 'cloud' | 'refresh';
  autoHideDuration?: number;
  showStats?: {
    count?: number;
    duration?: number;
  };
}

export const SuccessToast: React.FC<SuccessToastProps> = ({
  message,
  onClose,
  icon = 'check',
  autoHideDuration = 4000,
  showStats,
}) => {
  const [open, setOpen] = useState(false);

  // Show toast when message appears
  useEffect(() => {
    if (message) {
      setOpen(true);
    }
  }, [message]);

  // Handle close
  const handleClose = (
    event?: React.SyntheticEvent | Event,
    reason?: string
  ) => {
    if (reason === 'clickaway') return;
    setOpen(false);
    setTimeout(onClose, 300); // Wait for animation
  };

  // Get icon based on type
  const getIcon = () => {
    const iconProps = { fontSize: 'small' as const };

    switch (icon) {
      case 'speed':
        return <SpeedIcon {...iconProps} />;
      case 'cloud':
        return <CloudDoneIcon {...iconProps} />;
      case 'refresh':
        return <RefreshIcon {...iconProps} />;
      default:
        return <CheckCircleIcon {...iconProps} />;
    }
  };

  if (!message) return null;

  return (
    <Snackbar
      open={open}
      autoHideDuration={autoHideDuration}
      onClose={handleClose}
      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      TransitionComponent={Slide}
    >
      <Alert
        severity="success"
        variant="filled"
        onClose={handleClose}
        icon={getIcon()}
        sx={{
          minWidth: 280,
          maxWidth: 400,
          '& .MuiAlert-message': {
            width: '100%',
          },
          '& .MuiAlert-icon': {
            animation: 'pulse 1.5s ease-in-out',
            '@keyframes pulse': {
              '0%': { transform: 'scale(1)' },
              '50%': { transform: 'scale(1.1)' },
              '100%': { transform: 'scale(1)' },
            },
          },
        }}
        action={
          <IconButton
            size="small"
            onClick={handleClose}
            className="/* TODO: Convert color: inherit */"
          >
            <CloseIcon fontSize="small" />
          </IconButton>
        }
      >
        <div>
          <Typography variant="body2" fontWeight="medium">
            {message}
          </Typography>

          {/* Stats display */}
          {showStats && (
            <div className="/* TODO: Convert mt: 1 */ /* TODO: Convert display: flex */ gap-2 /* TODO: Convert flexWrap: wrap */">
              {showStats.count !== undefined && (
                <Fade in timeout={800}>
                  <Chip
                    size="small"
                    label={`${showStats.count} zÃ¡znamov`}
                    variant="outlined"
                    className="/* TODO: Convert bgcolor: rgba(255 */ /* TODO: Convert color: inherit */ /* TODO: Convert borderColor: rgba(255 */ /* TODO: Convert fontSize: 0.7rem */"
                  />
                </Fade>
              )}

              {showStats.duration !== undefined && (
                <Fade in timeout={1000}>
                  <Chip
                    size="small"
                    label={`${showStats.duration}ms`}
                    variant="outlined"
                    icon={<SpeedIcon fontSize="small" />}
                    className="/* TODO: Convert bgcolor: rgba(255 */ /* TODO: Convert color: inherit */ /* TODO: Convert borderColor: rgba(255 */ /* TODO: Convert fontSize: 0.7rem */"
                  />
                </Fade>
              )}
            </div>
          )}
        </div>
      </Alert>
    </Snackbar>
  );
};
