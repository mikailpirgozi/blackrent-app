/**
 * ‚ö° QUICK FILTERS
 *
 * Reusable quick filter chips pre ƒçast√© vyhƒæad√°vania
 */

import {
/* Tailwind classes used for styling */
  Clear as ClearIcon,
  FilterList as FilterIcon,
} from '@mui/icons-material';
import { Chip,
  Stack,
  Tooltip,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import React, { memo } from 'react';

import type { QuickFilter } from '../../hooks/useEnhancedSearch';

interface QuickFiltersProps {
  filters: QuickFilter[];
  activeFilter: string | null;
  onFilterSelect: (filterId: string | null) => void;
  showTitle?: boolean;
  compact?: boolean;
  maxVisible?: number;
}

const QuickFilters: React.FC<QuickFiltersProps> = ({
  filters,
  activeFilter,
  onFilterSelect,
  showTitle = true,
  compact = false,
  maxVisible,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  if (!filters || filters.length === 0) {
    return null;
  }

  // Limit visible filters on mobile
  const visibleFilters =
    maxVisible && isMobile ? filters.slice(0, maxVisible) : filters;

  const handleFilterClick = (filterId: string) => {
    if (activeFilter === filterId) {
      onFilterSelect(null); // Deselect if already active
    } else {
      onFilterSelect(filterId);
    }
  };

  return (
    <div className="/* TODO: Convert mb: compact ? 1 : 2 */">
      {showTitle && (
        <Typography
          variant={compact ? 'caption' : 'body2'}
          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert mb: 1 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert fontWeight: 600 */"
        >
          <FilterIcon className="/* TODO: Convert fontSize: 16 */ /* TODO: Convert mr: 0.5 */" />
          R√Ωchle filtre:
        </Typography>
      )}

      <Stack
        direction="row"
        spacing={1}
        className="/* TODO: Convert flexWrap: wrap */ gap-2"
      >
        {visibleFilters.map(filter => (
          <Tooltip
            key={filter.id}
            title={filter.count ? `${filter.count} v√Ωsledkov` : filter.label}
            placement="top"
          >
            <Chip
              label={
                <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1">
                  {filter.label}
                  {filter.count && (
                    <Typography
                      variant="caption"
                      className="/* TODO: Convert fontSize: 0.7rem */ /* TODO: Convert opacity: 0.8 */ /* TODO: Convert fontWeight: 600 */"
                    >
                      ({filter.count})
                    </Typography>
                  )}
                </div>
              }
              size={compact || isMobile ? 'small' : 'medium'}
              color={activeFilter === filter.id ? filter.color : 'default'}
              variant={activeFilter === filter.id ? 'filled' : 'outlined'}
              onClick={() => handleFilterClick(filter.id)}
              onDelete={
                activeFilter === filter.id
                  ? () => onFilterSelect(null)
                  : undefined
              }
              deleteIcon={<ClearIcon />}
              sx={{
                transition: 'all 0.2s ease',
                cursor: 'pointer',
                '&:hover': {
                  transform: 'translateY(-1px)',
                  boxShadow: theme.shadows[2],
                  borderColor:
                    activeFilter === filter.id
                      ? theme.palette[filter.color].main
                      : theme.palette.primary.main,
                },
                '&:active': {
                  transform: 'translateY(0px)',
                },
                // Highlight popular filters
                ...(filter.count &&
                  filter.count > 10 && {
                    position: 'relative',
                    '&::after': {
                      content: '""',
                      position: 'absolute',
                      top: -2,
                      right: -2,
                      width: 8,
                      height: 8,
                      borderRadius: '50%',
                      backgroundColor: theme.palette.warning.main,
                      display: activeFilter !== filter.id ? 'block' : 'none',
                    },
                  }),
              }}
            />
          </Tooltip>
        ))}

        {/* Show more indicator */}
        {maxVisible && isMobile && filters.length > maxVisible && (
          <Chip
            label={`+${filters.length - maxVisible}`}
            size="small"
            variant="outlined"
            className="/* TODO: Convert opacity: 0.6 */ /* TODO: Convert cursor: default */"
          />
        )}
      </Stack>
    </div>
  );
};

// Pre-defined quick filters pre r√¥zne entity
export const RENTAL_QUICK_FILTERS: QuickFilter[] = [
  {
    id: 'active',
    label: 'Akt√≠vne',
    value: 'active',
    color: 'success',
    icon: 'üü¢',
  },
  {
    id: 'pending',
    label: 'ƒåakaj√∫ce',
    value: 'pending',
    color: 'warning',
    icon: '‚è≥',
  },
  {
    id: 'overdue',
    label: 'Preterminovan√©',
    value: 'overdue',
    color: 'error',
    icon: '‚ö†Ô∏è',
  },
  {
    id: 'this_month',
    label: 'Tento mesiac',
    value: 'this_month',
    color: 'primary',
    icon: 'üìÖ',
  },
  {
    id: 'high_value',
    label: 'Vysok√° suma',
    value: 'high_value',
    color: 'secondary',
    icon: 'üí∞',
  },
];

export const VEHICLE_QUICK_FILTERS: QuickFilter[] = [
  {
    id: 'available',
    label: 'Dostupn√©',
    value: 'available',
    color: 'success',
    icon: '‚úÖ',
  },
  {
    id: 'rented',
    label: 'Prenajat√©',
    value: 'rented',
    color: 'warning',
    icon: 'üöó',
  },
  {
    id: 'maintenance',
    label: 'Servis',
    value: 'maintenance',
    color: 'error',
    icon: 'üîß',
  },
  {
    id: 'premium',
    label: 'Premium',
    value: 'premium',
    color: 'secondary',
    icon: '‚≠ê',
  },
];

export const CUSTOMER_QUICK_FILTERS: QuickFilter[] = [
  {
    id: 'vip',
    label: 'VIP',
    value: 'vip',
    color: 'secondary',
    icon: 'üëë',
  },
  {
    id: 'active_rentals',
    label: 'Akt√≠vni',
    value: 'active_rentals',
    color: 'success',
    icon: 'üéØ',
  },
  {
    id: 'new',
    label: 'Nov√≠',
    value: 'new',
    color: 'info',
    icon: 'üÜï',
  },
  {
    id: 'corporate',
    label: 'Firemn√≠',
    value: 'corporate',
    color: 'primary',
    icon: 'üè¢',
  },
];

export default memo(QuickFilters);
