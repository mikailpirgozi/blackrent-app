/**
 * üñºÔ∏è IMAGE GALLERY LAZY
 *
 * Optimalizovan√° image gallery s lazy loading a virtualiz√°ciou
 */

import {
/* Tailwind classes used for styling */
  Close as CloseIcon,
  ChevronLeft as PrevIcon,
  ChevronRight as NextIcon,
  ZoomIn as ZoomInIcon,
} from '@mui/icons-material';
import { Grid,
  Dialog,
  DialogContent,
  IconButton,
  Typography,
  useTheme,
  useMediaQuery,
  Fade,
  Paper, } from '@mui/material';
import React, { memo, useState, useCallback, useMemo } from 'react';

import { VehicleImageUtils } from '../../utils/imageOptimization';

import LazyImage from './LazyImage';

interface GalleryImage {
  id: string;
  url: string;
  thumbnailUrl?: string;
  alt?: string;
  caption?: string;
  vehicleId?: string;
}

interface ImageGalleryLazyProps {
  images: GalleryImage[];
  columns?: number;
  spacing?: number;
  aspectRatio?: number;
  showCaptions?: boolean;
  enableFullscreen?: boolean;
  maxVisibleImages?: number;
  onImageClick?: (image: GalleryImage, index: number) => void;
  className?: string;
}

const ImageGalleryLazy: React.FC<ImageGalleryLazyProps> = ({
  images,
  columns = 3,
  spacing = 2,
  aspectRatio = 4 / 3,
  showCaptions = false,
  enableFullscreen = true,
  maxVisibleImages = 50, // Virtual scrolling threshold
  onImageClick,
  className,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [fullscreenOpen, setFullscreenOpen] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  // Responsive columns
  const responsiveColumns = useMemo(() => {
    if (isMobile) return Math.min(2, columns);
    return columns;
  }, [isMobile, columns]);

  // Virtual scrolling - show only subset of images initially
  const [visibleCount, setVisibleCount] = useState(
    Math.min(maxVisibleImages, images.length)
  );
  const visibleImages = useMemo(
    () => images.slice(0, visibleCount),
    [images, visibleCount]
  );

  // Load more images when needed
  const loadMoreImages = useCallback(() => {
    const remaining = images.length - visibleCount;
    const increment = Math.min(20, remaining);
    setVisibleCount(prev => prev + increment);
  }, [images.length, visibleCount]);

  // Handle image click
  const handleImageClick = useCallback(
    (image: GalleryImage, index: number) => {
      if (enableFullscreen) {
        setCurrentImageIndex(index);
        setFullscreenOpen(true);
      }
      onImageClick?.(image, index);
    },
    [enableFullscreen, onImageClick]
  );

  // Fullscreen navigation
  const handlePreviousImage = useCallback(() => {
    setCurrentImageIndex(prev => (prev === 0 ? images.length - 1 : prev - 1));
  }, [images.length]);

  const handleNextImage = useCallback(() => {
    setCurrentImageIndex(prev => (prev === images.length - 1 ? 0 : prev + 1));
  }, [images.length]);

  const handleCloseFullscreen = useCallback(() => {
    setFullscreenOpen(false);
  }, []);

  // Calculate image dimensions
  const imageHeight = useMemo(() => {
    return `${(1 / aspectRatio) * 100}%`;
  }, [aspectRatio]);

  if (!images || images.length === 0) {
    return (
      <div
        className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */ /* TODO: Convert color: text.secondary */"
      >
        <Typography variant="body1">üñºÔ∏è ≈Ωiadne obr√°zky na zobrazenie</Typography>
      </div>
    );
  }

  return (
    <div className={className}>
      {/* Gallery Grid */}
      <Grid container spacing={spacing}>
        {visibleImages.map((image, index) => (
          <Grid item xs={12 / responsiveColumns} key={image.id}>
            <Paper
              elevation={2}
              sx={{
                borderRadius: 2,
                overflow: 'hidden',
                cursor: enableFullscreen ? 'pointer' : 'default',
                transition: 'all 0.2s ease-in-out',
                '&:hover': {
                  elevation: 4,
                  transform: enableFullscreen ? 'scale(1.02)' : 'none',
                },
              }}
            >
              <div
                className="/* TODO: Convert position: relative */ /* TODO: Convert paddingBottom: imageHeight */ /* TODO: Convert overflow: hidden */"
              >
                <LazyImage
                  src={image.url}
                  lowQualitySrc={
                    image.thumbnailUrl ||
                    (image.vehicleId
                      ? VehicleImageUtils.getVehicleImageUrl(
                          image.vehicleId,
                          'thumbnail'
                        )
                      : undefined)
                  }
                  alt={image.alt || `Obr√°zok ${index + 1}`}
                  width="100%"
                  height="100%"
                  objectFit="cover"
                  placeholder="skeleton"
                  onClick={() => handleImageClick(image, index)}
                  style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                  }}
                />

                {/* Zoom overlay */}
                {enableFullscreen && (
                  <Fade in timeout={200}>
                    <div
                      sx={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(0,0,0,0.3)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        opacity: 0,
                        transition: 'opacity 0.2s ease-in-out',
                        '&:hover': {
                          opacity: 1,
                        },
                      }}
                    >
                      <ZoomInIcon
                        className="/* TODO: Convert color: white */ /* TODO: Convert fontSize: 32 */ /* TODO: Convert filter: drop-shadow(0 2px 4px rgba(0 */"
                      />
                    </div>
                  </Fade>
                )}
              </div>

              {/* Caption */}
              {showCaptions && image.caption && (
                <div className="p-2">
                  <Typography
                    variant="caption"
                    className="/* TODO: Convert color: text.secondary */ /* TODO: Convert display: -webkit-box */ /* TODO: Convert WebkitLineClamp: 2 */ /* TODO: Convert WebkitBoxOrient: vertical */ /* TODO: Convert overflow: hidden */"
                  >
                    {image.caption}
                  </Typography>
                </div>
              )}
            </Paper>
          </Grid>
        ))}
      </Grid>

      {/* Load More Button */}
      {visibleCount < images.length && (
        <div className="/* TODO: Convert textAlign: center */ /* TODO: Convert mt: 3 */">
          <button
            onClick={loadMoreImages}
            style={{
              backgroundColor: theme.palette.primary.main,
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              padding: '12px 24px',
              fontSize: '0.875rem',
              fontWeight: 600,
              cursor: 'pointer',
              transition: 'all 0.2s ease-in-out',
            }}
            onMouseEnter={e => {
              e.currentTarget.style.backgroundColor =
                theme.palette.primary.dark;
            }}
            onMouseLeave={e => {
              e.currentTarget.style.backgroundColor =
                theme.palette.primary.main;
            }}
          >
            Naƒç√≠ta≈• ƒèal≈°ie ({images.length - visibleCount} zost√°va)
          </button>
        </div>
      )}

      {/* Fullscreen Dialog */}
      {enableFullscreen && (
        <Dialog
          open={fullscreenOpen}
          onClose={handleCloseFullscreen}
          maxWidth={false}
          sx={{
            '& .MuiDialog-paper': {
              backgroundColor: 'rgba(0,0,0,0.9)',
              boxShadow: 'none',
              margin: 0,
              maxWidth: '100vw',
              maxHeight: '100vh',
              borderRadius: 0,
            },
          }}
        >
          <DialogContent className="/* TODO: Convert p: 0 */ /* TODO: Convert position: relative */">
            {/* Close Button */}
            <IconButton
              onClick={handleCloseFullscreen}
              sx={{
                position: 'absolute',
                top: 16,
                right: 16,
                zIndex: 2,
                backgroundColor: 'rgba(0,0,0,0.5)',
                color: 'white',
                '&:hover': {
                  backgroundColor: 'rgba(0,0,0,0.7)',
                },
              }}
            >
              <CloseIcon />
            </IconButton>

            {/* Navigation Buttons */}
            {images.length > 1 && (
              <>
                <IconButton
                  onClick={handlePreviousImage}
                  sx={{
                    position: 'absolute',
                    left: 16,
                    top: '50%',
                    transform: 'translateY(-50%)',
                    zIndex: 2,
                    backgroundColor: 'rgba(0,0,0,0.5)',
                    color: 'white',
                    '&:hover': {
                      backgroundColor: 'rgba(0,0,0,0.7)',
                    },
                  }}
                >
                  <PrevIcon />
                </IconButton>

                <IconButton
                  onClick={handleNextImage}
                  sx={{
                    position: 'absolute',
                    right: 16,
                    top: '50%',
                    transform: 'translateY(-50%)',
                    zIndex: 2,
                    backgroundColor: 'rgba(0,0,0,0.5)',
                    color: 'white',
                    '&:hover': {
                      backgroundColor: 'rgba(0,0,0,0.7)',
                    },
                  }}
                >
                  <NextIcon />
                </IconButton>
              </>
            )}

            {/* Fullscreen Image */}
            <div
              className="/* TODO: Convert width: 100vw */ /* TODO: Convert height: 100vh */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ p-8"
            >
              {images[currentImageIndex] && (
                <img
                  src={images[currentImageIndex].url}
                  alt={
                    images[currentImageIndex].alt ||
                    `Obr√°zok ${currentImageIndex + 1}`
                  }
                  style={{
                    maxWidth: '100%',
                    maxHeight: '100%',
                    objectFit: 'contain',
                    borderRadius: '8px',
                  }}
                />
              )}
            </div>

            {/* Image Counter */}
            <div
              className="/* TODO: Convert position: absolute */ /* TODO: Convert bottom: 16 */ /* TODO: Convert left: 50% */ /* TODO: Convert transform: translateX(-50%) */ /* TODO: Convert backgroundColor: rgba(0 */ /* TODO: Convert color: white */ /* TODO: Convert px: 2 */ /* TODO: Convert py: 1 */ rounded-md /* TODO: Convert fontSize: 0.875rem */"
            >
              {currentImageIndex + 1} / {images.length}
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};

export default memo(ImageGalleryLazy);
