// üî¥ REAL-TIME NOTIFICATIONS - BlackRent
// Komponent pre zobrazenie WebSocket notifik√°ci√≠

import {
/* Tailwind classes used for styling */
  Add as AddIcon,
  DirectionsCar as CarIcon,
  CheckCircle as CheckIcon,
  Clear as ClearIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Info as InfoIcon,
  NotificationsActive as NotificationsActiveIcon,
  Notifications as NotificationsIcon,
  Person as PersonIcon,
  // Warning as WarningIcon, // TODO: Implement warning notifications
  // Error as ErrorIcon, // TODO: Implement error notifications
  Wifi as WiFiIcon,
  WifiOff as WiFiOffIcon,
} from '@mui/icons-material';
import { Alert,
  Badge, Button,
  Chip,
  Divider,
  IconButton,
  // Paper, // TODO: Implement paper container
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Menu,
  Tooltip,
  // MenuItem, // TODO: Implement menu functionality
  Typography, } from '@mui/material';
import { formatDistanceToNow } from 'date-fns';
import { sk } from 'date-fns/locale';
import React, { useState } from 'react';

import { useWebSocket } from '../../hooks/useWebSocket';

const RealTimeNotifications: React.FC = () => {
  const {
    isConnected,
    connectedUsers,
    notifications,
    unreadCount,
    markNotificationRead,
    clearNotifications,
  } = useWebSocket();
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleNotificationClick = (id: string) => {
    markNotificationRead(id);
  };

  const handleClearAll = () => {
    clearNotifications();
    handleClose();
  };

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'rental_created':
        return <AddIcon color="success" />;
      case 'rental_updated':
        return <EditIcon color="info" />;
      case 'rental_deleted':
        return <DeleteIcon color="error" />;
      case 'vehicle_updated':
        return <CarIcon color="primary" />;
      case 'customer_created':
        return <PersonIcon color="success" />;
      case 'system':
        return <InfoIcon color="warning" />;
      default:
        return <NotificationsIcon />;
    }
  };

  // TODO: Implement notification color logic
  // const getNotificationColor = (type: string) => {
  //   switch (type) {
  //     case 'rental_created':
  //     case 'customer_created':
  //       return 'success';
  //     case 'rental_updated':
  //     case 'vehicle_updated':
  //       return 'info';
  //     case 'rental_deleted':
  //       return 'error';
  //     case 'system':
  //       return 'warning';
  //     default:
  //       return 'default';
  //   }
  // };

  return (
    <div>
      {/* Connection Status Indicator */}
      <Tooltip
        title={
          isConnected
            ? `Pripojen√© - ${connectedUsers.count} u≈æ√≠vateƒæov online`
            : 'Odpojen√© od real-time updates'
        }
      >
        <Chip
          icon={isConnected ? <WiFiIcon /> : <WiFiOffIcon />}
          label={isConnected ? 'Live' : 'Offline'}
          color={isConnected ? 'success' : 'error'}
          size="small"
          variant="outlined"
          className="/* TODO: Convert mr: 1 */"
        />
      </Tooltip>

      {/* Notifications Button */}
      <Tooltip title="Real-time notifik√°cie">
        <IconButton
          onClick={handleClick}
          color={unreadCount > 0 ? 'primary' : 'default'}
          size="large"
        >
          <Badge badgeContent={unreadCount} color="error">
            {unreadCount > 0 ? (
              <NotificationsActiveIcon />
            ) : (
              <NotificationsIcon />
            )}
          </Badge>
        </IconButton>
      </Tooltip>

      {/* Notifications Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleClose}
        PaperProps={{
          sx: {
            width: 400,
            maxHeight: 600,
          },
        }}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'right',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
      >
        {/* Header */}
        <div className="p-4 /* TODO: Convert borderBottom: 1 */ /* TODO: Convert borderColor: divider */">
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */"
          >
            <Typography variant="h6" component="div">
              üî¥ Real-time Updates
            </Typography>
            {notifications.length > 0 && (
              <Button
                size="small"
                startIcon={<ClearIcon />}
                onClick={handleClearAll}
              >
                Vymaza≈• v≈°etko
              </Button>
            )}
          </div>

          {/* Status */}
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert mt: 1 */ gap-2">
            <Chip
              icon={isConnected ? <WiFiIcon /> : <WiFiOffIcon />}
              label={isConnected ? `${connectedUsers.count} online` : 'Offline'}
              color={isConnected ? 'success' : 'error'}
              size="small"
            />
            {unreadCount > 0 && (
              <Chip
                label={`${unreadCount} nov√Ωch`}
                color="primary"
                size="small"
              />
            )}
          </div>
        </div>

        {/* Connection Warning */}
        {!isConnected && (
          <Alert severity="warning" className="m-2">
            Real-time updates s√∫ moment√°lne nedostupn√©. Obnovte str√°nku pre
            op√§tovn√© pripojenie.
          </Alert>
        )}

        {/* Notifications List */}
        <div className="/* TODO: Convert maxHeight: 400 */ /* TODO: Convert overflow: auto */">
          {notifications.length === 0 ? (
            <div className="p-6 /* TODO: Convert textAlign: center */">
              <NotificationsIcon
                className="/* TODO: Convert fontSize: 48 */ /* TODO: Convert color: text.secondary */ /* TODO: Convert mb: 1 */"
              />
              <Typography color="text.secondary">≈Ωiadne notifik√°cie</Typography>
              <Typography variant="body2" color="text.secondary">
                Real-time updates sa zobrazia tu
              </Typography>
            </div>
          ) : (
            <List className="/* TODO: Convert p: 0 */">
              {notifications.map((notification, index) => (
                <React.Fragment key={notification.id}>
                  <ListItem
                    sx={{
                      bgcolor: notification.read
                        ? 'transparent'
                        : 'action.hover',
                      cursor: 'pointer',
                      '&:hover': {
                        bgcolor: 'action.selected',
                      },
                    }}
                    onClick={() => handleNotificationClick(notification.id)}
                  >
                    <ListItemIcon>
                      {getNotificationIcon(notification.type)}
                    </ListItemIcon>
                    <ListItemText
                      primary={
                        <div
                          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
                        >
                          <Typography variant="subtitle2" component="span">
                            {notification.title}
                          </Typography>
                          {!notification.read && (
                            <Chip
                              label="NOV√â"
                              color="primary"
                              size="small"
                              className="/* TODO: Convert height: 20 */ /* TODO: Convert fontSize: 0.7rem */"
                            />
                          )}
                        </div>
                      }
                      secondary={
                        <div>
                          <Typography variant="body2" color="text.secondary">
                            {notification.message}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {formatDistanceToNow(
                              new Date(notification.timestamp),
                              {
                                addSuffix: true,
                                locale: sk,
                              }
                            )}
                          </Typography>
                        </div>
                      }
                    />
                    {!notification.read && (
                      <div className="/* TODO: Convert ml: 1 */">
                        <CheckIcon color="primary" fontSize="small" />
                      </div>
                    )}
                  </ListItem>
                  {index < notifications.length - 1 && <Divider />}
                </React.Fragment>
              ))}
            </List>
          )}
        </div>

        {/* Footer */}
        {notifications.length > 0 && (
          <div
            className="p-2 /* TODO: Convert borderTop: 1 */ /* TODO: Convert borderColor: divider */ /* TODO: Convert textAlign: center */"
          >
            <Typography variant="caption" color="text.secondary">
              Zobrazen√Ωch {Math.min(notifications.length, 50)} zo v≈°etk√Ωch
              notifik√°ci√≠
            </Typography>
          </div>
        )}
      </Menu>
    </div>
  );
};

export default RealTimeNotifications;
