/**
 * üñºÔ∏è LAZY IMAGE COMPONENT
 *
 * Optimalizovan√Ω image komponent s lazy loading a placeholder support
 */

import {
/* Tailwind classes used for styling */
  Error as ErrorIcon,
  Image as ImageIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
import { Fade,
  IconButton,
  Skeleton,
  Typography,
  useTheme, } from '@mui/material';
import React, { forwardRef, memo } from 'react';

import { useLazyImage, useProgressiveImage } from '../../hooks/useLazyImage';

interface LazyImageProps {
  src: string;
  alt: string;
  lowQualitySrc?: string;
  width?: number | string;
  height?: number | string;
  className?: string;
  style?: React.CSSProperties;
  objectFit?: 'cover' | 'contain' | 'fill' | 'scale-down' | 'none';
  borderRadius?: number | string;
  showRetry?: boolean;
  placeholder?: 'skeleton' | 'icon' | 'blur' | React.ReactNode;
  placeholderColor?: string;
  fadeInDuration?: number;
  onLoad?: () => void;
  onError?: (error: React.SyntheticEvent<HTMLImageElement>) => void;
  onClick?: () => void;
  // Lazy loading options
  threshold?: number;
  rootMargin?: string;
  retryAttempts?: number;
}

const LazyImage = forwardRef<HTMLImageElement, LazyImageProps>(
  (
    {
      src,
      alt,
      lowQualitySrc,
      width = '100%',
      height = 200,
      className,
      style,
      objectFit = 'cover',
      borderRadius = 2,
      showRetry = true,
      placeholder = 'skeleton',
      placeholderColor,
      fadeInDuration = 300,
      onLoad,
      onError,
      onClick,
      threshold = 0.1,
      rootMargin = '50px',
      retryAttempts = 3,
    },
    ref
  ) => {
    const theme = useTheme();

    // Always call both hooks to avoid conditional hook calls
    const progressiveImageHook = useProgressiveImage(
      lowQualitySrc || src,
      src,
      {
        threshold,
        rootMargin,
        retryAttempts,
        onLoad,
        onError,
      }
    );

    const lazyImageHook = useLazyImage(src, {
      threshold,
      rootMargin,
      retryAttempts,
      onLoad,
      onError,
    });

    // Use progressive loading if low quality src is provided
    const imageHook = lowQualitySrc ? progressiveImageHook : lazyImageHook;

    const {
      src: loadedSrc,
      isLoading,
      hasError,
      isInView,
      retry,
      imageRef,
    } = imageHook;

    const isProgressive = 'isHighQuality' in imageHook;
    const isHighQuality = isProgressive ? imageHook.isHighQuality : true;

    // Container styles
    const containerStyles = {
      width,
      height,
      borderRadius,
      overflow: 'hidden',
      position: 'relative' as const,
      backgroundColor: placeholderColor || theme.palette.grey[100],
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      cursor: onClick ? 'pointer' : 'default',
      ...style,
    };

    // Render placeholder
    const renderPlaceholder = () => {
      if (typeof placeholder === 'object' && placeholder !== null) {
        return placeholder;
      }

      switch (placeholder) {
        case 'skeleton':
          return (
            <Skeleton
              variant="rectangular"
              width="100%"
              height="100%"
              animation="wave"
              className=""
            />
          );

        case 'icon':
          return (
            <div
              className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert color: text.disabled */"
            >
              <ImageIcon className="/* TODO: Convert fontSize: 48 */ /* TODO: Convert opacity: 0.5 */" />
              <Typography variant="caption" className="/* TODO: Convert opacity: 0.7 */">
                {isLoading ? 'Naƒç√≠tava...' : 'Obr√°zok'}
              </Typography>
            </div>
          );

        case 'blur':
          return (
            <div
              sx={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: `linear-gradient(45deg, 
                ${theme.palette.grey[200]} 25%, 
                transparent 25%, 
                transparent 75%, 
                ${theme.palette.grey[200]} 75%, 
                ${theme.palette.grey[200]}
              )`,
                backgroundSize: '20px 20px',
                backgroundPosition: '0 0, 10px 10px',
                filter: 'blur(1px)',
                opacity: 0.3,
              }}
            />
          );

        default:
          return null;
      }
    };

    // Render error state
    const renderError = () => (
      <div
        className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert color: error.main */ p-4"
      >
        <ErrorIcon className="/* TODO: Convert fontSize: 32 */" />
        <Typography variant="caption" align="center" className="/* TODO: Convert opacity: 0.8 */">
          Obr√°zok sa nepodarilo naƒç√≠ta≈•
        </Typography>
        {showRetry && (
          <IconButton
            size="small"
            onClick={retry}
            sx={{
              mt: 0.5,
              backgroundColor: 'error.main',
              color: 'white',
              '&:hover': {
                backgroundColor: 'error.dark',
              },
            }}
          >
            <RefreshIcon fontSize="small" />
          </IconButton>
        )}
      </div>
    );

    // Combine refs
    const combinedRef = (element: HTMLImageElement | null) => {
      if (imageRef) {
        (imageRef as React.MutableRefObject<HTMLImageElement | null>).current =
          element;
      }
      if (ref) {
        if (typeof ref === 'function') {
          ref(element);
        } else {
          ref.current = element;
        }
      }
    };

    return (
      <div className={className} sx={containerStyles} onClick={onClick}>
        {/* Placeholder/Loading state */}
        {!loadedSrc && !hasError && renderPlaceholder()}

        {/* Error state */}
        {hasError && renderError()}

        {/* Loaded image */}
        {loadedSrc && !hasError && (
          <Fade
            in={true}
            timeout={fadeInDuration}
            style={{
              width: '100%',
              height: '100%',
              position: 'absolute',
              top: 0,
              left: 0,
            }}
          >
            <img
              ref={combinedRef}
              src={loadedSrc}
              alt={alt}
              style={{
                width: '100%',
                height: '100%',
                objectFit,
                transition: `filter ${fadeInDuration}ms ease-out`,
                filter: isHighQuality ? 'none' : 'blur(2px)',
              }}
              loading="lazy" // Native lazy loading as fallback
              onLoad={onLoad}
              onError={onError}
            />
          </Fade>
        )}

        {/* Loading indicator overlay */}
        {isLoading && isInView && (
          <div
            className="/* TODO: Convert position: absolute */ /* TODO: Convert top: 8 */ /* TODO: Convert right: 8 */ /* TODO: Convert backgroundColor: rgba(0 */ rounded p-1 /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-1"
          >
            <div
              sx={{
                width: 12,
                height: 12,
                borderRadius: '50%',
                border: '2px solid transparent',
                borderTop: '2px solid white',
                animation: 'spin 1s linear infinite',
                '@keyframes spin': {
                  '0%': { transform: 'rotate(0deg)' },
                  '100%': { transform: 'rotate(360deg)' },
                },
              }}
            />
            <Typography variant="caption" className="/* TODO: Convert color: white */ /* TODO: Convert fontSize: 10 */">
              {isProgressive && !isHighQuality ? 'HD' : 'Naƒç√≠tava'}
            </Typography>
          </div>
        )}

        {/* Progressive quality indicator */}
        {isProgressive && loadedSrc && !isHighQuality && (
          <div
            className="/* TODO: Convert position: absolute */ /* TODO: Convert bottom: 8 */ /* TODO: Convert left: 8 */ /* TODO: Convert backgroundColor: rgba(255 */ /* TODO: Convert color: white */ /* TODO: Convert px: 1 */ /* TODO: Convert py: 0.5 */ rounded /* TODO: Convert fontSize: 10 */ /* TODO: Convert fontWeight: 600 */"
          >
            Optimalizuje sa...
          </div>
        )}
      </div>
    );
  }
);

LazyImage.displayName = 'LazyImage';

export default memo(LazyImage);
