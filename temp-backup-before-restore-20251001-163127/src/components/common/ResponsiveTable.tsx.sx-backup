import { Card,
/* Tailwind classes used for styling */
  CardContent,
  Checkbox,
  Paper,
  Stack,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  useMediaQuery,
  useTheme, } from '@mui/material';
import React from 'react';

// Generic table row data interface
export interface TableRowData {
  id: string;
  [key: string]: unknown;
}

export interface ResponsiveTableColumn {
  id: string;
  label: string;
  hideOnMobile?: boolean;
  hideOnTablet?: boolean;
  width?:
    | string
    | number
    | { xs?: string; sm?: string; md?: string; lg?: string; xl?: string };
  render?: (value: unknown, row: TableRowData) => React.ReactNode;
  format?: (value: unknown) => string;
}

export interface ResponsiveTableProps {
  columns: ResponsiveTableColumn[];
  data: TableRowData[];
  selectable?: boolean;
  selected?: string[];
  onSelectionChange?: (selected: string[]) => void;
  onRowClick?: (row: TableRowData) => void;
  getRowId?: (row: TableRowData) => string;
  getRowColor?: (row: TableRowData) => string;
  mobileCardRenderer?: (row: TableRowData, index: number) => React.ReactNode;
  emptyMessage?: string;
}

export default function ResponsiveTable({
  columns,
  data,
  selectable = false,
  selected = [],
  onSelectionChange,
  onRowClick,
  getRowId = row => row.id,
  getRowColor,
  mobileCardRenderer,
  emptyMessage = 'Žiadne dáta',
}: ResponsiveTableProps) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));

  const handleSelectAll = (checked: boolean) => {
    if (!onSelectionChange) return;
    if (checked) {
      onSelectionChange(data.map(getRowId));
    } else {
      onSelectionChange([]);
    }
  };

  const handleSelectOne = (id: string, checked: boolean) => {
    if (!onSelectionChange) return;
    if (checked) {
      onSelectionChange([...selected, id]);
    } else {
      onSelectionChange(selected.filter(s => s !== id));
    }
  };

  // Filter columns based on screen size
  const visibleColumns = columns.filter(col => {
    if (isMobile && col.hideOnMobile) return false;
    if (isTablet && col.hideOnTablet) return false;
    return true;
  });

  // Mobile Card View
  if (isMobile) {
    if (mobileCardRenderer) {
      return (
        <div
          className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-4"
        >
          {data.map((row, index) => (
            <div key={getRowId(row)}>{mobileCardRenderer(row, index)}</div>
          ))}
          {data.length === 0 && (
            <Card>
              <CardContent className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */">
                <Typography color="text.secondary">{emptyMessage}</Typography>
              </CardContent>
            </Card>
          )}
        </div>
      );
    }

    // Default Mobile Card Layout
    return (
      <div
        className="/* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ gap-4"
      >
        {data.map(row => {
          const rowId = getRowId(row);
          const backgroundColor = getRowColor ? getRowColor(row) : undefined;

          return (
            <Card
              key={rowId}
              sx={{
                backgroundColor,
                cursor: onRowClick ? 'pointer' : 'default',
                '&:hover': onRowClick
                  ? {
                      backgroundColor: theme.palette.action.hover,
                    }
                  : {},
              }}
              onClick={() => onRowClick && onRowClick(row)}
            >
              <CardContent className="/* TODO: Convert pb: 16px !important */">
                {selectable && (
                  <div className="/* TODO: Convert mb: 1 */">
                    <Checkbox
                      checked={selected.includes(rowId)}
                      onChange={e => handleSelectOne(rowId, e.target.checked)}
                      onClick={e => e.stopPropagation()}
                    />
                  </div>
                )}

                <Stack spacing={1}>
                  {visibleColumns.map(col => {
                    const value = row[col.id];
                    const displayValue = col.render
                      ? col.render(value, row)
                      : col.format
                        ? col.format(value)
                        : value;

                    return (
                      <div
                        key={col.id}
                        className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */"
                      >
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          className="/* TODO: Convert minWidth: 80px */"
                        >
                          {col.label}:
                        </Typography>
                        <Typography
                          variant="body2"
                          className="/* TODO: Convert fontWeight: 500 */ /* TODO: Convert textAlign: right */"
                        >
                          {String(displayValue ?? '')}
                        </Typography>
                      </div>
                    );
                  })}
                </Stack>
              </CardContent>
            </Card>
          );
        })}

        {data.length === 0 && (
          <Card>
            <CardContent className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */">
              <Typography color="text.secondary">{emptyMessage}</Typography>
            </CardContent>
          </Card>
        )}
      </div>
    );
  }

  // Desktop Table View
  return (
    <Card>
      <TableContainer
        component={Paper}
        className="/* TODO: Convert backgroundColor: transparent */"
      >
        <Table>
          <TableHead>
            <TableRow>
              {selectable && (
                <TableCell padding="checkbox">
                  <Checkbox
                    checked={selected.length === data.length && data.length > 0}
                    indeterminate={
                      selected.length > 0 && selected.length < data.length
                    }
                    onChange={e => handleSelectAll(e.target.checked)}
                  />
                </TableCell>
              )}
              {visibleColumns.map(col => (
                <TableCell key={col.id} className="/* TODO: Convert width: col.width */">
                  {col.label}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {data.map(row => {
              const rowId = getRowId(row);
              const backgroundColor = getRowColor
                ? getRowColor(row)
                : undefined;

              return (
                <TableRow
                  key={rowId}
                  selected={selected.includes(rowId)}
                  sx={{
                    backgroundColor,
                    cursor: onRowClick ? 'pointer' : 'default',
                    '&:hover': onRowClick
                      ? {
                          backgroundColor: theme.palette.action.hover,
                        }
                      : {},
                  }}
                  onClick={() => onRowClick && onRowClick(row)}
                >
                  {selectable && (
                    <TableCell padding="checkbox">
                      <Checkbox
                        checked={selected.includes(rowId)}
                        onChange={e => handleSelectOne(rowId, e.target.checked)}
                        onClick={e => e.stopPropagation()}
                      />
                    </TableCell>
                  )}
                  {visibleColumns.map(col => {
                    const value = row[col.id];
                    const displayValue = col.render
                      ? col.render(value, row)
                      : col.format
                        ? col.format(value)
                        : value;

                    return (
                      <TableCell key={col.id}>
                        {String(displayValue ?? '')}
                      </TableCell>
                    );
                  })}
                </TableRow>
              );
            })}

            {data.length === 0 && (
              <TableRow>
                <TableCell
                  colSpan={visibleColumns.length + (selectable ? 1 : 0)}
                  className="/* TODO: Convert textAlign: center */ /* TODO: Convert py: 4 */"
                >
                  <Typography color="text.secondary">{emptyMessage}</Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
    </Card>
  );
}

// Helper component for mobile action buttons
export function MobileActionCard({
  children,
  title,
  subtitle,
}: {
  children: React.ReactNode;
  title?: string;
  subtitle?: string;
}) {
  return (
    <Card className="/* TODO: Convert mb: 2 */">
      <CardContent>
        {title && (
          <Typography variant="h6" className="/* TODO: Convert mb: 1 */">
            {title}
          </Typography>
        )}
        {subtitle && (
          <Typography variant="body2" color="text.secondary" className="/* TODO: Convert mb: 2 */">
            {subtitle}
          </Typography>
        )}
        {children}
      </CardContent>
    </Card>
  );
}
