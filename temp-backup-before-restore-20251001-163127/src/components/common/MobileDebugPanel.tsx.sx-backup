import {
/* Tailwind classes used for styling */
  BugReport as BugIcon,
  Clear as ClearIcon,
  Close as CloseIcon,
  Download as DownloadIcon,
  ExpandLess as ExpandLessIcon,
  ExpandMore as ExpandMoreIcon,
  Memory as MemoryIcon,
  Refresh as RefreshIcon,
  Speed as SpeedIcon,
} from '@mui/icons-material';
import { Alert, Button,
  Chip,
  Collapse,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Divider,
  IconButton,
  Stack,
  Typography, } from '@mui/material';
import React, { useEffect, useState } from 'react';
// 🔄 MOBILE CLEANUP: mobileLogger removed
// import { getMobileLogger, LogEntry } from '../../utils/mobileLogger';

// Fallback interface
interface LogEntry {
  timestamp: number; // Changed from Date to number
  level: string;
  message: string;
  data?: Record<string, unknown>;
  category?: string; // Added missing property
  stackTrace?: string; // Added missing property
}

const MobileDebugPanel: React.FC = () => {
  const [open, setOpen] = useState(false);
  const [logs] = useState<LogEntry[]>([]);
  const [expandedLog, setExpandedLog] = useState<number | null>(null);
  const [stats] = useState<Record<string, unknown> | null>(null);
  // 🔄 MOBILE CLEANUP: mobileLogger disabled
  const mobileLogger = null; // getMobileLogger();

  // Detect if mobile
  const isMobile = window.matchMedia('(max-width: 900px)').matches;

  const refreshLogs = () => {
    // 🔄 MOBILE CLEANUP: mobileLogger disabled
    if (!mobileLogger) return;
    // const currentLogs = mobileLogger.getLogs();
    // setLogs(currentLogs.slice(-50)); // Last 50 logs
    // setStats(mobileLogger.getStats());
  };

  useEffect(() => {
    if (open && mobileLogger) {
      refreshLogs();
      // Auto-refresh every 2 seconds when panel is open
      const interval = setInterval(refreshLogs, 2000);
      return () => clearInterval(interval);
    }
  }, [open, mobileLogger]);

  // Only show on mobile
  if (!isMobile || !mobileLogger) {
    return null;
  }

  const handleDownloadLogs = () => {
    // 🔄 MOBILE CLEANUP: mobileLogger disabled
    // mobileLogger.downloadLogs();
  };

  const handleClearLogs = () => {
    // 🔄 MOBILE CLEANUP: mobileLogger disabled
    // mobileLogger.clearLogs();
    // refreshLogs();
  };

  const getLevelColor = (level: LogEntry['level']) => {
    switch (level) {
      case 'DEBUG':
        return 'default';
      case 'INFO':
        return 'info';
      case 'WARN':
        return 'warning';
      case 'ERROR':
        return 'error';
      case 'CRITICAL':
        return 'error';
      default:
        return 'default';
    }
  };

  const getLevelEmoji = (level: LogEntry['level']) => {
    switch (level) {
      case 'DEBUG':
        return '🔍';
      case 'INFO':
        return 'ℹ️';
      case 'WARN':
        return '⚠️';
      case 'ERROR':
        return '❌';
      case 'CRITICAL':
        return '🚨';
      default:
        return '📝';
    }
  };

  const formatTime = (timestamp: number) => {
    return new Date(timestamp).toLocaleTimeString('sk-SK', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      fractionalSecondDigits: 3,
    });
  };

  return (
    <>
      {/* Floating Debug Button */}
      <div
        sx={{
          position: 'fixed',
          bottom: 20,
          right: 20,
          zIndex: 9999,
          opacity: 0.8,
          '&:hover': { opacity: 1 },
        }}
      >
        <Button
          variant="contained"
          color="secondary"
          size="small"
          onClick={() => setOpen(true)}
          startIcon={<BugIcon />}
          sx={{
            borderRadius: '20px',
            background: 'linear-gradient(45deg, #FF6B6B, #4ECDC4)',
            color: 'white',
            fontWeight: 'bold',
            boxShadow: '0 4px 15px rgba(0,0,0,0.3)',
            '&:hover': {
              background: 'linear-gradient(45deg, #FF5252, #26C6DA)',
            },
          }}
        >
          Debug
        </Button>
      </div>

      {/* Debug Panel Dialog */}
      <Dialog
        open={open}
        onClose={() => setOpen(false)}
        maxWidth="md"
        fullWidth
        fullScreen={isMobile}
        sx={{
          '& .MuiDialog-paper': {
            backgroundColor: '#1a1a1a',
            color: '#ffffff',
            height: isMobile ? '100vh' : '80vh',
          },
        }}
      >
        <DialogTitle
          className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert backgroundColor: #2d2d2d */ /* TODO: Convert borderBottom: 1px solid #444 */"
        >
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2">
            <BugIcon />
            <Typography variant="h6">📱 Mobile Debug Panel</Typography>
          </div>
          <IconButton onClick={() => setOpen(false)} className="/* TODO: Convert color: white */">
            <CloseIcon />
          </IconButton>
        </DialogTitle>

        <DialogContent className="p-4 /* TODO: Convert overflow: auto */">
          {/* Stats Section */}
          {stats && (
            <div className="/* TODO: Convert mb: 3 */">
              <Typography
                variant="h6"
                className="/* TODO: Convert mb: 2 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
              >
                <SpeedIcon /> Štatistiky
              </Typography>
              <Stack direction="row" spacing={1} flexWrap="wrap" useFlexGap>
                <Chip
                  label={`📝 Celkom: ${stats.totalLogs}`}
                  size="small"
                  variant="outlined"
                  className="/* TODO: Convert color: white */ /* TODO: Convert borderColor: #666 */"
                />
                <Chip
                  label={`⚠️ Warnings: ${stats.warningCount}`}
                  size="small"
                  variant="outlined"
                  color="warning"
                />
                <Chip
                  label={`❌ Errors: ${stats.errorCount}`}
                  size="small"
                  variant="outlined"
                  color="error"
                />
                <Chip
                  label={`🕐 Recent: ${stats.recentLogs}`}
                  size="small"
                  variant="outlined"
                  color="info"
                />
              </Stack>
            </div>
          )}

          {/* Memory Info */}
          <div className="/* TODO: Convert mb: 3 */">
            <Typography
              variant="h6"
              className="/* TODO: Convert mb: 2 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2"
            >
              <MemoryIcon /> Pamäť
            </Typography>
            {(
              performance as Performance & {
                memory?: { usedJSHeapSize: number; jsHeapSizeLimit: number };
              }
            ).memory ? (
              <Alert
                severity="info"
                className="/* TODO: Convert backgroundColor: #1e3a5f */ /* TODO: Convert color: white */"
              >
                <Typography variant="body2">
                  Použitá:{' '}
                  {Math.round(
                    (
                      performance as Performance & {
                        memory: {
                          usedJSHeapSize: number;
                          jsHeapSizeLimit: number;
                        };
                      }
                    ).memory.usedJSHeapSize /
                      1024 /
                      1024
                  )}{' '}
                  MB / Limit:{' '}
                  {Math.round(
                    (
                      performance as Performance & {
                        memory: {
                          usedJSHeapSize: number;
                          jsHeapSizeLimit: number;
                        };
                      }
                    ).memory.jsHeapSizeLimit /
                      1024 /
                      1024
                  )}{' '}
                  MB
                </Typography>
              </Alert>
            ) : (
              <Alert
                severity="warning"
                className="/* TODO: Convert backgroundColor: #5f4e1e */ /* TODO: Convert color: white */"
              >
                Memory API nie je dostupné
              </Alert>
            )}
          </div>

          <Divider className="/* TODO: Convert my: 2 */ /* TODO: Convert borderColor: #444 */" />

          {/* Logs Section */}
          <Typography variant="h6" className="/* TODO: Convert mb: 2 */">
            📋 Posledné logy ({logs.length})
          </Typography>

          {logs.length === 0 ? (
            <Alert
              severity="info"
              className="/* TODO: Convert backgroundColor: #1e3a5f */ /* TODO: Convert color: white */"
            >
              Žiadne logy k dispozícii
            </Alert>
          ) : (
            <div className="/* TODO: Convert maxHeight: 400px */ /* TODO: Convert overflow: auto */">
              {logs.map((log, index) => (
                <div key={index} className="/* TODO: Convert mb: 1 */">
                  <div
                    className="p-2 /* TODO: Convert backgroundColor: #2d2d2d */ rounded /* TODO: Convert border:
                        log.level === ERROR || log.level === CRITICAL
                          ? 1px solid #f44336
                          : 1px solid #444 */ /* TODO: Convert cursor: pointer */"
                    onClick={() =>
                      setExpandedLog(expandedLog === index ? null : index)
                    }
                  >
                    <div
                      className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-2 /* TODO: Convert mb: 0.5 */"
                    >
                      <Typography variant="caption" className="/* TODO: Convert color: #888 */">
                        {formatTime(log.timestamp)}
                      </Typography>
                      <Chip
                        label={`${getLevelEmoji(log.level)} ${log.level}`}
                        size="small"
                        color={getLevelColor(log.level)}
                        className="/* TODO: Convert minWidth: auto */"
                      />
                      <Chip
                        label={log.category}
                        size="small"
                        variant="outlined"
                        className="/* TODO: Convert color: #ccc */ /* TODO: Convert borderColor: #666 */"
                      />
                      {expandedLog === index ? (
                        <ExpandLessIcon />
                      ) : (
                        <ExpandMoreIcon />
                      )}
                    </div>
                    <Typography variant="body2" className="/* TODO: Convert fontWeight: 500 */">
                      {log.message}
                    </Typography>
                  </div>

                  <Collapse in={expandedLog === index}>
                    <div
                      className="/* TODO: Convert mt: 1 */ p-4 /* TODO: Convert backgroundColor: #1a1a1a */ rounded"
                    >
                      {log.data && (
                        <div className="/* TODO: Convert mb: 2 */">
                          <Typography
                            variant="caption"
                            className="/* TODO: Convert color: #888 */ /* TODO: Convert fontWeight: bold */"
                          >
                            Data:
                          </Typography>
                          <div
                            component="pre"
                            className="/* TODO: Convert fontSize: 0.75rem */ /* TODO: Convert color: #4fc3f7 */ /* TODO: Convert backgroundColor: #0d1421 */ p-2 rounded /* TODO: Convert overflow: auto */ /* TODO: Convert maxHeight: 200px */"
                          >
                            {JSON.stringify(log.data, null, 2)}
                          </div>
                        </div>
                      )}

                      {log.stackTrace && (
                        <div>
                          <Typography
                            variant="caption"
                            className="/* TODO: Convert color: #888 */ /* TODO: Convert fontWeight: bold */"
                          >
                            Stack Trace:
                          </Typography>
                          <div
                            component="pre"
                            className="/* TODO: Convert fontSize: 0.7rem */ /* TODO: Convert color: #ff9800 */ /* TODO: Convert backgroundColor: #0d1421 */ p-2 rounded /* TODO: Convert overflow: auto */ /* TODO: Convert maxHeight: 150px */"
                          >
                            {log.stackTrace}
                          </div>
                        </div>
                      )}
                    </div>
                  </Collapse>
                </div>
              ))}
            </div>
          )}
        </DialogContent>

        <DialogActions
          className="/* TODO: Convert backgroundColor: #2d2d2d */ /* TODO: Convert borderTop: 1px solid #444 */ gap-2"
        >
          <Button
            startIcon={<RefreshIcon />}
            onClick={refreshLogs}
            variant="outlined"
            size="small"
            className="/* TODO: Convert color: white */ /* TODO: Convert borderColor: #666 */"
          >
            Refresh
          </Button>
          <Button
            startIcon={<DownloadIcon />}
            onClick={handleDownloadLogs}
            variant="outlined"
            size="small"
            className="/* TODO: Convert color: white */ /* TODO: Convert borderColor: #666 */"
          >
            Download
          </Button>
          <Button
            startIcon={<ClearIcon />}
            onClick={handleClearLogs}
            variant="outlined"
            color="warning"
            size="small"
          >
            Clear
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default MobileDebugPanel;
