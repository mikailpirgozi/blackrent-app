import {
/* Tailwind classes used for styling */
  Close,
  Download,
  NavigateBefore,
  NavigateNext,
  PhotoLibrary,
  PlayArrow,
  ZoomIn,
} from '@mui/icons-material';
import { Chip,
  Dialog,
  DialogContent,
  DialogTitle,
  Grid,
  IconButton,
  Typography, } from '@mui/material';
import { useCallback, useEffect, useState } from 'react';

import type { ProtocolImage, ProtocolVideo } from '../../types';
import { getApiBaseUrl } from '../../utils/apiUrl';
import logger from '../../utils/logger';

interface ProtocolGalleryProps {
  open: boolean;
  onClose: () => void;
  images: ProtocolImage[];
  videos: ProtocolVideo[];
  title?: string;
}

export default function ProtocolGallery({
  open,
  onClose,
  images,
  videos,
  title = 'Gal√©ria protokolu',
}: ProtocolGalleryProps) {
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [zoom, setZoom] = useState(1);

  // Debugovanie - zobraz ƒço gal√©ria dost√°va
  useEffect(() => {
    // üêõ Debug len v development mode
    logger.debug('üîç ProtocolGallery received:', {
      open,
      imagesCount: images?.length || 0,
      videosCount: videos?.length || 0,
      title,
      images: images?.slice(0, 3).map(img => ({
        id: img.id,
        type: img.type,
        url: img.url?.substring(0, 50) + '...',
      })),
      videos: videos?.slice(0, 2).map(vid => ({
        id: vid.id,
        type: vid.type,
        url: vid.url?.substring(0, 50) + '...',
      })),
    });

    logger.debug('üîç ProtocolGallery state:', {
      open,
      isFullscreen,
      dialogShouldOpen: open && !isFullscreen,
    });
  }, [open, images, videos, title, isFullscreen]);

  const allMedia = [...(images || []), ...(videos || [])];
  const totalCount = allMedia.length;
  const currentMedia = allMedia[selectedIndex];

  // Reset zoom when changing media
  useEffect(() => {
    setZoom(1);
  }, [selectedIndex]);

  const handlePrevious = useCallback(() => {
    setSelectedIndex(prev => (prev === 0 ? totalCount - 1 : prev - 1));
  }, [totalCount]);

  const handleNext = useCallback(() => {
    setSelectedIndex(prev => (prev === totalCount - 1 ? 0 : prev + 1));
  }, [totalCount]);

  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (!open) return;

      console.log(
        'üéπ ProtocolGallery keyboard event:',
        event.key,
        'open:',
        open
      );

      switch (event.key) {
        case 'ArrowLeft':
          handlePrevious();
          break;
        case 'ArrowRight':
          handleNext();
          break;
        case 'Escape':
          console.log('üö™ Manual Escape pressed - closing gallery');
          onClose(); // Direct call, bypass MUI
          break;
        case '+':
        case '=':
          setZoom(prev => Math.min(prev + 0.25, 3));
          break;
        case '-':
          setZoom(prev => Math.max(prev - 0.25, 0.5));
          break;
      }
    },
    [open, onClose, handlePrevious, handleNext, setZoom]
  );

  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [handleKeyDown]);

  // Helper function to convert R2 URL to proxy URL
  const getProxyUrl = (r2Url: string | undefined): string => {
    try {
      // Kontrola ƒçi URL existuje
      if (!r2Url) {
        console.warn('‚ö†Ô∏è getProxyUrl: URL is undefined or null');
        return ''; // Vr√°≈• pr√°zdny string pre undefined URL
      }

      // Ak je to R2 URL, konvertuj na proxy
      if (r2Url.includes('r2.dev') || r2Url.includes('cloudflare.com')) {
        const urlParts = r2Url.split('/');
        // Zober v≈°etky ƒçasti po dom√©ne ako key (preskoƒç https:// a dom√©nu)
        const key = urlParts.slice(3).join('/');
        const apiBaseUrl = getApiBaseUrl();
        const proxyUrl = `${apiBaseUrl}/files/proxy/${encodeURIComponent(key)}`;
        console.log('üîÑ Converting R2 URL to proxy:', r2Url, '‚Üí', proxyUrl);
        return proxyUrl;
      }
      return r2Url; // Ak nie je R2 URL, vr√°≈• p√¥vodn√©
    } catch (error) {
      console.error('‚ùå Error converting to proxy URL:', error);
      return r2Url || ''; // Vr√°≈• p√¥vodn√© URL alebo pr√°zdny string
    }
  };

  const handleDownload = async () => {
    if (!currentMedia || !currentMedia.url) {
      console.warn('‚ö†Ô∏è handleDownload: currentMedia or URL is missing');
      alert('Nepodarilo sa stiahnu≈• s√∫bor - ch√Ωba URL');
      return;
    }

    try {
      // Pou≈æi proxy URL pre download - originalUrl len pre obr√°zky
      const downloadUrl = getProxyUrl(
        'originalUrl' in currentMedia && currentMedia.originalUrl
          ? currentMedia.originalUrl
          : currentMedia.url
      );
      if (!downloadUrl) {
        alert('Nepodarilo sa stiahnu≈• s√∫bor - neplatn√© URL');
        return;
      }

      const response = await fetch(downloadUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `protocol-media-${selectedIndex + 1}.${currentMedia.url.includes('video') ? 'mp4' : 'jpg'}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Chyba pri s≈•ahovan√≠:', error);
      alert('Nepodarilo sa stiahnu≈• s√∫bor');
    }
  };

  const handleImageClick = (index: number) => {
    setSelectedIndex(index);
    setIsFullscreen(true);
  };

  if (!open) return null;

  return (
    <>
      {/* Grid Gallery Modal */}
      <Dialog
        open={open && !isFullscreen}
        onClose={(event, reason) => {
          console.log('üö™ Dialog onClose triggered with reason:', reason);
          console.trace('üîç Dialog close stack trace:');

          // Only allow manual close (via close button), ignore all automatic closes
          if (reason === 'backdropClick' || reason === 'escapeKeyDown') {
            console.log('üõë Ignoring automatic close reason:', reason);
            return; // Block automatic close
          }

          // Only allow programmatic close
          onClose();
        }}
        maxWidth="lg"
        fullWidth
        disableEscapeKeyDown={true}
        BackdropProps={{
          onClick: e => {
            console.log('üõë Backdrop click blocked');
            e.stopPropagation();
          },
        }}
        PaperProps={{
          sx: {
            backgroundColor: 'rgba(0, 0, 0, 0.9)',
            color: 'white',
            minHeight: '80vh',
          },
        }}
      >
        <DialogTitle
          className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ /* TODO: Convert borderBottom: 1px solid rgba(255 */"
        >
          <div className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ gap-4">
            <PhotoLibrary />
            <Typography variant="h6">
              {title} ({totalCount} polo≈æiek)
            </Typography>
          </div>
          <IconButton onClick={onClose} className="/* TODO: Convert color: white */">
            <Close />
          </IconButton>
        </DialogTitle>

        <DialogContent className="p-4">
          {totalCount === 0 ? (
            <div
              className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ /* TODO: Convert alignItems: center */ /* TODO: Convert height: 200px */"
            >
              <Typography variant="h6" color="rgba(255, 255, 255, 0.7)">
                ≈Ωiadne m√©di√° na zobrazenie
              </Typography>
            </div>
          ) : (
            <Grid container spacing={2}>
              {/* Images */}
              {images.map((image, index) => {
                console.log(`üñºÔ∏è Rendering image ${index}:`, {
                  id: image.id,
                  url: image.url?.substring(0, 100) + '...',
                  originalUrl: image.originalUrl?.substring(0, 100) + '...',
                  type: image.type,
                  hasUrl: !!image.url,
                  hasOriginalUrl: !!image.originalUrl,
                  urlType: typeof image.url,
                });

                return (
                  <Grid
                    item
                    xs={12}
                    sm={6}
                    md={4}
                    lg={3}
                    key={image.id || index}
                  >
                    <div
                      sx={{
                        position: 'relative',
                        borderRadius: 2,
                        overflow: 'hidden',
                        cursor: 'pointer',
                        border: '2px solid transparent',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          borderColor: 'primary.main',
                          transform: 'scale(1.02)',
                        },
                      }}
                      onClick={() => handleImageClick(index)}
                    >
                      {image.url ? (
                        <img
                          src={image.originalUrl || image.url}
                          alt={image.description || `Obr√°zok ${index + 1}`}
                          style={{
                            width: '100%',
                            height: '200px',
                            objectFit: 'cover',
                            display: 'block',
                          }}
                          onError={e => {
                            console.error(
                              '‚ùå Chyba naƒç√≠tania obr√°zka z R2:',
                              image.originalUrl || image.url
                            );

                            // Sk√∫s proxy URL ako fallback
                            const img = e.target as HTMLImageElement;
                            if (!img.src.includes('/api/files/proxy/')) {
                              console.log(
                                'üîÑ Sk√∫≈°am proxy URL ako fallback...'
                              );
                              img.src = getProxyUrl(
                                image.originalUrl || image.url
                              );
                            } else {
                              // Ak ani proxy URL nefunguje, skry obr√°zok
                              img.style.display = 'none';
                              console.error(
                                '‚ùå Ani proxy URL nefunguje, skr√Ωvam obr√°zok'
                              );
                            }
                          }}
                          onLoad={() => {
                            console.log(
                              '‚úÖ Obr√°zok √∫spe≈°ne naƒç√≠tan√Ω:',
                              image.originalUrl || image.url
                            );
                          }}
                        />
                      ) : (
                        <div
                          className="/* TODO: Convert width: 100% */ /* TODO: Convert height: 200px */ /* TODO: Convert backgroundColor: rgba(255 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert border: 2px dashed rgba(255 */"
                        >
                          <Typography
                            variant="body2"
                            color="rgba(255, 255, 255, 0.5)"
                          >
                            Ch√Ωba URL
                          </Typography>
                        </div>
                      )}

                      {/* Overlay s inform√°ciami */}
                      <div
                        className="/* TODO: Convert position: absolute */ /* TODO: Convert bottom: 0 */ /* TODO: Convert left: 0 */ /* TODO: Convert right: 0 */ /* TODO: Convert background:
                            linear-gradient(transparent */ p-2"
                      >
                        <Typography variant="caption" color="white">
                          {image.description || `Obr√°zok ${index + 1}`}
                        </Typography>
                        <Chip
                          label={image.type}
                          size="small"
                          className="/* TODO: Convert ml: 1 */ /* TODO: Convert backgroundColor: rgba(255 */ /* TODO: Convert color: white */"
                        />
                      </div>
                    </div>
                  </Grid>
                );
              })}

              {/* Videos */}
              {videos.map((video, index) => (
                <Grid
                  item
                  xs={12}
                  sm={6}
                  md={4}
                  lg={3}
                  key={video.id || `video-${index}`}
                >
                  <div
                    sx={{
                      position: 'relative',
                      borderRadius: 2,
                      overflow: 'hidden',
                      cursor: 'pointer',
                      border: '2px solid transparent',
                      transition: 'all 0.2s ease',
                      '&:hover': {
                        borderColor: 'primary.main',
                        transform: 'scale(1.02)',
                      },
                    }}
                    onClick={() => handleImageClick(images.length + index)}
                  >
                    {video.url ? (
                      <video
                        src={video.url}
                        style={{
                          width: '100%',
                          height: '200px',
                          objectFit: 'cover',
                          display: 'block',
                        }}
                        onError={e => {
                          console.error('Chyba naƒç√≠tania videa:', video.url);
                          (e.target as HTMLVideoElement).style.display = 'none';
                        }}
                      />
                    ) : (
                      <div
                        className="/* TODO: Convert width: 100% */ /* TODO: Convert height: 200px */ /* TODO: Convert backgroundColor: rgba(255 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert border: 2px dashed rgba(255 */"
                      >
                        <Typography
                          variant="body2"
                          color="rgba(255, 255, 255, 0.5)"
                        >
                          Ch√Ωba URL
                        </Typography>
                      </div>
                    )}

                    {/* Play ikona */}
                    <div
                      className="/* TODO: Convert position: absolute */ /* TODO: Convert top: 50% */ /* TODO: Convert left: 50% */ /* TODO: Convert transform: translate(-50% */ /* TODO: Convert backgroundColor: rgba(0 */ /* TODO: Convert borderRadius: 50% */ /* TODO: Convert width: 48 */ /* TODO: Convert height: 48 */ /* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */"
                    >
                      <PlayArrow className="/* TODO: Convert color: white */ /* TODO: Convert fontSize: 24 */" />
                    </div>

                    {/* Overlay s inform√°ciami */}
                    <div
                      className="/* TODO: Convert position: absolute */ /* TODO: Convert bottom: 0 */ /* TODO: Convert left: 0 */ /* TODO: Convert right: 0 */ /* TODO: Convert background:
                          linear-gradient(transparent */ p-2"
                    >
                      <Typography variant="caption" color="white">
                        {video.description || `Video ${index + 1}`}
                      </Typography>
                      <Chip
                        label={video.type}
                        size="small"
                        className="/* TODO: Convert ml: 1 */ /* TODO: Convert backgroundColor: rgba(255 */ /* TODO: Convert color: white */"
                      />
                    </div>
                  </div>
                </Grid>
              ))}
            </Grid>
          )}
        </DialogContent>
      </Dialog>

      {/* Fullscreen Lightbox Modal */}
      <Dialog
        open={isFullscreen}
        onClose={() => setIsFullscreen(false)}
        maxWidth={false}
        fullScreen
        PaperProps={{
          sx: {
            backgroundColor: 'rgba(0, 0, 0, 0.95)',
            color: 'white',
          },
        }}
      >
        {/* Header */}
        <div
          className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ p-4 /* TODO: Convert borderBottom: 1px solid rgba(255 */"
        >
          <Typography variant="h6">
            {currentMedia?.description || `M√©dium ${selectedIndex + 1}`}
          </Typography>
          <div className="/* TODO: Convert display: flex */ gap-2">
            <IconButton
              onClick={() => setZoom(prev => Math.max(prev - 0.25, 0.5))}
              className="/* TODO: Convert color: white */"
              disabled={zoom <= 0.5}
            >
              <ZoomIn className="/* TODO: Convert transform: scaleX(-1) */" />
            </IconButton>
            <IconButton
              onClick={() => setZoom(prev => Math.min(prev + 0.25, 3))}
              className="/* TODO: Convert color: white */"
              disabled={zoom >= 3}
            >
              <ZoomIn />
            </IconButton>
            <IconButton onClick={handleDownload} className="/* TODO: Convert color: white */">
              <Download />
            </IconButton>
            <IconButton
              onClick={() => setIsFullscreen(false)}
              className="/* TODO: Convert color: white */"
            >
              <Close />
            </IconButton>
          </div>
        </div>

        {/* Media Display */}
        <div
          className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ /* TODO: Convert alignItems: center */ /* TODO: Convert height: calc(100vh - 120px) */ p-4 /* TODO: Convert position: relative */"
        >
          {/* Navigation Buttons */}
          {totalCount > 1 && (
            <>
              <IconButton
                onClick={handlePrevious}
                sx={{
                  position: 'absolute',
                  left: 16,
                  top: '50%',
                  transform: 'translateY(-50%)',
                  backgroundColor: 'rgba(0,0,0,0.5)',
                  color: 'white',
                  '&:hover': { backgroundColor: 'rgba(0,0,0,0.7)' },
                }}
              >
                <NavigateBefore />
              </IconButton>
              <IconButton
                onClick={handleNext}
                sx={{
                  position: 'absolute',
                  right: 16,
                  top: '50%',
                  transform: 'translateY(-50%)',
                  backgroundColor: 'rgba(0,0,0,0.5)',
                  color: 'white',
                  '&:hover': { backgroundColor: 'rgba(0,0,0,0.7)' },
                }}
              >
                <NavigateNext />
              </IconButton>
            </>
          )}

          {/* Media Content */}
          <div
            className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: center */ /* TODO: Convert alignItems: center */ /* TODO: Convert width: 100% */ /* TODO: Convert height: 100% */"
          >
            {currentMedia && (
              <>
                {selectedIndex < images.length ? (
                  // Image
                  currentMedia.url ? (
                    <img
                      src={
                        'originalUrl' in currentMedia &&
                        currentMedia.originalUrl
                          ? currentMedia.originalUrl
                          : currentMedia.url
                      }
                      alt={currentMedia.description || 'Obr√°zok'}
                      style={{
                        maxWidth: `${100 * zoom}%`,
                        maxHeight: `${100 * zoom}%`,
                        objectFit: 'contain',
                        transition: 'transform 0.2s ease',
                      }}
                      onError={e => {
                        console.error(
                          '‚ùå Chyba naƒç√≠tania obr√°zka cez proxy:',
                          getProxyUrl(
                            'originalUrl' in currentMedia &&
                              currentMedia.originalUrl
                              ? currentMedia.originalUrl
                              : currentMedia.url
                          )
                        );
                        console.error('‚ùå P√¥vodn√© URL:', currentMedia.url);

                        // Sk√∫s naƒç√≠ta≈• priamo z R2 ako fallback
                        const img = e.target as HTMLImageElement;
                        if (!img.src.includes('r2.dev')) {
                          console.log(
                            'üîÑ Sk√∫≈°am priamy R2 URL ako fallback...'
                          );
                          img.src =
                            'originalUrl' in currentMedia &&
                            currentMedia.originalUrl
                              ? currentMedia.originalUrl
                              : currentMedia.url;
                        } else {
                          // Ak ani R2 URL nefunguje, skry obr√°zok
                          img.style.display = 'none';
                          console.error(
                            '‚ùå Ani R2 URL nefunguje, skr√Ωvam obr√°zok'
                          );
                        }
                      }}
                    />
                  ) : (
                    <div
                      className="/* TODO: Convert textAlign: center */ /* TODO: Convert color: rgba(255 */"
                    >
                      <Typography variant="h6">Ch√Ωba URL obr√°zka</Typography>
                    </div>
                  )
                ) : // Video
                currentMedia.url ? (
                  <video
                    src={currentMedia.url}
                    controls
                    style={{
                      maxWidth: `${100 * zoom}%`,
                      maxHeight: `${100 * zoom}%`,
                    }}
                    onError={e => {
                      console.error('Chyba naƒç√≠tania videa:', currentMedia.url);
                      (e.target as HTMLVideoElement).style.display = 'none';
                    }}
                  />
                ) : (
                  <div
                    className="/* TODO: Convert textAlign: center */ /* TODO: Convert color: rgba(255 */"
                  >
                    <Typography variant="h6">Ch√Ωba URL videa</Typography>
                  </div>
                )}
              </>
            )}
          </div>
        </div>

        {/* Footer with counter */}
        {totalCount > 1 && (
          <div
            className="p-4 /* TODO: Convert textAlign: center */ /* TODO: Convert borderTop: 1px solid rgba(255 */"
          >
            <Typography variant="body2" color="rgba(255, 255, 255, 0.7)">
              {selectedIndex + 1} z {totalCount}
            </Typography>
          </div>
        )}
      </Dialog>
    </>
  );
}
