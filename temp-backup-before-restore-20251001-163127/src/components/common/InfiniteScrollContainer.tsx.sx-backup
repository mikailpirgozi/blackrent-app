/**
 * üîÑ INFINITE SCROLL CONTAINER
 *
 * Booking.com ≈°t√Ωl infinite scrolling wrapper:
 * - Smooth loading animations
 * - Progress indicator
 * - Error handling
 * - Mobile optimized
 */

import { CircularProgress,
/* Tailwind classes used for styling */
  LinearProgress,
  Typography, } from '@mui/material';
import React from 'react';
import InfiniteScroll from 'react-infinite-scroll-component';

interface InfiniteScrollContainerProps<T = unknown> {
  // Data
  items: T[];
  hasMore: boolean;
  isLoading: boolean;

  // Actions
  loadMore: () => void;

  // Render
  renderItem: (item: T, index: number) => React.ReactNode;

  // Config
  height?: number | string;
  itemHeight?: number;
  showProgress?: boolean;
  emptyMessage?: string;
  loadingMessage?: string;
  endMessage?: string;

  // Stats
  totalItems?: number;
  progress?: number;
}

export const InfiniteScrollContainer = <T,>({
  items,
  hasMore,
  isLoading,
  loadMore,
  renderItem,
  height = 600,
  itemHeight = 120,
  showProgress = true,
  emptyMessage = '≈Ωiadne polo≈æky',
  loadingMessage = 'Naƒç√≠tavam...',
  endMessage = '‚úÖ V≈°etko naƒç√≠tan√©',
  totalItems,
  progress = 0,
}: InfiniteScrollContainerProps<T>) => {
  // üîÑ Loading component
  const LoadingComponent = () => (
    <div
      className="p-4 /* TODO: Convert display: flex */ /* TODO: Convert flexDirection: column */ /* TODO: Convert alignItems: center */ gap-4"
    >
      <CircularProgress size={24} />
      <Typography variant="body2" color="text.secondary">
        {loadingMessage}
      </Typography>
    </div>
  );

  // ‚úÖ End message component
  const EndComponent = () => (
    <div className="p-6 /* TODO: Convert textAlign: center */">
      <Typography
        variant="body2"
        color="text.secondary"
        className="/* TODO: Convert fontWeight: 500 */"
      >
        {endMessage}
      </Typography>
      {totalItems && (
        <Typography
          variant="caption"
          color="text.secondary"
          className="/* TODO: Convert mt: 1 */ /* TODO: Convert display: block */"
        >
          Zobrazen√Ωch {items.length} z {totalItems} polo≈æiek
        </Typography>
      )}
    </div>
  );

  // üìä Progress bar
  const ProgressBar = () => {
    if (!showProgress || !totalItems) return null;

    return (
      <div className="p-4 /* TODO: Convert borderBottom: 1px solid #e0e0e0 */">
        <div
          className="/* TODO: Convert display: flex */ /* TODO: Convert justifyContent: space-between */ /* TODO: Convert alignItems: center */ /* TODO: Convert mb: 1 */"
        >
          <Typography variant="caption" color="text.secondary">
            Naƒç√≠tan√©: {items.length} / {totalItems}
          </Typography>
          <Typography variant="caption" color="text.secondary">
            {progress}%
          </Typography>
        </div>
        <LinearProgress
          variant="determinate"
          value={progress}
          sx={{
            height: 4,
            borderRadius: 2,
            backgroundColor: '#f0f0f0',
            '& .MuiLinearProgress-bar': {
              backgroundColor: '#1976d2',
            },
          }}
        />
      </div>
    );
  };

  // üì± Empty state
  if (items.length === 0 && !isLoading) {
    return (
      <div
        className="/* TODO: Convert display: flex */ /* TODO: Convert alignItems: center */ /* TODO: Convert justifyContent: center */ /* TODO: Convert flexDirection: column */ gap-4 /* TODO: Convert color: text.secondary */"
      >
        <Typography variant="h6">üìã {emptyMessage}</Typography>
        <Typography variant="body2">
          Sk√∫ste zmeni≈• filter alebo vyhƒæad√°vanie
        </Typography>
      </div>
    );
  }

  return (
    <div
      className="/* TODO: Convert border: 1px solid #e0e0e0 */ rounded-md /* TODO: Convert overflow: hidden */"
    >
      {/* Progress bar */}
      <ProgressBar />

      {/* Infinite scroll content */}
      <InfiniteScroll
        dataLength={items.length}
        next={loadMore}
        hasMore={hasMore}
        loader={<LoadingComponent />}
        endMessage={<EndComponent />}
        height={
          typeof height === 'number'
            ? height - (showProgress && totalItems ? 60 : 0)
            : height
        }
        style={{
          padding: '8px',
          overflowX: 'hidden', // Prevent horizontal scroll
        }}
        // üöÄ Performance optimizations
        scrollThreshold={0.8} // Load more at 80% scroll
        pullDownToRefreshThreshold={50}
      >
        {items.map((item, index) => (
          <div
            key={(item as { id?: string | number }).id || index}
            sx={{
              minHeight: itemHeight,
              marginBottom: 1,
              '&:last-child': {
                marginBottom: 0,
              },
            }}
          >
            {renderItem(item, index)}
          </div>
        ))}
      </InfiniteScroll>
    </div>
  );
};

// üéØ Specialized containers for different data types
interface RentalScrollContainerProps
  extends Omit<
    InfiniteScrollContainerProps,
    'emptyMessage' | 'loadingMessage'
  > {}

export const RentalScrollContainer: React.FC<
  RentalScrollContainerProps
> = props => (
  <InfiniteScrollContainer
    {...props}
    emptyMessage="≈Ωiadne pren√°jmy"
    loadingMessage="Naƒç√≠tavam pren√°jmy..."
    endMessage="‚úÖ V≈°etky pren√°jmy naƒç√≠tan√©"
    itemHeight={140}
  />
);

export const VehicleScrollContainer: React.FC<
  RentalScrollContainerProps
> = props => (
  <InfiniteScrollContainer
    {...props}
    emptyMessage="≈Ωiadne vozidl√°"
    loadingMessage="Naƒç√≠tavam vozidl√°..."
    endMessage="‚úÖ V≈°etky vozidl√° naƒç√≠tan√©"
    itemHeight={120}
  />
);

export const CustomerScrollContainer: React.FC<
  RentalScrollContainerProps
> = props => (
  <InfiniteScrollContainer
    {...props}
    emptyMessage="≈Ωiadni z√°kazn√≠ci"
    loadingMessage="Naƒç√≠tavam z√°kazn√≠kov..."
    endMessage="‚úÖ V≈°etci z√°kazn√≠ci naƒç√≠tan√≠"
    itemHeight={100}
  />
);

export default InfiniteScrollContainer;
