// 📝 Lazy Edit Dialog - Heavy component for performance testing
// This represents a complex form component that should be lazy loaded

import { Dialog,
/* Tailwind classes used for styling */
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Typography, CircularProgress, } from '@mui/material';
import React, { useState, useEffect } from 'react';

interface LazyEditDialogProps {
  itemId: string;
  open: boolean;
  onClose: () => void;
}

const LazyEditDialog: React.FC<LazyEditDialogProps> = ({
  itemId,
  open,
  onClose,
}) => {
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    title: '',
    subtitle: '',
    category: '',
    status: 'active',
    description: '',
  });

  // Simulate loading heavy form data
  useEffect(() => {
    if (open) {
      setLoading(true);
      // Simulate API call delay
      setTimeout(() => {
        setFormData({
          title: `Item ${itemId}`,
          subtitle: 'Sample subtitle',
          category: 'Sample category',
          status: 'active',
          description: 'Sample description',
        });
        setLoading(false);
      }, 500);
    }
  }, [open, itemId]);

  const handleSave = () => {
    // Simulate save operation
    console.log('Saving form data:', formData);
    onClose();
  };

  if (loading) {
    return (
      <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
        <DialogContent>
          <div
            display="flex"
            justifyContent="center"
            alignItems="center"
            py={4}
          >
            <CircularProgress />
            <Typography className="/* TODO: Convert ml: 2 */">Načítavam formulár...</Typography>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>Upraviť položku</DialogTitle>
      <DialogContent>
        <Grid container spacing={3} className="/* TODO: Convert mt: 1 */">
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Názov"
              value={formData.title}
              onChange={e =>
                setFormData({ ...formData, title: e.target.value })
              }
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Podtitul"
              value={formData.subtitle}
              onChange={e =>
                setFormData({ ...formData, subtitle: e.target.value })
              }
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Kategória"
              value={formData.category}
              onChange={e =>
                setFormData({ ...formData, category: e.target.value })
              }
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>Status</InputLabel>
              <Select
                value={formData.status}
                label="Status"
                onChange={e =>
                  setFormData({ ...formData, status: e.target.value })
                }
              >
                <MenuItem value="active">Aktívny</MenuItem>
                <MenuItem value="inactive">Neaktívny</MenuItem>
                <MenuItem value="pending">Čakajúci</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              multiline
              rows={4}
              label="Popis"
              value={formData.description}
              onChange={e =>
                setFormData({ ...formData, description: e.target.value })
              }
            />
          </Grid>
        </Grid>
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose}>Zrušiť</Button>
        <Button onClick={handleSave} variant="contained">
          Uložiť
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default LazyEditDialog;
