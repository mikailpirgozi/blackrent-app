/**
 * üß™ UNIT TESTY PRE RENTAL DAYS CALCULATOR
 *
 * Testuje v≈°etky scen√°re z RENTAL_DAYS_CALCULATION_ANALYSIS.md
 */

import { describe, expect, it } from 'vitest';
import {
  calculateRentalDays,
  calculateRentalDaysLegacy,
  compareRentalDaysImplementations,
} from '../rentalDaysCalculator';

describe('calculateRentalDays', () => {
  describe('‚úÖ Z√°kladn√© scen√°re podƒæa spr√°vnej logiky', () => {
    it('1.1. 10:00 ‚Üí 2.1. 10:00 = 1 de≈à (presne 24h)', () => {
      const startDate = new Date('2024-01-01T10:00:00');
      const endDate = new Date('2024-01-02T10:00:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(1);
    });

    it('1.1. 10:00 ‚Üí 3.1. 10:00 = 2 dni (presne 48h)', () => {
      const startDate = new Date('2024-01-01T10:00:00');
      const endDate = new Date('2024-01-03T10:00:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(2);
    });

    it('1.1. 10:00 ‚Üí 2.1. 10:01 = 2 dni (24h + 1min)', () => {
      const startDate = new Date('2024-01-01T10:00:00');
      const endDate = new Date('2024-01-02T10:01:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(2);
    });

    it('1.1. 10:00 ‚Üí 3.1. 10:01 = 3 dni (48h + 1min)', () => {
      const startDate = new Date('2024-01-01T10:00:00');
      const endDate = new Date('2024-01-03T10:01:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(3);
    });

    it('1.1. 10:00 ‚Üí 1.1. 20:00 = 1 de≈à (ten ist√Ω de≈à)', () => {
      const startDate = new Date('2024-01-01T10:00:00');
      const endDate = new Date('2024-01-01T20:00:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(1);
    });

    it('1.1. 10:00 ‚Üí 1.1. 10:00 = 1 de≈à (presne ten ist√Ω ƒças)', () => {
      const startDate = new Date('2024-01-01T10:00:00');
      const endDate = new Date('2024-01-01T10:00:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(1);
    });
  });

  describe('üîç Hraniƒçn√© pr√≠pady', () => {
    it('Rovnak√Ω ƒças a d√°tum = 1 de≈à', () => {
      const date = new Date('2024-09-08T10:00:00');

      expect(calculateRentalDays(date, date)).toBe(1);
    });

    it('Enddate sk√¥r ako startDate = 0 dn√≠', () => {
      const startDate = new Date('2024-09-10T10:00:00');
      const endDate = new Date('2024-09-08T10:00:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(0);
    });

    it('Minim√°lny rozdiel (1 milisekunda) = 2 dni', () => {
      const startDate = new Date('2024-09-08T10:00:00.000');
      const endDate = new Date('2024-09-08T10:00:00.001');

      expect(calculateRentalDays(startDate, endDate)).toBe(1); // Ten ist√Ω de≈à
    });

    it('Presne 24 hod√≠n = 1 de≈à', () => {
      const startDate = new Date('2024-09-08T10:00:00');
      const endDate = new Date('2024-09-09T10:00:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(1);
    });

    it('24 hod√≠n + 1 min√∫ta = 2 dni', () => {
      const startDate = new Date('2024-09-08T10:00:00');
      const endDate = new Date('2024-09-09T10:01:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(2);
    });
  });

  describe('‚ùå Valid√°cia ch√Ωb', () => {
    it('Ch√Ωba startDate', () => {
      expect(() =>
        calculateRentalDays(null as unknown as Date, new Date())
      ).toThrow('calculateRentalDays: startDate a endDate s√∫ povinn√©');
    });

    it('Ch√Ωba endDate', () => {
      expect(() =>
        calculateRentalDays(new Date(), null as unknown as Date)
      ).toThrow('calculateRentalDays: startDate a endDate s√∫ povinn√©');
    });

    it('StartDate nie je Date objekt', () => {
      expect(() =>
        calculateRentalDays('2024-09-08' as unknown as Date, new Date())
      ).toThrow(
        'calculateRentalDays: startDate a endDate musia by≈• Date objekty'
      );
    });

    it('EndDate nie je Date objekt', () => {
      expect(() =>
        calculateRentalDays(new Date(), '2024-09-08' as unknown as Date)
      ).toThrow(
        'calculateRentalDays: startDate a endDate musia by≈• Date objekty'
      );
    });

    it('Neplatn√Ω startDate', () => {
      expect(() =>
        calculateRentalDays(new Date('invalid'), new Date())
      ).toThrow('calculateRentalDays: neplatn√© d√°tumy');
    });

    it('Neplatn√Ω endDate', () => {
      expect(() =>
        calculateRentalDays(new Date(), new Date('invalid'))
      ).toThrow('calculateRentalDays: neplatn√© d√°tumy');
    });
  });

  describe('üîÑ Re√°lne scen√°re z BlackRent', () => {
    it('Typick√Ω v√≠kendov√Ω pren√°jom - Piatok 18:00 ‚Üí Nedeƒæa 18:00', () => {
      const startDate = new Date('2024-09-06T18:00:00'); // Piatok
      const endDate = new Date('2024-09-08T18:00:00'); // Nedeƒæa

      expect(calculateRentalDays(startDate, endDate)).toBe(2);
    });

    it('T√Ω≈ædenn√Ω pren√°jom - Pondelok 09:00 ‚Üí Pondelok 09:00', () => {
      const startDate = new Date('2024-09-02T09:00:00'); // Pondelok
      const endDate = new Date('2024-09-09T09:00:00'); // Nasleduj√∫ci pondelok

      expect(calculateRentalDays(startDate, endDate)).toBe(7);
    });

    it('Kr√°tky pren√°jom - 10:00 ‚Üí 14:00 ten ist√Ω de≈à', () => {
      const startDate = new Date('2024-09-08T10:00:00');
      const endDate = new Date('2024-09-08T14:00:00');

      expect(calculateRentalDays(startDate, endDate)).toBe(1);
    });

    it('Cez v√≠kend s predƒ∫≈æen√≠m - Piatok 18:00 ‚Üí Pondelok 08:00', () => {
      const startDate = new Date('2024-09-06T18:00:00'); // Piatok
      const endDate = new Date('2024-09-09T08:00:00'); // Pondelok

      expect(calculateRentalDays(startDate, endDate)).toBe(3);
    });
  });
});

describe('calculateRentalDaysLegacy', () => {
  const startDate = new Date('2024-09-08T10:00:00');
  const endDate = new Date('2024-09-10T10:01:00');

  it('V1 (RentalForm) logika', () => {
    const result = calculateRentalDaysLegacy(startDate, endDate, 'v1');
    expect(typeof result).toBe('number');
    expect(result).toBeGreaterThan(0);
  });

  it('V2 (CustomerHistory) logika', () => {
    const result = calculateRentalDaysLegacy(startDate, endDate, 'v2');
    expect(typeof result).toBe('number');
    expect(result).toBeGreaterThan(0);
  });

  it('V3 (Statistics) logika', () => {
    const result = calculateRentalDaysLegacy(startDate, endDate, 'v3');
    expect(typeof result).toBe('number');
    expect(result).toBeGreaterThan(0);
  });

  it('Nezn√°ma verzia vyhod√≠ chybu', () => {
    expect(() =>
      calculateRentalDaysLegacy(startDate, endDate, 'v4' as never)
    ).toThrow('Nezn√°ma verzia: v4');
  });
});

describe('compareRentalDaysImplementations', () => {
  it('Porovn√°va v≈°etky implement√°cie', () => {
    const startDate = new Date('2024-09-08T10:00:00');
    const endDate = new Date('2024-09-10T10:01:00');

    const comparison = compareRentalDaysImplementations(startDate, endDate);

    expect(comparison).toHaveProperty('new');
    expect(comparison).toHaveProperty('legacy');
    expect(comparison).toHaveProperty('differences');
    expect(comparison).toHaveProperty('isConsistent');

    expect(comparison.legacy).toHaveProperty('v1_RentalForm');
    expect(comparison.legacy).toHaveProperty('v2_CustomerHistory');
    expect(comparison.legacy).toHaveProperty('v3_Statistics');

    expect(comparison.differences).toHaveProperty('v1_diff');
    expect(comparison.differences).toHaveProperty('v2_diff');
    expect(comparison.differences).toHaveProperty('v3_diff');

    expect(typeof comparison.isConsistent).toBe('boolean');
  });

  it('Identifikuje nekonzistentn√© v√Ωsledky', () => {
    const startDate = new Date('2024-09-08T10:00:00');
    const endDate = new Date('2024-09-10T10:01:00');

    const comparison = compareRentalDaysImplementations(startDate, endDate);

    // Oƒçak√°vame ≈æe legacy implement√°cie bud√∫ nekonzistentn√©
    expect(comparison.isConsistent).toBe(false);
  });
});

describe('üéØ Kritick√© scen√°re z anal√Ωzy', () => {
  it('Email parsing scen√°r: 8.9 08:00 ‚Üí 10.9 17:00 = 3 dni', () => {
    const startDate = new Date('2024-09-08T08:00:00');
    const endDate = new Date('2024-09-10T17:00:00');

    expect(calculateRentalDays(startDate, endDate)).toBe(3);
  });

  it('Manu√°lne prid√°vanie scen√°r: 8.9 08:00 ‚Üí 10.9 17:00 = 3 dni (opraven√©)', () => {
    const startDate = new Date('2024-09-08T08:00:00');
    const endDate = new Date('2024-09-10T17:00:00');

    // Nov√° implement√°cia by mala da≈• rovnak√Ω v√Ωsledok ako email parsing
    expect(calculateRentalDays(startDate, endDate)).toBe(3);
  });

  it('Porovnanie s legacy implement√°ciami pre kritick√Ω scen√°r', () => {
    const startDate = new Date('2024-09-08T08:00:00');
    const endDate = new Date('2024-09-10T17:00:00');

    const comparison = compareRentalDaysImplementations(startDate, endDate);

    // Nov√° implement√°cia
    expect(comparison.new).toBe(3);

    // Legacy implement√°cie m√¥≈æu da≈• in√© v√Ωsledky
    // Comparison debug removed for production
  });
});
