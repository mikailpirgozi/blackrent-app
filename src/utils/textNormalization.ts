/**
 * üî§ TEXT NORMALIZATION UTILITIES
 *
 * Utility funkcie pre normaliz√°ciu textu - odstr√°nenie diakritiky,
 * konverzia na mal√© p√≠smen√° pre vyhƒæad√°vanie bez ohƒæadu na diakritiku
 */

/**
 * Normalizuje text - odstr√°ni diakritiku a konvertuje na mal√© p√≠smen√°
 * @param text - text na normaliz√°ciu
 * @returns normalizovan√Ω text bez diakritiky a mal√Ωmi p√≠smenami
 */
export function normalizeText(text: string | null | undefined): string {
  if (!text) return '';

  return text
    .toLowerCase()
    .normalize('NFD') // Rozlo≈æ√≠ znaky s diakritikou na z√°kladn√© znaky + diakritick√© znaƒçky
    .replace(/[\u0300-\u036f]/g, '') // Odstr√°ni diakritick√© znaƒçky
    .trim();
}

/**
 * Kontroluje ƒçi text obsahuje hƒæadan√Ω v√Ωraz (bez ohƒæadu na diakritiku a veƒækos≈• p√≠smen)
 * @param text - text v ktorom hƒæad√°me
 * @param searchTerm - hƒæadan√Ω v√Ωraz
 * @returns true ak text obsahuje hƒæadan√Ω v√Ωraz
 */
export function textContains(
  text: string | null | undefined,
  searchTerm: string
): boolean {
  if (!text || !searchTerm) return false;

  const normalizedText = normalizeText(text);
  const normalizedSearch = normalizeText(searchTerm);

  return normalizedText.includes(normalizedSearch);
}

/**
 * Kontroluje ƒçi text presne zodpoved√° hƒæadan√©mu v√Ωrazu (bez ohƒæadu na diakritiku a veƒækos≈• p√≠smen)
 * @param text - text na porovnanie
 * @param searchTerm - hƒæadan√Ω v√Ωraz
 * @returns true ak texty sa zhoduj√∫
 */
export function textEquals(
  text: string | null | undefined,
  searchTerm: string
): boolean {
  if (!text || !searchTerm) return false;

  const normalizedText = normalizeText(text);
  const normalizedSearch = normalizeText(searchTerm);

  return normalizedText === normalizedSearch;
}

/**
 * Vyhƒæad√°va v poli textov (bez ohƒæadu na diakritiku a veƒækos≈• p√≠smen)
 * @param texts - pole textov na prehƒæadanie
 * @param searchTerm - hƒæadan√Ω v√Ωraz
 * @returns true ak niektor√Ω z textov obsahuje hƒæadan√Ω v√Ωraz
 */
export function searchInTexts(
  texts: (string | null | undefined)[],
  searchTerm: string
): boolean {
  if (!searchTerm) return false;

  return texts.some(text => textContains(text, searchTerm));
}

/**
 * Pr√≠klady pou≈æitia:
 *
 * normalizeText('≈†vantnerov√°') // 'svantnerova'
 * normalizeText('ƒΩUBO≈†') // 'lubos'
 * textContains('≈†vantnerov√°', 'svatner') // true
 * textContains('ƒΩUBO≈† NOV√ÅK', 'lubos') // true
 * searchInTexts(['≈†vantnerov√°', 'Bratislava'], 'svatner') // true
 */
