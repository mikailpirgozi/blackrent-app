// Utility funkcie pre pr√°cu s cookies a persistent storage

export class StorageManager {
  private static COOKIE_PREFIX = 'blackrent_';
  private static COOKIE_EXPIRY_DAYS = 90; // 3 mesiace

  /**
   * Nastav√≠ cookie s expiration time
   */
  static setCookie(name: string, value: string, days: number = this.COOKIE_EXPIRY_DAYS): void {
    try {
      const expires = new Date();
      expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
      const expiresString = expires.toUTCString();
      
      // Railway podporuje secure cookies len na HTTPS
      const isSecure = window.location.protocol === 'https:';
      const cookieString = `${this.COOKIE_PREFIX}${name}=${encodeURIComponent(value)};expires=${expiresString};path=/;${isSecure ? 'secure;' : ''}samesite=lax`;
      
      document.cookie = cookieString;
      console.log(`üç™ Cookie nastaven√©: ${name}, secure: ${isSecure}`);
    } catch (error) {
      console.error('Chyba pri nastavovan√≠ cookie:', error);
    }
  }

  /**
   * Z√≠ska cookie hodnotu
   */
  static getCookie(name: string): string | null {
    try {
      const cookieName = `${this.COOKIE_PREFIX}${name}=`;
      const cookies = document.cookie.split(';');
      
      for (let i = 0; i < cookies.length; i++) {
        let cookie = cookies[i].trim();
        if (cookie.indexOf(cookieName) === 0) {
          return decodeURIComponent(cookie.substring(cookieName.length));
        }
      }
      return null;
    } catch (error) {
      console.error('Chyba pri ƒç√≠tan√≠ cookie:', error);
      return null;
    }
  }

  /**
   * Zma≈æe cookie
   */
  static removeCookie(name: string): void {
    try {
      document.cookie = `${this.COOKIE_PREFIX}${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
      console.log(`üóëÔ∏è Cookie zmazan√©: ${name}`);
    } catch (error) {
      console.error('Chyba pri mazan√≠ cookie:', error);
    }
  }

  /**
   * Ulo≈æ√≠ token a user data s fallback na localStorage
   */
  static setAuthData(token: string, user: any, rememberMe: boolean = true): void {
    try {
      console.log('üíæ Uklad√°m auth data...', { rememberMe, token: !!token, user: !!user });
      
      // V≈ΩDY ulo≈æi≈• do localStorage ako prim√°rny storage
      localStorage.setItem('blackrent_token', token);
      localStorage.setItem('blackrent_user', JSON.stringify(user));
      localStorage.setItem('blackrent_remember_me', rememberMe.toString());
      
      // Pokus o ulo≈æenie do cookies ako bonus
      if (rememberMe) {
        try {
          this.setCookie('token', token, this.COOKIE_EXPIRY_DAYS);
          this.setCookie('user', JSON.stringify(user), this.COOKIE_EXPIRY_DAYS);
          this.setCookie('remember_me', 'true', this.COOKIE_EXPIRY_DAYS);
        } catch (cookieError) {
          console.warn('Cookies sa nepodarilo ulo≈æi≈•, ale localStorage funguje:', cookieError);
        }
      } else {
        // Pre session mode pou≈æi≈• sessionStorage ako fallback
        sessionStorage.setItem('blackrent_token', token);
        sessionStorage.setItem('blackrent_user', JSON.stringify(user));
        
        try {
          this.setCookie('token', token, 1); // 1 de≈à
          this.setCookie('user', JSON.stringify(user), 1);
          this.setCookie('remember_me', 'false', 1);
        } catch (cookieError) {
          console.warn('Session cookies sa nepodarilo ulo≈æi≈•:', cookieError);
        }
      }
      
      console.log('‚úÖ Auth data ulo≈æen√© √∫spe≈°ne');
    } catch (error) {
      console.error('Chyba pri ukladan√≠ auth data:', error);
      // Posledn√Ω fallback - aspo≈à localStorage
      try {
        const storage = rememberMe ? localStorage : sessionStorage;
        storage.setItem('blackrent_token', token);
        storage.setItem('blackrent_user', JSON.stringify(user));
        localStorage.setItem('blackrent_remember_me', rememberMe.toString());
      } catch (fallbackError) {
        console.error('Aj fallback ukladanie zlyhalo:', fallbackError);
      }
    }
  }

  /**
   * Naƒç√≠ta token a user data s fallback na localStorage
   */
  static getAuthData(): { token: string | null; user: any | null } {
    try {
      // Prim√°rne: localStorage (najspoƒæahlivej≈°ie)
      let token = localStorage.getItem('blackrent_token');
      let userStr = localStorage.getItem('blackrent_user');
      
      if (token && userStr) {
        console.log('üì¶ Auth data naƒç√≠tan√© z localStorage');
        return {
          token,
          user: JSON.parse(userStr)
        };
      }

      // Fallback 1: cookies
      token = this.getCookie('token');
      userStr = this.getCookie('user');
      
      if (token && userStr) {
        console.log('üç™ Auth data naƒç√≠tan√© z cookies');
        try {
          return {
            token,
            user: JSON.parse(userStr)
          };
        } catch (parseError) {
          console.error('Chyba pri parsovan√≠ user data z cookies:', parseError);
        }
      }

      // Fallback 2: sessionStorage
      token = sessionStorage.getItem('blackrent_token');
      userStr = sessionStorage.getItem('blackrent_user');
      
      if (token && userStr) {
        console.log('üóÇÔ∏è Auth data naƒç√≠tan√© z sessionStorage');
        try {
          return {
            token,
            user: JSON.parse(userStr)
          };
        } catch (parseError) {
          console.error('Chyba pri parsovan√≠ user data z sessionStorage:', parseError);
        }
      }
      
      console.log('‚ùå ≈Ωiadne auth data nen√°jden√©');
      return { token: null, user: null };
    } catch (error) {
      console.error('Chyba pri naƒç√≠tan√≠ auth data:', error);
      return { token: null, user: null };
    }
  }

  /**
   * Vyma≈æe v≈°etky auth data
   */
  static clearAuthData(): void {
    try {
      console.log('üßπ Ma≈æem v≈°etky auth data...');
      
      // Vyma≈æ cookies
      this.removeCookie('token');
      this.removeCookie('user');
      this.removeCookie('remember_me');
      
      // Vyma≈æ localStorage
      localStorage.removeItem('blackrent_token');
      localStorage.removeItem('blackrent_user');
      localStorage.removeItem('blackrent_remember_me');
      
      // Vyma≈æ sessionStorage
      sessionStorage.removeItem('blackrent_token');
      sessionStorage.removeItem('blackrent_user');
      
      console.log('‚úÖ V≈°etky auth data vymazan√©');
    } catch (error) {
      console.error('Chyba pri mazan√≠ auth data:', error);
    }
  }

  /**
   * Kontroluje ƒçi je remember me enabled
   */
  static isRememberMeEnabled(): boolean {
    try {
      // Sk√∫s cookies
      const cookieValue = this.getCookie('remember_me');
      if (cookieValue !== null) {
        return cookieValue === 'true';
      }
      
      // Fallback na localStorage
      const localValue = localStorage.getItem('blackrent_remember_me');
      return localValue === 'true';
    } catch (error) {
      console.error('Chyba pri kontrole remember me:', error);
      return true; // Default na true pre perzistentn√© prihl√°senie
    }
  }

  // üîß Tracking ƒçi u≈æ boli storage testy vykonan√©
  private static storageTestDone = false;

  /**
   * Testuje ƒçi storage funguje spr√°vne
   */
  static testStorage(): void {
    // ‚ö° OPTIMALIZ√ÅCIA: Spusti≈• len raz, alebo v≈ædy v development
    if (this.storageTestDone && process.env.NODE_ENV === 'production') {
      return; // U≈æ bolo testovan√©
    }
    
    try {
      console.log('üîç Testing storage capabilities...');
      
      // Test localStorage
      const testKey = 'blackrent_test';
      const testValue = 'test_value';
      
      localStorage.setItem(testKey, testValue);
      const localResult = localStorage.getItem(testKey);
      localStorage.removeItem(testKey);
      
      console.log('üì¶ localStorage test:', localResult === testValue ? '‚úÖ OK' : '‚ùå FAIL');
      
      // Test cookies
      this.setCookie('test', testValue, 1);
      const cookieResult = this.getCookie('test');
      this.removeCookie('test');
      
      console.log('üç™ Cookies test:', cookieResult === testValue ? '‚úÖ OK' : '‚ùå FAIL');
      
      // Test sessionStorage
      sessionStorage.setItem(testKey, testValue);
      const sessionResult = sessionStorage.getItem(testKey);
      sessionStorage.removeItem(testKey);
      
      console.log('üóÇÔ∏è sessionStorage test:', sessionResult === testValue ? '‚úÖ OK' : '‚ùå FAIL');
      
      // Oznaƒçi≈• ako dokonƒçen√©
      this.storageTestDone = true;
      
    } catch (error) {
      console.error('üîç Storage test error:', error);
    }
  }
} 