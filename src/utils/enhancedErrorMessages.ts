/**
 * üìù ENHANCED ERROR MESSAGES
 * 
 * User-friendly error messages s kontextom a akƒçn√Ωmi n√°vrhmi
 */

export interface ErrorContext {
  action?: string; // 'login', 'save', 'load', 'delete', etc.
  entity?: string; // 'vehicle', 'rental', 'customer', etc.
  location?: string; // component/page context
}

export interface EnhancedErrorMessage {
  title: string;
  message: string;
  suggestion: string;
  actionLabel?: string;
  severity: 'error' | 'warning' | 'info';
  emoji: string;
  category: 'network' | 'auth' | 'validation' | 'server' | 'unknown';
}

/**
 * üéØ Generuje user-friendly error message na z√°klade kontextu
 */
export const getEnhancedErrorMessage = (
  error: any, 
  context: ErrorContext = {}
): EnhancedErrorMessage => {
  const { action, entity } = context;
  
  // Network/Connection errors
  if (isNetworkError(error)) {
    return {
      title: 'üåê Probl√©m s pripojen√≠m',
      message: navigator.onLine 
        ? 'Server je moment√°lne nedostupn√Ω alebo pre≈•a≈æen√Ω.'
        : 'Skontrolujte svoje internetov√© pripojenie.',
      suggestion: navigator.onLine 
        ? 'Poƒçkajte chv√≠ƒæu a sk√∫ste znova. Ak probl√©m pretrv√°va, kontaktujte podporu.'
        : 'Zapnite Wi-Fi alebo mobiln√© d√°ta a sk√∫ste znova.',
      actionLabel: 'Sk√∫si≈• znova',
      severity: 'warning',
      emoji: 'üåê',
      category: 'network'
    };
  }

  // Authentication errors
  if (isAuthError(error)) {
    return {
      title: 'üîê Probl√©m s prihl√°sen√≠m',
      message: getAuthErrorMessage(error),
      suggestion: 'Skontrolujte svoje prihlasovacie √∫daje a sk√∫ste znova.',
      actionLabel: 'Prihl√°si≈• sa',
      severity: 'error',
      emoji: 'üîê',
      category: 'auth'
    };
  }

  // Validation errors
  if (isValidationError(error)) {
    return {
      title: 'üìù Neplatn√© √∫daje',
      message: getValidationErrorMessage(error, entity),
      suggestion: 'Skontrolujte v≈°etky povinn√© polia a ich form√°t.',
      actionLabel: 'Opravi≈•',
      severity: 'warning',
      emoji: 'üìù',
      category: 'validation'
    };
  }

  // Server errors (5xx)
  if (isServerError(error)) {
    return {
      title: '‚öôÔ∏è Probl√©m so serverom',
      message: getServerErrorMessage(error, action, entity),
      suggestion: 'Toto je doƒçasn√Ω probl√©m. Sk√∫ste znova o chv√≠ƒæu.',
      actionLabel: 'Sk√∫si≈• znova',
      severity: 'error',
      emoji: '‚öôÔ∏è',
      category: 'server'
    };
  }

  // Permission errors
  if (isPermissionError(error)) {
    return {
      title: '‚õî Nedostatoƒçn√© opr√°vnenia',
      message: getPermissionErrorMessage(action, entity),
      suggestion: 'Kontaktujte administr√°tora pre z√≠skanie potrebn√Ωch opr√°vnen√≠.',
      actionLabel: 'Kontaktova≈• admin',
      severity: 'warning',
      emoji: '‚õî',
      category: 'auth'
    };
  }

  // Rate limiting
  if (isRateLimitError(error)) {
    return {
      title: '‚è∏Ô∏è Pr√≠li≈° veƒæa pokusov',
      message: 'Prekroƒçili ste limit requestov za min√∫tu.',
      suggestion: 'Poƒçkajte chv√≠ƒæu predt√Ωm ako sk√∫site znova.',
      actionLabel: 'Poƒçka≈•',
      severity: 'warning',
      emoji: '‚è∏Ô∏è',
      category: 'server'
    };
  }

  // Not found errors
  if (isNotFoundError(error)) {
    return {
      title: 'üîç Nena≈°li sa d√°ta',
      message: getNotFoundMessage(entity),
      suggestion: 'D√°ta mohli by≈• zmazan√© alebo premiestnen√©.',
      actionLabel: 'Obnovi≈•',
      severity: 'info',
      emoji: 'üîç',
      category: 'server'
    };
  }

  // Generic fallback
  return {
    title: '‚ùå Neoƒçak√°van√° chyba',
    message: 'Nastala neoƒçak√°van√° chyba pri vykon√°van√≠ akcie.',
    suggestion: 'Obnovte str√°nku alebo sk√∫ste znova o chv√≠ƒæu.',
    actionLabel: 'Obnovi≈• str√°nku',
    severity: 'error',
    emoji: '‚ùå',
    category: 'unknown'
  };
};

// Helper functions pre detekciu typov ch√Ωb
const isNetworkError = (error: any): boolean => {
  const message = error?.message?.toLowerCase() || '';
  return message.includes('failed to fetch') || 
         message.includes('network error') ||
         message.includes('connection refused') ||
         !navigator.onLine;
};

const isAuthError = (error: any): boolean => {
  return error?.status === 401 || error?.status === 403;
};

const isValidationError = (error: any): boolean => {
  return error?.status === 400 || error?.status === 422;
};

const isServerError = (error: any): boolean => {
  return error?.status >= 500 && error?.status < 600;
};

const isPermissionError = (error: any): boolean => {
  return error?.status === 403;
};

const isRateLimitError = (error: any): boolean => {
  return error?.status === 429;
};

const isNotFoundError = (error: any): boolean => {
  return error?.status === 404;
};

// Specific error message generators
const getAuthErrorMessage = (error: any): string => {
  switch (error?.status) {
    case 401:
      return 'Va≈°a rel√°cia vypr≈°ala. Prihl√°ste sa znova.';
    case 403:
      return 'Nem√°te opr√°vnenie na t√∫to akciu.';
    default:
      return 'Probl√©m s autentifik√°ciou.';
  }
};

const getValidationErrorMessage = (error: any, entity?: string): string => {
  const entityName = getEntityName(entity);
  
  if (error?.details) {
    return `Neplatn√© √∫daje pre ${entityName}: ${error.details}`;
  }
  
  return `Skontrolujte √∫daje pre ${entityName}. Niektor√© polia s√∫ neplatn√©.`;
};

const getServerErrorMessage = (error: any, action?: string, entity?: string): string => {
  const actionText = getActionText(action);
  const entityName = getEntityName(entity);
  
  if (error?.status >= 500) {
    return `Nepodarilo sa ${actionText} ${entityName} kv√¥li probl√©mu so serverom.`;
  }
  
  return `Probl√©m so serverom pri ${actionText} ${entityName}.`;
};

const getPermissionErrorMessage = (action?: string, entity?: string): string => {
  const actionText = getActionText(action);
  const entityName = getEntityName(entity);
  
  return `Nem√°te opr√°vnenie ${actionText} ${entityName}.`;
};

const getNotFoundMessage = (entity?: string): string => {
  const entityName = getEntityName(entity);
  return `Po≈æadovan√© ${entityName} sa nena≈°li alebo boli zmazan√©.`;
};

// Helper functions pre user-friendly n√°zvy
const getEntityName = (entity?: string): string => {
  const entityNames: Record<string, string> = {
    vehicle: 'vozidlo',
    rental: 'pren√°jom', 
    customer: 'z√°kazn√≠ka',
    expense: 'n√°klad',
    insurance: 'poistenie',
    settlement: 'vy√∫ƒçtovanie',
    user: 'pou≈æ√≠vateƒæa',
    company: 'firmu',
  };
  
  return entityNames[entity || ''] || 'd√°ta';
};

const getActionText = (action?: string): string => {
  const actionTexts: Record<string, string> = {
    create: 'vytvori≈•',
    save: 'ulo≈æi≈•',
    update: 'aktualizova≈•',
    delete: 'zmaza≈•',
    load: 'naƒç√≠ta≈•',
    login: 'prihl√°si≈•',
    logout: 'odhl√°si≈•',
    export: 'exportova≈•',
    import: 'importova≈•',
  };
  
  return actionTexts[action || ''] || 'spracova≈•';
};

/**
 * üé® Error recovery suggestions na z√°klade kontextu
 */
export const getRecoverySuggestions = (
  error: any, 
  context: ErrorContext = {}
): string[] => {
  const suggestions: string[] = [];
  
  if (isNetworkError(error)) {
    suggestions.push('Skontrolujte internetov√© pripojenie');
    suggestions.push('Sk√∫ste obnovi≈• str√°nku');
    suggestions.push('Poƒçkajte chv√≠ƒæu a sk√∫ste znova');
  }
  
  if (isAuthError(error)) {
    suggestions.push('Prihl√°ste sa znova');
    suggestions.push('Skontrolujte prihlasovacie √∫daje');
    suggestions.push('Kontaktujte administr√°tora');
  }
  
  if (isValidationError(error)) {
    suggestions.push('Skontrolujte povinn√© polia');
    suggestions.push('Overte form√°t zadan√Ωch √∫dajov');
    suggestions.push('Sk√∫ste s in√Ωmi √∫dajmi');
  }
  
  if (isServerError(error)) {
    suggestions.push('Poƒçkajte chv√≠ƒæu a sk√∫ste znova');
    suggestions.push('Kontaktujte technick√∫ podporu');
    suggestions.push('Sk√∫ste in√∫ akciu');
  }
  
  return suggestions;
};