// ðŸŽ¨ Generated UI Input Component for {{fieldLabel}}
// Field: {{fieldName}}, Type: {{type}}

import React, { useState } from 'react';

interface {{fieldNamePascal}}InputProps {
  value: {{{tsType}}};
  onChange: (value: {{{tsType}}}) => void;
  label?: string;
  placeholder?: string;
  disabled?: boolean;
  error?: string;
  required?: boolean;
}

export const {{fieldNamePascal}}Input: React.FC<{{fieldNamePascal}}InputProps> = ({
  value,
  onChange,
  label = '{{fieldLabel}}',
  placeholder,
  disabled = false,
  error,
  required = false
}) => {
  {{#if (eq type 'number')}}
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const rawValue = e.target.value;
    
    // Parse number safely
    if (rawValue === '') {
      onChange({{defaultValue}});
      return;
    }
    
    const parsedValue = parseFloat(rawValue);
    if (!isNaN(parsedValue)) {
      // Apply constraints
      {{#if minValue}}
      const constrainedValue = Math.max({{minValue}}, parsedValue);
      {{else}}
      const constrainedValue = parsedValue;
      {{/if}}
      {{#if maxValue}}
      const finalValue = Math.min({{maxValue}}, constrainedValue);
      {{else}}
      const finalValue = constrainedValue;
      {{/if}}
      
      onChange(finalValue);
    }
  };
  {{else if (eq type 'boolean')}}
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.checked);
  };
  {{else if (eq type 'enum')}}
  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    onChange(e.target.value as {{{tsType}}});
  };
  {{else}}
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.value);
  };
  {{/if}}

  return (
    <div className="flex flex-col gap-1">
      {label && (
        <label className="text-sm font-medium text-gray-700">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      
      {{#if (eq type 'boolean')}}
      <label className="flex items-center gap-2 cursor-pointer">
        <input
          type="checkbox"
          checked={value}
          onChange={handleChange}
          disabled={disabled}
          className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
        />
        <span className="text-sm text-gray-700">{label}</span>
      </label>
      {{else if (eq type 'enum')}}
      <select
        value={value}
        onChange={handleChange}
        disabled={disabled}
        className={`
          w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500
          ${error ? 'border-red-500' : 'border-gray-300'}
          ${disabled ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}
        `}
      >
        {{#each enumValues}}
        <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>
      {{else}}
      <input
        type="{{#if (eq type 'number')}}number{{else}}text{{/if}}"
        value={value}
        onChange={handleChange}
        placeholder={placeholder}
        disabled={disabled}
        {{#if (eq type 'number')}}
        {{#if minValue}}min="{{minValue}}"{{/if}}
        {{#if maxValue}}max="{{maxValue}}"{{/if}}
        step="0.01"
        {{/if}}
        className={`
          w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500
          ${error ? 'border-red-500' : 'border-gray-300'}
          ${disabled ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}
        `}
      />
      {{/if}}
      
      {error && (
        <span className="text-sm text-red-500">{error}</span>
      )}
    </div>
  );
};