#!/bin/bash

# Automatick√© sledovanie zmien a nasadenie na Railway
# Pou≈æitie: ./auto-watch-deploy.sh

echo "üëÅÔ∏è Automatick√© sledovanie zmien a nasadenie na Railway"
echo "====================================================="

# Farby
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Kontrola, ƒçi sme v spr√°vnom prieƒçinku
if [ ! -f "railway.json" ]; then
    echo -e "${RED}‚ùå Mus√≠≈° by≈• v blackrent-new prieƒçinku!${NC}"
    echo -e "${YELLOW}üí° Spusti: cd blackrent-new && ./auto-watch-deploy.sh${NC}"
    exit 1
fi

# Kontrola ƒçi je fswatch nain≈°talovan√Ω (macOS)
if command -v fswatch >/dev/null 2>&1; then
    WATCHER="fswatch"
    echo -e "${GREEN}‚úÖ Pou≈æ√≠vam fswatch pre sledovanie zmien${NC}"
elif command -v inotifywait >/dev/null 2>&1; then
    WATCHER="inotify"
    echo -e "${GREEN}‚úÖ Pou≈æ√≠vam inotify pre sledovanie zmien${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Nen√°jden√Ω fswatch ani inotify, pou≈æ√≠vam polling${NC}"
    echo -e "${BLUE}üí° Pre lep≈°iu performance nain≈°taluj: brew install fswatch${NC}"
    WATCHER="poll"
fi

# Funkcia pre automatick√Ω deploy
auto_deploy() {
    echo ""
    echo -e "${PURPLE}üîÑ Detekovan√° zmena! Sp√∫≈°≈•am automatick√© nasadenie...${NC}"
    echo -e "${BLUE}üìù ƒåas: $(date '+%Y-%m-%d %H:%M:%S')${NC}"
    
    # Spusti≈• auto-deploy
    if ./auto-deploy.sh "auto: zmena detekovan√° $(date '+%H:%M:%S')"; then
        echo -e "${GREEN}‚úÖ Automatick√© nasadenie dokonƒçen√©!${NC}"
        echo -e "${YELLOW}‚è∞ Railway nasad√≠ zmeny za 2-5 min√∫t${NC}"
    else
        echo -e "${RED}‚ùå Automatick√© nasadenie zlyhalo!${NC}"
    fi
    
    echo -e "${BLUE}üëÅÔ∏è Pokraƒçujem v sledovan√≠ zmien...${NC}"
    echo "=================================================="
}

# Nastavenie sledovan√Ωch prieƒçinkov a s√∫borov
WATCH_DIRS=(
    "src"
    "public" 
    "backend"
    "."
)

WATCH_PATTERNS=(
    "*.tsx"
    "*.ts" 
    "*.js"
    "*.jsx"
    "*.css"
    "*.json"
    "*.md"
    "Dockerfile"
)

# Vyl√∫ƒçen√© prieƒçinky a s√∫bory
EXCLUDE_PATTERNS=(
    "node_modules"
    ".git"
    "dist"
    "build"
    ".DS_Store"
    "*.log"
    "backups"
)

echo ""
echo -e "${BLUE}üìÅ Sledovan√© prieƒçinky:${NC}"
for dir in "${WATCH_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo -e "${GREEN}  ‚úÖ $dir${NC}"
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  $dir (neexistuje)${NC}"
    fi
done

echo ""
echo -e "${BLUE}üìÑ Sledovan√© typy s√∫borov:${NC}"
for pattern in "${WATCH_PATTERNS[@]}"; do
    echo -e "${GREEN}  üìÑ $pattern${NC}"
done

echo ""
echo -e "${PURPLE}üöÄ Sp√∫≈°≈•am automatick√© sledovanie...${NC}"
echo -e "${YELLOW}üí° Stlaƒç Ctrl+C pre ukonƒçenie${NC}"
echo "=================================================="

# Hlavn√° sluƒçka podƒæa typu watchera
case $WATCHER in
    "fswatch")
        # macOS fswatch
        fswatch -o -r \
            --exclude=".git" \
            --exclude="node_modules" \
            --exclude="dist" \
            --exclude="build" \
            --exclude=".DS_Store" \
            --exclude="*.log" \
            --exclude="backups" \
            "${WATCH_DIRS[@]}" | while read num; do
            auto_deploy
        done
        ;;
        
    "inotify")
        # Linux inotify
        inotifywait -m -r -e create,modify,move,delete \
            --exclude="(.git|node_modules|dist|build|\.DS_Store|.*\.log|backups)" \
            "${WATCH_DIRS[@]}" | while read path action file; do
            # Kontrola ƒçi s√∫bor matchuje na≈°e patterny
            if [[ "$file" =~ \.(tsx?|jsx?|css|json|md)$ ]] || [[ "$file" == "Dockerfile" ]]; then
                auto_deploy
            fi
        done
        ;;
        
    "poll")
        # Fallback polling met√≥da
        echo -e "${BLUE}üîÑ Pou≈æ√≠vam polling ka≈æd√Ωch 10 sek√∫nd...${NC}"
        
        # Ulo≈æenie p√¥vodn√©ho stavu s√∫borov
        get_file_hashes() {
            find "${WATCH_DIRS[@]}" -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.js" -o -name "*.jsx" -o -name "*.css" -o -name "*.json" -o -name "*.md" -o -name "Dockerfile" \) \
            ! -path "*/node_modules/*" ! -path "*/.git/*" ! -path "*/dist/*" ! -path "*/build/*" ! -path "*/backups/*" \
            -exec stat -f "%N %m" {} \; 2>/dev/null | sort
        }
        
        LAST_STATE=$(get_file_hashes)
        
        while true; do
            sleep 10
            CURRENT_STATE=$(get_file_hashes)
            
            if [ "$CURRENT_STATE" != "$LAST_STATE" ]; then
                auto_deploy
                LAST_STATE=$(get_file_hashes)
            fi
        done
        ;;
esac

echo ""
echo -e "${GREEN}üèÅ Auto-watch ukonƒçen√Ω${NC}" 