#!/bin/bash

# Blackrent Production Deployment Script
# Autor: Assistant
# Popis: Script na nasadenie Blackrent aplik√°cie na server

set -e

echo "üöÄ Blackrent Production Deployment"
echo "================================="

# Farby pre v√Ωstup
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcie
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Kontrola z√°vislost√≠
check_dependencies() {
    log_info "Kontrolujem z√°vislosti..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker nie je nain≈°talovan√Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose nie je nain≈°talovan√Ω"
        exit 1
    fi
    
    log_success "Z√°vislosti s√∫ v poriadku"
}

# Kontrola .env s√∫boru
check_env() {
    log_info "Kontrolujem environment s√∫bor..."
    
    if [ ! -f .env ]; then
        log_warning ".env s√∫bor neexistuje, kop√≠rujem z production.env"
        cp production.env .env
        log_warning "D√îLE≈ΩIT√â: Upravte .env s√∫bor s va≈°imi nastaveniami!"
        log_warning "Najm√§: DB_PASSWORD, JWT_SECRET, FRONTEND_URL, DOMAIN"
        read -p "Stlaƒçte Enter po √∫prave .env s√∫boru..."
    fi
    
    log_success "Environment s√∫bor existuje"
}

# Build aplik√°cie
build_app() {
    log_info "Buildovanie aplik√°cie..."
    
    # Zastavenie ak be≈æ√≠
    docker-compose down 2>/dev/null || true
    
    # Build
    docker-compose build --no-cache
    
    log_success "Aplik√°cia √∫spe≈°ne zbuildovan√°"
}

# Spustenie aplik√°cie
start_app() {
    log_info "Sp√∫≈°≈•am aplik√°ciu..."
    
    # Vytvorenie potrebn√Ωch prieƒçinkov
    mkdir -p logs backup nginx/ssl
    
    # Spustenie
    docker-compose up -d
    
    log_success "Aplik√°cia √∫spe≈°ne spusten√°"
}

# Kontrola zdravia
health_check() {
    log_info "Kontrolujem zdravie aplik√°cie..."
    
    sleep 10
    
    # Kontrola PostgreSQL
    if docker-compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; then
        log_success "PostgreSQL be≈æ√≠ v poriadku"
    else
        log_error "PostgreSQL nebe≈æ√≠ spr√°vne"
        return 1
    fi
    
    # Kontrola Blackrent aplik√°cie
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:5001/api/health > /dev/null 2>&1; then
            log_success "Blackrent aplik√°cia be≈æ√≠ v poriadku"
            return 0
        fi
        
        log_info "ƒåak√°m na spustenie aplik√°cie... pokus $attempt/$max_attempts"
        sleep 5
        ((attempt++))
    done
    
    log_error "Aplik√°cia sa nespustila do 5 min√∫t"
    return 1
}

# SSL certifik√°ty
setup_ssl() {
    log_info "Nastavujem SSL certifik√°ty..."
    
    if [ ! -f nginx/ssl/fullchain.pem ] || [ ! -f nginx/ssl/privkey.pem ]; then
        log_warning "SSL certifik√°ty nen√°jden√©"
        log_info "Pre Let's Encrypt certifik√°ty pou≈æite:"
        log_info "sudo certbot certonly --webroot -w /var/www/certbot -d vasa-domena.sk"
        log_info "Potom skop√≠rujte certifik√°ty do nginx/ssl/"
        
        # Vytvorenie self-signed certifik√°tov pre test
        log_info "Vytv√°ram doƒçasn√© self-signed certifik√°ty..."
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout nginx/ssl/privkey.pem \
            -out nginx/ssl/fullchain.pem \
            -subj "/C=SK/ST=Slovakia/L=Bratislava/O=Blackrent/CN=localhost"
        
        log_warning "Pou≈æ√≠vaj√∫ sa doƒçasn√© certifik√°ty! Nastavte spr√°vne SSL pre produkciu"
    else
        log_success "SSL certifik√°ty s√∫ nastaven√©"
    fi
}

# Backup datab√°zy
backup_db() {
    log_info "Vytv√°ram z√°lohu datab√°zy..."
    
    docker-compose run --rm backup
    
    log_success "Z√°loha vytvoren√°"
}

# Zobrazenie logov
show_logs() {
    log_info "Posledn√Ωch 50 riadkov logov:"
    docker-compose logs --tail=50
}

# Cleanup
cleanup() {
    log_info "ƒåist√≠m star√© Docker images..."
    docker system prune -f
    log_success "Cleanup dokonƒçen√Ω"
}

# Hlavn√© menu
main() {
    case "${1:-deploy}" in
        "deploy")
            check_dependencies
            check_env
            build_app
            setup_ssl
            start_app
            health_check
            log_success "üéâ Deployment dokonƒçen√Ω!"
            log_info "Aplik√°cia be≈æ√≠ na: http://localhost:5001"
            log_info "Pre HTTPS: https://vasa-domena.sk (po nastaven√≠ SSL)"
            log_info "Admin pr√≠stup: admin / admin123"
            ;;
        "start")
            start_app
            health_check
            ;;
        "stop")
            log_info "Zastavujem aplik√°ciu..."
            docker-compose down
            log_success "Aplik√°cia zastaven√°"
            ;;
        "restart")
            log_info "Re≈°tartujem aplik√°ciu..."
            docker-compose restart
            health_check
            ;;
        "logs")
            show_logs
            ;;
        "backup")
            backup_db
            ;;
        "cleanup")
            cleanup
            ;;
        "status")
            docker-compose ps
            ;;
        *)
            echo "Pou≈æitie: $0 {deploy|start|stop|restart|logs|backup|cleanup|status}"
            echo ""
            echo "Pr√≠kazy:"
            echo "  deploy   - Kompletn√© nasadenie (default)"
            echo "  start    - Spustenie aplik√°cie"
            echo "  stop     - Zastavenie aplik√°cie"
            echo "  restart  - Re≈°tart aplik√°cie"
            echo "  logs     - Zobrazenie logov"
            echo "  backup   - Z√°loha datab√°zy"
            echo "  cleanup  - Vyƒçistenie star√Ωch images"
            echo "  status   - Stav kontajnerov"
            exit 1
            ;;
    esac
}

# Spustenie
main "$@" 