# 🚨 BLACKRENT PROJECT - ABSOLUTE ZERO TOLERANCE RULES 🚨

## 🔥 CRITICAL: ZERO ERRORS, ZERO WARNINGS POLICY

**ABSOLÚTNE PRAVIDLO:** Pri každej úprave kódu MUSÍŠ automaticky opraviť VŠETKY errors a warnings. NIKDY nemôžeš nechať kód s chybami!

### ⚡ AUTOMATICKÉ OPRAVOVANIE - POVINNÉ

Pred každým commitom MUSÍŠ:

1. **Spustiť ESLint fix:** `npx eslint src --ext .ts,.tsx --fix`
2. **Skontrolovať warnings:** `npx eslint src --ext .ts,.tsx --max-warnings=0`
3. **Spustiť TypeScript check:** `npm run build` (frontend + backend)
4. **Opraviť VŠETKY chyby** - bez výnimky!

### 🎯 PRÍSNE ESLINT PRAVIDLÁ

Tieto pravidlá sú nastavené ako **ERROR** (nie warning):

- `@typescript-eslint/no-explicit-any` - ZAKÁZANÉ `any` typy
- `@typescript-eslint/no-unused-vars` - ZAKÁZANÉ nepoužívané premenné
- `@typescript-eslint/consistent-type-imports` - Konzistentné importy
- `@typescript-eslint/ban-ts-comment` - ZAKÁZANÉ `@ts-ignore`
- `react-hooks/exhaustive-deps` - Správne React dependencies
- `no-case-declarations` - Správne case deklarácie
- `@typescript-eslint/ban-types` - ZAKÁZANÉ nebezpečné typy

### 🛠️ AUTOMATICKÉ OPRAVY

**Nepoužívané importy/premenné:**
```typescript
// ❌ ZLÉ
import { UnusedIcon } from '@mui/icons-material';
const unusedVariable = 'test';

// ✅ SPRÁVNE - zakomentuj alebo odstráň
// import { UnusedIcon } from '@mui/icons-material';
// const unusedVariable = 'test';
```

**Any typy:**
```typescript
// ❌ ZLÉ
const data: any = {};
const users: any[] = [];

// ✅ SPRÁVNE
const data: Record<string, unknown> = {};
const users: Record<string, unknown>[] = [];
```

**React hooks dependencies:**
```typescript
// ❌ ZLÉ
useEffect(() => {
  loadData();
}, []);

// ✅ SPRÁVNE
const loadData = useCallback(() => {
  // logic
}, [dependency1, dependency2]);

useEffect(() => {
  loadData();
}, [loadData]);
```

**TypeScript importy:**
```typescript
// ❌ ZLÉ
import React from 'react';
import { Component } from 'react';

// ✅ SPRÁVNE
import type React from 'react';
import type { Component } from 'react';
```

### 🚀 WORKFLOW PRE KAŽDÚ ÚPRAVU

1. **Urob zmenu v kóde**
2. **Automaticky spusti:** `npx eslint src --ext .ts,.tsx --fix`
3. **Skontroluj:** `npx eslint src --ext .ts,.tsx --max-warnings=0`
4. **Ak sú chyby:** Oprav ich VŠETKY
5. **Test build:** `npm run build && cd backend && npm run build`
6. **Commit len ak je 0 errors, 0 warnings**

### 🎯 CURSOR AI INŠTRUKCIE

Keď upravuješ kód:

1. **VŽDY** po úprave spusti ESLint fix
2. **VŽDY** skontroluj že nie sú warnings/errors
3. **VŽDY** oprav všetky problémy pred pokračovaním
4. **NIKDY** nenechaj kód s chybami
5. **VŽDY** používaj správne TypeScript typy
6. **VŽDY** odstráň nepoužívané importy/premenné
7. **VŽDY** oprav React hooks dependencies

### 🔧 RÝCHLE PRÍKAZY

```bash
# Oprav všetky ESLint chyby
npx eslint src --ext .ts,.tsx --fix

# Skontroluj že nie sú warnings
npx eslint src --ext .ts,.tsx --max-warnings=0

# Test buildy
npm run build
cd backend && npm run build

# Commit s automatickým formátovaním
npm run commit
```

### 🚨 ABSOLÚTNY ZÁKAZ

- ❌ Commitovať kód s warnings/errors
- ❌ Používať `any` typy
- ❌ Nechávať nepoužívané importy/premenné
- ❌ Ignorovať React hooks dependencies
- ❌ Používať `@ts-ignore` namiesto `@ts-expect-error`
- ❌ Nechávať nedokončené opravy

### ✅ POVINNÉ AKCIE

- ✅ Vždy 0 errors, 0 warnings
- ✅ Automatické opravovanie po každej úprave
- ✅ Správne TypeScript typy
- ✅ Čisté importy a premenné
- ✅ Správne React patterns
- ✅ Build test pred commitom

**PAMÄTAJ: Kvalita kódu je priorita #1. Radšej menej funkcionalít ale perfektný kód!**